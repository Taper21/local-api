#%RAML 0.8
title: "IsaaCloud REST API"
version: "0.1"
baseUri: "https://api.isaacloud.com/v1"
protocols: [HTTPS]
mediaType: "application/json"
resourceTypes: 
    - 
        "common": 
            displayName: "common"
traits: 
    - 
        "paginator": 
            displayName: "paginator"
    - 
        "groups": 
            displayName: "groups"
    - 
        "segments": 
            displayName: "segments"
    - 
        "fields": 
            displayName: "fields"
    - 
        "ordering": 
            displayName: "ordering"
securitySchemes: 
    - 
        "oauth_2_0": 
            description: |
                In authentication case we use OAuth2 serwer implementation, is an open standard provides a method for clients to access server resources on behalf of a resource owner.
            type: "OAuth 2.0"
            settings: 
                "accessTokenUri": "https://oauth.isaacloud.com/token"
                "authorizationUri": "https://oauth.isaacloud.com/authorize"
                "baseUri": "https://oauth.isaacloud.com"
securedBy: 
    - 
        oauth_2_0
"/queues": 
    displayName: "Queue"
    "/events": 
        displayName: "Events"
        type: "common"
        get: 
            description: "Get a list of events for a client."
            queryParameters: 
                "offset": 
                    description: "Number of returned items."
                    type: number
                    required: false
                    repeat: false
                "limit": 
                    description: "Starting position."
                    type: number
                    required: false
                    repeat: false
                "fields": 
                    description: "The fields we want to show in our result."
                    type: string
                    required: false
                    repeat: false
                    example: "id,name,description"
                "order": 
                    description: "The fields we want to order by and the type of ordering."
                    type: string
                    required: false
                    repeat: false
                    example: "id:DESC"
            responses: 
                "200": 
                    description: "Success!"
                    body: 
                        "application/json": 
                            schema: |
                                {
                                    "$schema": "http://json-schema.org/draft-03/schema",
                                    "properties": {
                                        "body": {
                                            "required": false,
                                            "type": "object",
                                            "description": "body of the event"
                                        },
                                        "status": {
                                            "required": false,
                                            "type": "string",
                                            "description": "current status"
                                        },
                                        "actionTime": {
                                            "required": false,
                                            "type": "number",
                                            "description": "time the action actually took place"
                                        },
                                        "sourceId": {
                                            "required": false,
                                            "type": "number",
                                            "description": "id of the source"
                                        },
                                        "type": {
                                            "required": false,
                                            "type": "string",
                                            "description": "type of this object"
                                        },
                                        "subjectType": {
                                            "required": false,
                                            "type": "string",
                                            "description": "type of the subject"
                                        },
                                        "subjectId": {
                                            "required": false,
                                            "type": "number",
                                            "description": "id of the subject"
                                        },
                                        "priority": {
                                            "required": false,
                                            "type": "string",
                                            "description": "priority of this object"
                                        },
                                        "clientId": {
                                            "required": false,
                                            "type": "number",
                                            "description": "id of the client"
                                        },
                                        "ttl": {
                                            "required": false,
                                            "type": "number",
                                            "description": ""
                                        },
                                        "updatedAt": {
                                            "required": false,
                                            "type": "number",
                                            "description": "time it was last updated"
                                        },
                                        "data": {
                                            "required": false,
                                            "type": "object",
                                            "description": "additional useful data"
                                        },
                                        "createdAt": {
                                            "required": false,
                                            "type": "number",
                                            "description": "time it was created"
                                        }
                                    }
                                }
                            example: |
                                [
                                   {
                                      "internalTTL":-1,
                                      "body":{
                                         "distance":"2000",
                                         "destination":"JFK"
                                      },
                                      "updatedAt":1393247833398,
                                      "internal":false,
                                      "priority":3,
                                      "actionTime":1393247833398,
                                      "clientId":1,
                                      "data":{
                                
                                      },
                                      "subjectType":0,
                                      "subjectId":12,
                                      "id":"530b4659e4b0ec808fa7fe54",
                                      "status":0,
                                      "createdAt":1393247833398,
                                      "type":0,
                                      "sourceId":55,
                                      "errorTTL":-1
                                   }
                                ]
                "500": 
                "404": 
                "400": 
            is: ["paginator", "fields", "ordering"]
        post: 
            description: "Create a new event."
            body: 
                "application/json": 
                    schema: |
                        {
                            "$schema": "http://json-schema.org/draft-03/schema",
                            "properties": {
                                "body": {
                                    "required": false,
                                    "type": "object",
                                    "description": "body of the event"
                                },
                                "sourceId": {
                                    "required": true,
                                    "type": "number",
                                    "description": "id of the source"
                                },
                                "subjectType": {
                                    "required": true,
                                    "type": "string",
                                    "description": "type of the subject"
                                },
                                "subjectId": {
                                    "required": true,
                                    "type": "number",
                                    "description": "id of the subject"
                                },
                                "priority": {
                                    "required": true,
                                    "type": "string",
                                    "description": "priority of this object"
                                },
                                "type": {
                                    "required": true,
                                    "type": "string",
                                    "description": "type of this object"
                                }
                            }
                        }
                    example: |
                        {
                        	"body":{
                        		"destination":"JFK",
                        		"distance":"2000"
                        	},
                        	"priority":"PRIORITY_HIGH",
                        	"sourceId":55,
                        	"subjectId":12,
                        	"subjectType":"USER",
                        	"type":"NORMAL"
                        }
            responses: 
                "201": 
                    body: 
                        "application/json": 
                            schema: |
                                {
                                    "$schema": "http://json-schema.org/draft-03/schema",
                                    "properties": {
                                        "body": {
                                            "required": false,
                                            "type": "object",
                                            "description": "body of the event"
                                        },
                                        "status": {
                                            "required": false,
                                            "type": "string",
                                            "description": "current status"
                                        },
                                        "actionTime": {
                                            "required": false,
                                            "type": "number",
                                            "description": "time the action actually took place"
                                        },
                                        "sourceId": {
                                            "required": false,
                                            "type": "number",
                                            "description": "id of the source"
                                        },
                                        "type": {
                                            "required": false,
                                            "type": "string",
                                            "description": "type of this object"
                                        },
                                        "subjectType": {
                                            "required": false,
                                            "type": "string",
                                            "description": "type of the subject"
                                        },
                                        "subjectId": {
                                            "required": false,
                                            "type": "number",
                                            "description": "id of the subject"
                                        },
                                        "priority": {
                                            "required": false,
                                            "type": "string",
                                            "description": "priority of this object"
                                        },
                                        "clientId": {
                                            "required": false,
                                            "type": "number",
                                            "description": "id of the client"
                                        },
                                        "ttl": {
                                            "required": false,
                                            "type": "number",
                                            "description": ""
                                        },
                                        "updatedAt": {
                                            "required": false,
                                            "type": "number",
                                            "description": "time it was last updated"
                                        },
                                        "data": {
                                            "required": false,
                                            "type": "object",
                                            "description": "additional useful data"
                                        },
                                        "createdAt": {
                                            "required": false,
                                            "type": "number",
                                            "description": "time it was created"
                                        }
                                    }
                                }
                            example: |
                                {
                                   "internalTTL":-1,
                                   "body":{
                                      "distance":"2000",
                                      "destination":"JFK"
                                   },
                                   "updatedAt":1393247833398,
                                   "internal":false,
                                   "priority":3,
                                   "actionTime":1393247833398,
                                   "clientId":1,
                                   "data":{
                                
                                   },
                                   "subjectType":0,
                                   "subjectId":12,
                                   "id":"530b4659e4b0ec808fa7fe54",
                                   "status":0,
                                   "createdAt":1393247833398,
                                   "type":0,
                                   "sourceId":55,
                                   "errorTTL":-1
                                }
                "200": 
                    description: "Success!"
                    body: 
                        "application/json": 
                            example: "example"
                "500": 
                "400": 
        "/error": 
            displayName: "ErrorEvents"
            type: "common"
            get: 
                description: "Get error events for a client."
                queryParameters: 
                    "offset": 
                        description: "Number of returned items."
                        type: number
                        required: false
                        repeat: false
                    "limit": 
                        description: "Starting position."
                        type: number
                        required: false
                        repeat: false
                    "fields": 
                        description: "The fields we want to show in our result."
                        type: string
                        required: false
                        repeat: false
                        example: "id,name,description"
                    "order": 
                        description: "The fields we want to order by and the type of ordering."
                        type: string
                        required: false
                        repeat: false
                        example: "id:DESC"
                responses: 
                    "200": 
                        description: "Success!"
                        body: 
                            "application/json": 
                                schema: |
                                    {
                                        "$schema": "http://json-schema.org/draft-03/schema",
                                        "properties": {
                                            "body": {
                                                "required": false,
                                                "type": "object",
                                                "description": "body of the event"
                                            },
                                            "status": {
                                                "required": false,
                                                "type": "string",
                                                "description": "current status"
                                            },
                                            "actionTime": {
                                                "required": false,
                                                "type": "number",
                                                "description": "time the action actually took place"
                                            },
                                            "sourceId": {
                                                "required": false,
                                                "type": "number",
                                                "description": "id of the source"
                                            },
                                            "type": {
                                                "required": false,
                                                "type": "string",
                                                "description": "type of this object"
                                            },
                                            "subjectType": {
                                                "required": false,
                                                "type": "string",
                                                "description": "type of the subject"
                                            },
                                            "subjectId": {
                                                "required": false,
                                                "type": "number",
                                                "description": "id of the subject"
                                            },
                                            "priority": {
                                                "required": false,
                                                "type": "string",
                                                "description": "priority of this object"
                                            },
                                            "clientId": {
                                                "required": false,
                                                "type": "number",
                                                "description": "id of the client"
                                            },
                                            "ttl": {
                                                "required": false,
                                                "type": "number",
                                                "description": ""
                                            },
                                            "updatedAt": {
                                                "required": false,
                                                "type": "number",
                                                "description": "time it was last updated"
                                            },
                                            "data": {
                                                "required": false,
                                                "type": "object",
                                                "description": "additional useful data"
                                            },
                                            "createdAt": {
                                                "required": false,
                                                "type": "number",
                                                "description": "time it was created"
                                            }
                                        }
                                    }
                                example: |
                                    [
                                       {
                                          "internalTTL":-1,
                                          "body":{
                                             "distance":"2000",
                                             "destination":"JFK"
                                          },
                                          "updatedAt":1393247833398,
                                          "internal":false,
                                          "priority":3,
                                          "actionTime":1393247833398,
                                          "clientId":1,
                                          "data":{
                                    
                                          },
                                          "subjectType":0,
                                          "subjectId":12,
                                          "id":"530b4659e4b0ec808fa7fe54",
                                          "status":0,
                                          "createdAt":1393247833398,
                                          "type":0,
                                          "sourceId":55,
                                          "errorTTL":-1
                                       }
                                    ]
                    "500": 
                    "404": 
                    "400": 
                is: ["paginator", "fields", "ordering"]
            "/{eventId}": 
                displayName: "ErrorEvent"
                uriParameters: 
                    "eventId": 
                        displayName: "eventId"
                        type: string
                        required: true
                        repeat: false
                type: "common"
                get: 
                    description: "Get one error event by id for a client."
                    responses: 
                        "200": 
                            description: "Success!"
                            body: 
                                "application/json": 
                                    schema: |
                                        {
                                            "$schema": "http://json-schema.org/draft-03/schema",
                                            "properties": {
                                                "body": {
                                                    "required": false,
                                                    "type": "object",
                                                    "description": "body of the event"
                                                },
                                                "status": {
                                                    "required": false,
                                                    "type": "string",
                                                    "description": "current status"
                                                },
                                                "actionTime": {
                                                    "required": false,
                                                    "type": "number",
                                                    "description": "time the action actually took place"
                                                },
                                                "sourceId": {
                                                    "required": false,
                                                    "type": "number",
                                                    "description": "id of the source"
                                                },
                                                "type": {
                                                    "required": false,
                                                    "type": "string",
                                                    "description": "type of this object"
                                                },
                                                "subjectType": {
                                                    "required": false,
                                                    "type": "string",
                                                    "description": "type of the subject"
                                                },
                                                "subjectId": {
                                                    "required": false,
                                                    "type": "number",
                                                    "description": "id of the subject"
                                                },
                                                "priority": {
                                                    "required": false,
                                                    "type": "string",
                                                    "description": "priority of this object"
                                                },
                                                "clientId": {
                                                    "required": false,
                                                    "type": "number",
                                                    "description": "id of the client"
                                                },
                                                "ttl": {
                                                    "required": false,
                                                    "type": "number",
                                                    "description": ""
                                                },
                                                "updatedAt": {
                                                    "required": false,
                                                    "type": "number",
                                                    "description": "time it was last updated"
                                                },
                                                "data": {
                                                    "required": false,
                                                    "type": "object",
                                                    "description": "additional useful data"
                                                },
                                                "createdAt": {
                                                    "required": false,
                                                    "type": "number",
                                                    "description": "time it was created"
                                                }
                                            }
                                        }
                                    example: |
                                        {
                                           "internalTTL":-1,
                                           "body":{
                                              "distance":"2000",
                                              "destination":"JFK"
                                           },
                                           "updatedAt":1393247833398,
                                           "internal":false,
                                           "priority":3,
                                           "actionTime":1393247833398,
                                           "clientId":1,
                                           "data":{
                                        
                                           },
                                           "subjectType":0,
                                           "subjectId":12,
                                           "id":"530b4659e4b0ec808fa7fe54",
                                           "status":0,
                                           "createdAt":1393247833398,
                                           "type":0,
                                           "sourceId":55,
                                           "errorTTL":-1
                                        }
                        "500": 
                        "404": 
                        "400": 
        "/{eventId}": 
            displayName: "Event"
            uriParameters: 
                "eventId": 
                    displayName: "eventId"
                    type: string
                    required: true
                    repeat: false
            type: "common"
            get: 
                description: "Get one event by Id for a client."
                responses: 
                    "200": 
                        description: "Success!"
                        body: 
                            "application/json": 
                                schema: |
                                    {
                                        "$schema": "http://json-schema.org/draft-03/schema",
                                        "properties": {
                                            "body": {
                                                "required": false,
                                                "type": "object",
                                                "description": "body of the event"
                                            },
                                            "status": {
                                                "required": false,
                                                "type": "string",
                                                "description": "current status"
                                            },
                                            "actionTime": {
                                                "required": false,
                                                "type": "number",
                                                "description": "time the action actually took place"
                                            },
                                            "sourceId": {
                                                "required": false,
                                                "type": "number",
                                                "description": "id of the source"
                                            },
                                            "type": {
                                                "required": false,
                                                "type": "string",
                                                "description": "type of this object"
                                            },
                                            "subjectType": {
                                                "required": false,
                                                "type": "string",
                                                "description": "type of the subject"
                                            },
                                            "subjectId": {
                                                "required": false,
                                                "type": "number",
                                                "description": "id of the subject"
                                            },
                                            "priority": {
                                                "required": false,
                                                "type": "string",
                                                "description": "priority of this object"
                                            },
                                            "clientId": {
                                                "required": false,
                                                "type": "number",
                                                "description": "id of the client"
                                            },
                                            "ttl": {
                                                "required": false,
                                                "type": "number",
                                                "description": ""
                                            },
                                            "updatedAt": {
                                                "required": false,
                                                "type": "number",
                                                "description": "time it was last updated"
                                            },
                                            "data": {
                                                "required": false,
                                                "type": "object",
                                                "description": "additional useful data"
                                            },
                                            "createdAt": {
                                                "required": false,
                                                "type": "number",
                                                "description": "time it was created"
                                            }
                                        }
                                    }
                                example: |
                                    {
                                       "internalTTL":-1,
                                       "body":{
                                          "distance":"2000",
                                          "destination":"JFK"
                                       },
                                       "updatedAt":1393247833398,
                                       "internal":false,
                                       "priority":3,
                                       "actionTime":1393247833398,
                                       "clientId":1,
                                       "data":{
                                    
                                       },
                                       "subjectType":0,
                                       "subjectId":12,
                                       "id":"530b4659e4b0ec808fa7fe54",
                                       "status":0,
                                       "createdAt":1393247833398,
                                       "type":0,
                                       "sourceId":55,
                                       "errorTTL":-1
                                    }
                    "500": 
                    "404": 
                    "400": 
    "/notifications": 
        displayName: "Notifications"
        type: "common"
        get: 
            description: "Get notifications for a client."
            queryParameters: 
                "offset": 
                    description: "Number of returned items."
                    type: number
                    required: false
                    repeat: false
                "limit": 
                    description: "Starting position."
                    type: number
                    required: false
                    repeat: false
                "fields": 
                    description: "The fields we want to show in our result."
                    type: string
                    required: false
                    repeat: false
                    example: "id,name,description"
                "order": 
                    description: "The fields we want to order by and the type of ordering."
                    type: string
                    required: false
                    repeat: false
                    example: "id:DESC"
            responses: 
                "200": 
                    description: "Success!"
                    body: 
                        "application/json": 
                            schema: |
                                {
                                    "$schema": "http://json-schema.org/draft-03/schema",
                                    "properties": {
                                        "status": {
                                            "required": false,
                                            "type": "string",
                                            "description": "current status"
                                        },
                                        "typeId": {
                                            "required": false,
                                            "type": "number",
                                            "description": "id of the type"
                                        },
                                        "subjectType": {
                                            "required": false,
                                            "type": "string",
                                            "description": "type of the subject"
                                        },
                                        "clientId": {
                                            "required": false,
                                            "type": "number",
                                            "description": "id of the client"
                                        },
                                        "priority": {
                                            "required": false,
                                            "type": "string",
                                            "description": "priority of this object"
                                        },
                                        "source": {
                                            "required": false,
                                            "type": "number",
                                            "description": ""
                                        },
                                        "subjectId": {
                                            "required": false,
                                            "type": "number",
                                            "description": "id of the subject"
                                        },
                                        "ttl": {
                                            "required": false,
                                            "type": "number",
                                            "description": ""
                                        },
                                        "updatedAt": {
                                            "required": false,
                                            "type": "number",
                                            "description": "time it was last updated"
                                        },
                                        "data": {
                                            "required": false,
                                            "type": "object",
                                            "description": "additional useful data"
                                        },
                                        "action": {
                                            "required": false,
                                            "type": "object",
                                            "description": "kind of action that will be taken"
                                        },
                                        "createdAt": {
                                            "required": false,
                                            "type": "number",
                                            "description": "time it was created"
                                        }
                                    }
                                }
                            example: |
                                [
                                    {
                                        "id": 1,
                                        "action": 5,
                                        "clientId": 1,
                                        "data": {},
                                        "progress": 1,
                                        "sourceId": 1,
                                        "status": 1,
                                        "subjectId": 1,
                                        "subjectType": 1,
                                        "ttl": 5,
                                        "typeId": 0,
                                        "updatedAt": 1390236382695,
                                        "createdAt": 1390236382695
                                    }
                                ]
                "500": 
                "404": 
                "400": 
            is: ["paginator", "fields", "ordering"]
        "/{notificationId}": 
            displayName: "Notification"
            uriParameters: 
                "notificationId": 
                    displayName: "notificationId"
                    type: string
                    required: true
                    repeat: false
            type: "common"
            get: 
                description: "Get notification for a client and set its status to IN_PROGRESS."
                responses: 
                    "200": 
                        description: "Success!"
                        body: 
                            "application/json": 
                                schema: |
                                    {
                                        "$schema": "http://json-schema.org/draft-03/schema",
                                        "properties": {
                                            "status": {
                                                "required": false,
                                                "type": "string",
                                                "description": "current status"
                                            },
                                            "typeId": {
                                                "required": false,
                                                "type": "number",
                                                "description": "id of the type"
                                            },
                                            "subjectType": {
                                                "required": false,
                                                "type": "string",
                                                "description": "type of the subject"
                                            },
                                            "clientId": {
                                                "required": false,
                                                "type": "number",
                                                "description": "id of the client"
                                            },
                                            "priority": {
                                                "required": false,
                                                "type": "string",
                                                "description": "priority of this object"
                                            },
                                            "source": {
                                                "required": false,
                                                "type": "number",
                                                "description": ""
                                            },
                                            "subjectId": {
                                                "required": false,
                                                "type": "number",
                                                "description": "id of the subject"
                                            },
                                            "ttl": {
                                                "required": false,
                                                "type": "number",
                                                "description": ""
                                            },
                                            "updatedAt": {
                                                "required": false,
                                                "type": "number",
                                                "description": "time it was last updated"
                                            },
                                            "data": {
                                                "required": false,
                                                "type": "object",
                                                "description": "additional useful data"
                                            },
                                            "action": {
                                                "required": false,
                                                "type": "object",
                                                "description": "kind of action that will be taken"
                                            },
                                            "createdAt": {
                                                "required": false,
                                                "type": "number",
                                                "description": "time it was created"
                                            }
                                        }
                                    }
                                example: |
                                    {
                                        "action": 5,
                                        "clientId": 1,
                                        "data": {},
                                        "progress": 1,
                                        "sourceId": 1,
                                        "status": 1,
                                        "subjectId": 1,
                                        "subjectType": 1,
                                        "ttl": 5,
                                        "typeId": 0,
                                    }
                    "500": 
                    "404": 
                    "400": 
            patch: 
                description: "Patch one notification by id."
                body: 
                    "application/json": 
                        schema: |
                            {
                                "$schema": "http://json-schema.org/draft-03/schema",
                                "properties": {
                                	"action": {
                                        "required": false,
                                        "type": "number",
                                        "description": "action to be taken"
                                    },
                                    "clientId": {
                                        "required": false,
                                        "type": "number",
                                        "description": "id of the client responsible for this resource"
                                    },
                                    "data": {
                                        "required": false,
                                        "type": "object",
                                        "description": "notification data"
                                    },
                                    "progress": {
                                        "required": false,
                                        "type": "number",
                                        "description": "id of the progress item"
                                    },
                                    "sourceId": {
                                        "required": false,
                                        "type": "number",
                                        "description": "id of the notification source"
                                    },
                                    "status": {
                                        "required": false,
                                        "type": "string",
                                        "description": "current status"
                                    },
                                    "subjectId": {
                                        "required": false,
                                        "type": "number",
                                        "description": "id of the subject (group/user)"
                                    },
                                    "subjectType": {
                                        "required": false,
                                        "type": "string",
                                        "description": "USER or GROUP"
                                    },
                                    "ttl": {
                                        "required": false,
                                        "type": "number",
                                        "description": "number of times it will be processed"
                                    },
                                    "typeId": {
                                        "required": false,
                                        "type": "number",
                                        "description": "id of the notificationType"
                                    }
                                }
                            }
                        example: |
                            {
                                "action": 5,
                                "clientId": 1,
                                "data": {},
                                "progress": 1,
                                "sourceId": 1,
                                "status": 1,
                                "subjectId": 1,
                                "subjectType": 1,
                                "ttl": 5,
                                "typeId": 0,
                            }
                responses: 
                    "200": 
                        description: "Success!"
                        body: 
                            "application/json": 
                                schema: |
                                    {
                                        "$schema": "http://json-schema.org/draft-03/schema",
                                        "properties": {
                                        	"action": {
                                                "required": false,
                                                "type": "number",
                                                "description": "action to be taken"
                                            },
                                            "clientId": {
                                                "required": false,
                                                "type": "number",
                                                "description": "id of the client responsible for this resource"
                                            },
                                            "data": {
                                                "required": false,
                                                "type": "object",
                                                "description": "notification data"
                                            },
                                            "progress": {
                                                "required": false,
                                                "type": "number",
                                                "description": "id of the progress item"
                                            },
                                            "sourceId": {
                                                "required": false,
                                                "type": "number",
                                                "description": "id of the notification source"
                                            },
                                            "status": {
                                                "required": false,
                                                "type": "string",
                                                "description": "current status"
                                            },
                                            "subjectId": {
                                                "required": false,
                                                "type": "number",
                                                "description": "id of the subject (group/user)"
                                            },
                                            "subjectType": {
                                                "required": false,
                                                "type": "string",
                                                "description": "USER or GROUP"
                                            },
                                            "ttl": {
                                                "required": false,
                                                "type": "number",
                                                "description": "number of times it will be processed"
                                            },
                                            "typeId": {
                                                "required": false,
                                                "type": "number",
                                                "description": "id of the notificationType"
                                            }
                                        }
                                    }
                                example: |
                                    {
                                        "id": 1,
                                        "action": 5,
                                        "clientId": 1,
                                        "data": {},
                                        "progress": 1,
                                        "sourceId": 1,
                                        "status": 1,
                                        "subjectId": 1,
                                        "subjectType": 1,
                                        "ttl": 5,
                                        "typeId": 0,
                                        "updatedAt": 1390236382695,
                                        "createdAt": 1390236382695
                                    }
                    "500": 
                    "404": 
                    "400": 
        "/error": 
            displayName: "ErrorNotifications"
            type: "common"
            get: 
                description: "Get error notifications for a client."
                queryParameters: 
                    "offset": 
                        description: "Number of returned items."
                        type: number
                        required: false
                        repeat: false
                    "limit": 
                        description: "Starting position."
                        type: number
                        required: false
                        repeat: false
                    "fields": 
                        description: "The fields we want to show in our result."
                        type: string
                        required: false
                        repeat: false
                        example: "id,name,description"
                    "order": 
                        description: "The fields we want to order by and the type of ordering."
                        type: string
                        required: false
                        repeat: false
                        example: "id:DESC"
                responses: 
                    "200": 
                        description: "Success!"
                        body: 
                            "application/json": 
                                schema: |
                                    {
                                        "$schema": "http://json-schema.org/draft-03/schema",
                                        "properties": {
                                            "status": {
                                                "required": false,
                                                "type": "string",
                                                "description": "current status"
                                            },
                                            "typeId": {
                                                "required": false,
                                                "type": "number",
                                                "description": "id of the type"
                                            },
                                            "subjectType": {
                                                "required": false,
                                                "type": "string",
                                                "description": "type of the subject"
                                            },
                                            "clientId": {
                                                "required": false,
                                                "type": "number",
                                                "description": "id of the client"
                                            },
                                            "priority": {
                                                "required": false,
                                                "type": "string",
                                                "description": "priority of this object"
                                            },
                                            "source": {
                                                "required": false,
                                                "type": "number",
                                                "description": ""
                                            },
                                            "subjectId": {
                                                "required": false,
                                                "type": "number",
                                                "description": "id of the subject"
                                            },
                                            "ttl": {
                                                "required": false,
                                                "type": "number",
                                                "description": ""
                                            },
                                            "updatedAt": {
                                                "required": false,
                                                "type": "number",
                                                "description": "time it was last updated"
                                            },
                                            "data": {
                                                "required": false,
                                                "type": "object",
                                                "description": "additional useful data"
                                            },
                                            "action": {
                                                "required": false,
                                                "type": "object",
                                                "description": "kind of action that will be taken"
                                            },
                                            "createdAt": {
                                                "required": false,
                                                "type": "number",
                                                "description": "time it was created"
                                            }
                                        }
                                    }
                                example: |
                                    [
                                        {
                                            "id": 1,
                                            "action": 5,
                                            "clientId": 1,
                                            "data": {},
                                            "progress": 1,
                                            "sourceId": 1,
                                            "status": 1,
                                            "subjectId": 1,
                                            "subjectType": 1,
                                            "ttl": 5,
                                            "typeId": 0,
                                            "updatedAt": 1390236382695,
                                            "createdAt": 1390236382695
                                        }
                                    ]
                    "500": 
                    "404": 
                    "400": 
                is: ["paginator", "fields", "ordering"]
            "/{notificationId}": 
                displayName: "ErrorNotification"
                uriParameters: 
                    "notificationId": 
                        displayName: "notificationId"
                        type: string
                        required: true
                        repeat: false
                type: "common"
                get: 
                    description: "Get error notification for a client."
                    responses: 
                        "200": 
                            description: "Success!"
                            body: 
                                "application/json": 
                                    schema: |
                                        {
                                            "$schema": "http://json-schema.org/draft-03/schema",
                                            "properties": {
                                                "status": {
                                                    "required": false,
                                                    "type": "string",
                                                    "description": "current status"
                                                },
                                                "typeId": {
                                                    "required": false,
                                                    "type": "number",
                                                    "description": "id of the type"
                                                },
                                                "subjectType": {
                                                    "required": false,
                                                    "type": "string",
                                                    "description": "type of the subject"
                                                },
                                                "clientId": {
                                                    "required": false,
                                                    "type": "number",
                                                    "description": "id of the client"
                                                },
                                                "priority": {
                                                    "required": false,
                                                    "type": "string",
                                                    "description": "priority of this object"
                                                },
                                                "source": {
                                                    "required": false,
                                                    "type": "number",
                                                    "description": ""
                                                },
                                                "subjectId": {
                                                    "required": false,
                                                    "type": "number",
                                                    "description": "id of the subject"
                                                },
                                                "ttl": {
                                                    "required": false,
                                                    "type": "number",
                                                    "description": ""
                                                },
                                                "updatedAt": {
                                                    "required": false,
                                                    "type": "number",
                                                    "description": "time it was last updated"
                                                },
                                                "data": {
                                                    "required": false,
                                                    "type": "object",
                                                    "description": "additional useful data"
                                                },
                                                "action": {
                                                    "required": false,
                                                    "type": "object",
                                                    "description": "kind of action that will be taken"
                                                },
                                                "createdAt": {
                                                    "required": false,
                                                    "type": "number",
                                                    "description": "time it was created"
                                                }
                                            }
                                        }
                                    example: |
                                        {
                                            "action": 5,
                                            "clientId": 1,
                                            "data": {},
                                            "progress": 1,
                                            "sourceId": 1,
                                            "status": 1,
                                            "subjectId": 1,
                                            "subjectType": 1,
                                            "ttl": 5,
                                            "typeId": 0,
                                        }
                        "500": 
                        "404": 
                        "400": 
                patch: 
                    description: "Update status for an error notification."
                    body: 
                        "application/json": 
                            schema: |
                                {
                                    "$schema": "http://json-schema.org/draft-03/schema",
                                    "properties": {
                                    	"action": {
                                            "required": false,
                                            "type": "number",
                                            "description": "action to be taken"
                                        },
                                        "clientId": {
                                            "required": false,
                                            "type": "number",
                                            "description": "id of the client responsible for this resource"
                                        },
                                        "data": {
                                            "required": false,
                                            "type": "object",
                                            "description": "notification data"
                                        },
                                        "progress": {
                                            "required": false,
                                            "type": "number",
                                            "description": "id of the progress item"
                                        },
                                        "sourceId": {
                                            "required": false,
                                            "type": "number",
                                            "description": "id of the notification source"
                                        },
                                        "status": {
                                            "required": false,
                                            "type": "string",
                                            "description": "current status"
                                        },
                                        "subjectId": {
                                            "required": false,
                                            "type": "number",
                                            "description": "id of the subject (group/user)"
                                        },
                                        "subjectType": {
                                            "required": false,
                                            "type": "string",
                                            "description": "USER or GROUP"
                                        },
                                        "ttl": {
                                            "required": false,
                                            "type": "number",
                                            "description": "number of times it will be processed"
                                        },
                                        "typeId": {
                                            "required": false,
                                            "type": "number",
                                            "description": "id of the notificationType"
                                        }
                                    }
                                }
                            example: |
                                {
                                    "action": 5,
                                    "clientId": 1,
                                    "data": {},
                                    "progress": 1,
                                    "sourceId": 1,
                                    "status": 1,
                                    "subjectId": 1,
                                    "subjectType": 1,
                                    "ttl": 5,
                                    "typeId": 0,
                                }
                    responses: 
                        "200": 
                            description: "Success!"
                            body: 
                                "application/json": 
                                    schema: |
                                        {
                                            "$schema": "http://json-schema.org/draft-03/schema",
                                            "properties": {
                                            	"action": {
                                                    "required": false,
                                                    "type": "number",
                                                    "description": "action to be taken"
                                                },
                                                "clientId": {
                                                    "required": false,
                                                    "type": "number",
                                                    "description": "id of the client responsible for this resource"
                                                },
                                                "data": {
                                                    "required": false,
                                                    "type": "object",
                                                    "description": "notification data"
                                                },
                                                "progress": {
                                                    "required": false,
                                                    "type": "number",
                                                    "description": "id of the progress item"
                                                },
                                                "sourceId": {
                                                    "required": false,
                                                    "type": "number",
                                                    "description": "id of the notification source"
                                                },
                                                "status": {
                                                    "required": false,
                                                    "type": "string",
                                                    "description": "current status"
                                                },
                                                "subjectId": {
                                                    "required": false,
                                                    "type": "number",
                                                    "description": "id of the subject (group/user)"
                                                },
                                                "subjectType": {
                                                    "required": false,
                                                    "type": "string",
                                                    "description": "USER or GROUP"
                                                },
                                                "ttl": {
                                                    "required": false,
                                                    "type": "number",
                                                    "description": "number of times it will be processed"
                                                },
                                                "typeId": {
                                                    "required": false,
                                                    "type": "number",
                                                    "description": "id of the notificationType"
                                                }
                                            }
                                        }
                                    example: |
                                        {
                                            "action": 5,
                                            "clientId": 1,
                                            "data": {},
                                            "progress": 1,
                                            "sourceId": 1,
                                            "status": 1,
                                            "subjectId": 1,
                                            "subjectType": 1,
                                            "ttl": 5,
                                            "typeId": 0,
                                        }
                        "500": 
                        "404": 
                        "400": 
"/cache": 
    displayName: "Cache"
    "/counters": 
        displayName: "Counters"
        type: "common"
        get: 
            description: "Get a list of counters."
            queryParameters: 
                "offset": 
                    description: "Number of returned items."
                    type: number
                    required: false
                    repeat: false
                "limit": 
                    description: "Starting position."
                    type: number
                    required: false
                    repeat: false
                "fields": 
                    description: "The fields we want to show in our result."
                    type: string
                    required: false
                    repeat: false
                    example: "id,name,description"
                "order": 
                    description: "The fields we want to order by and the type of ordering."
                    type: string
                    required: false
                    repeat: false
                    example: "id:DESC"
            responses: 
                "200": 
                    description: "Success!"
                    body: 
                        "application/json": 
                            schema: |
                                {
                                   "$schema":"http://json-schema.org/draft-03/schema",
                                   "type":"object",
                                   "description":"A representation of a counter",
                                   "properties":{
                                      "name":{
                                         "required":true,
                                         "type":"string",
                                         "constraint":"must be unique, minimum 5, maximum 50 chars, alphanumeric characters and underscore",
                                         "description":"system name of counter, can be used in conditions on left side"
                                      },
                                      "description":{
                                         "required":false,
                                         "type":"string",
                                         "constraint":"minimum 5, maximum 50 chars, alphanumeric characters and underscore",
                                         "description":"system name of counter"
                                      },
                                      "value":{
                                         "required":false,
                                         "type":"number",
                                         "default":"0",
                                         "description":"global value of counter"
                                      },
                                      "requirement":{
                                         "required":false,
                                         "type":"string",
                                         "allowed":{
                                            "0":"ALL",
                                            "1":"ANY"
                                         },
                                         "default":"ANY",
                                         "description":"determines if counter requires all conditions or only one"
                                      },
                                      "conditions":{
                                         "required":false,
                                         "type":"array",
                                         "constraint":"elements must be numeric",
                                         "description":"list of conditions ids"
                                      },
                                      "eventSettable":{
                                         "required":false,
                                         "type":"boolean",
                                         "default":"false",
                                         "description":"determines if counter can be set by event"
                                      },
                                      "globalCounter":{
                                         "required":false,
                                         "type":"boolean",
                                         "default":"false",
                                         "description":"determines if counter is global, which means that will be counting all incrementations"
                                      },
                                      "transactionSource":{
                                         "required":true,
                                         "type":"number",
                                         "constraint":"must be numeric",
                                         "description":"id of transaction source"
                                      }
                                   }
                                }
                            example: |
                                [
                                    {
                                        "id": 1,
                                        "achievement": 3,
                                        "conditions": [
                                            1
                                        ],
                                        "description": "A simple counter",
                                        "eventSettable": false,
                                        "game": 4,
                                        "globalCounter": false,
                                        "name": "Test counter0",
                                        "requirement": "ALL",
                                        "transactionSource": 1,
                                        "value": 0,
                                        "updatedAt": 1390236382695,
                                        "createdAt": 1390236382695
                                    }
                                ]
                "500": 
                "404": 
                "400": 
            is: ["paginator", "fields", "ordering"]
        "/{counterId}": 
            displayName: "Counter"
            uriParameters: 
                "counterId": 
                    displayName: "counterId"
                    type: string
                    required: true
                    repeat: false
            get: 
                description: "Get one counter."
                queryParameters: 
                    "fields": 
                        description: "The fields we want to show in our result."
                        type: string
                        required: false
                        repeat: false
                        example: "id,name,description"
                responses: 
                    "200": 
                        body: 
                            "application/json": 
                                schema: |
                                    {
                                       "$schema":"http://json-schema.org/draft-03/schema",
                                       "type":"object",
                                       "description":"A representation of a counter",
                                       "properties":{
                                          "name":{
                                             "required":true,
                                             "type":"string",
                                             "constraint":"must be unique, minimum 5, maximum 50 chars, alphanumeric characters and underscore",
                                             "description":"system name of counter, can be used in conditions on left side"
                                          },
                                          "description":{
                                             "required":false,
                                             "type":"string",
                                             "constraint":"minimum 5, maximum 50 chars, alphanumeric characters and underscore",
                                             "description":"system name of counter"
                                          },
                                          "value":{
                                             "required":false,
                                             "type":"number",
                                             "default":"0",
                                             "description":"global value of counter"
                                          },
                                          "requirement":{
                                             "required":false,
                                             "type":"string",
                                             "allowed":{
                                                "0":"ALL",
                                                "1":"ANY"
                                             },
                                             "default":"ANY",
                                             "description":"determines if counter requires all conditions or only one"
                                          },
                                          "conditions":{
                                             "required":false,
                                             "type":"array",
                                             "constraint":"elements must be numeric",
                                             "description":"list of conditions ids"
                                          },
                                          "eventSettable":{
                                             "required":false,
                                             "type":"boolean",
                                             "default":"false",
                                             "description":"determines if counter can be set by event"
                                          },
                                          "globalCounter":{
                                             "required":false,
                                             "type":"boolean",
                                             "default":"false",
                                             "description":"determines if counter is global, which means that will be counting all incrementations"
                                          },
                                          "transactionSource":{
                                             "required":true,
                                             "type":"number",
                                             "constraint":"must be numeric",
                                             "description":"id of transaction source"
                                          }
                                       }
                                    }
                                example: |
                                    {
                                        "id": 1,
                                        "achievement": 3,
                                        "conditions": [
                                            1
                                        ],
                                        "description": "A simple counter",
                                        "eventSettable": false,
                                        "game": 4,
                                        "globalCounter": false,
                                        "name": "Test counter0",
                                        "requirement": "ALL",
                                        "transactionSource": 1,
                                        "value": 0,
                                        "updatedAt": 1390236382695,
                                        "createdAt": 1390236382695
                                    }
                is: ["fields"]
    "/events": 
        displayName: "Events"
        type: "common"
        get: 
            description: "Get done events collection."
            queryParameters: 
                "offset": 
                    description: "Number of returned items."
                    type: number
                    required: false
                    repeat: false
                "limit": 
                    description: "Starting position."
                    type: number
                    required: false
                    repeat: false
                "fields": 
                    description: "The fields we want to show in our result."
                    type: string
                    required: false
                    repeat: false
                    example: "id,name,description"
                "order": 
                    description: "The fields we want to order by and the type of ordering."
                    type: string
                    required: false
                    repeat: false
                    example: "id:DESC"
            responses: 
                "200": 
                    description: "Success!"
                    body: 
                        "application/json": 
                            schema: |
                                {
                                    "$schema": "http://json-schema.org/draft-03/schema",
                                    "properties": {
                                        "body": {
                                            "required": false,
                                            "type": "object",
                                            "description": "body of the event"
                                        },
                                        "status": {
                                            "required": false,
                                            "type": "string",
                                            "description": "current status"
                                        },
                                        "actionTime": {
                                            "required": false,
                                            "type": "number",
                                            "description": "time the action actually took place"
                                        },
                                        "sourceId": {
                                            "required": false,
                                            "type": "number",
                                            "description": "id of the source"
                                        },
                                        "type": {
                                            "required": false,
                                            "type": "string",
                                            "description": "type of this object"
                                        },
                                        "subjectType": {
                                            "required": false,
                                            "type": "string",
                                            "description": "type of the subject"
                                        },
                                        "subjectId": {
                                            "required": false,
                                            "type": "number",
                                            "description": "id of the subject"
                                        },
                                        "priority": {
                                            "required": false,
                                            "type": "string",
                                            "description": "priority of this object"
                                        },
                                        "clientId": {
                                            "required": false,
                                            "type": "number",
                                            "description": "id of the client"
                                        },
                                        "ttl": {
                                            "required": false,
                                            "type": "number",
                                            "description": ""
                                        },
                                        "updatedAt": {
                                            "required": false,
                                            "type": "number",
                                            "description": "time it was last updated"
                                        },
                                        "data": {
                                            "required": false,
                                            "type": "object",
                                            "description": "additional useful data"
                                        },
                                        "createdAt": {
                                            "required": false,
                                            "type": "number",
                                            "description": "time it was created"
                                        }
                                    }
                                }
                            example: |
                                [
                                    {
                                        "id": 1,
                                        "actionTime": 1390236383512,
                                        "body": {},
                                        "clientId": 1,
                                        "data": {},
                                        "errorTTL": -1,
                                        "internal": false,
                                        "internalTTL": -1,
                                        "progress": 1,
                                        "sourceId": 0,
                                        "status": 0,
                                        "subjectId": 0,
                                        "subjectType": 1,
                                        "type": 0,
                                        "updatedAt": 1390236382695,
                                        "createdAt": 1390236382695
                                    }
                                ]
                "500": 
                "404": 
                "400": 
            is: ["paginator", "fields", "ordering"]
        "/{eventId}": 
            displayName: "Event"
            uriParameters: 
                "eventId": 
                    displayName: "eventId"
                    type: string
                    required: true
                    repeat: false
            get: 
                description: "Get one done event."
                queryParameters: 
                    "fields": 
                        description: "The fields we want to show in our result."
                        type: string
                        required: false
                        repeat: false
                        example: "id,name,description"
                responses: 
                    "200": 
                        body: 
                            "application/json": 
                                schema: |
                                    {
                                        "$schema": "http://json-schema.org/draft-03/schema",
                                        "properties": {
                                            "body": {
                                                "required": false,
                                                "type": "object",
                                                "description": "body of the event"
                                            },
                                            "status": {
                                                "required": false,
                                                "type": "string",
                                                "description": "current status"
                                            },
                                            "actionTime": {
                                                "required": false,
                                                "type": "number",
                                                "description": "time the action actually took place"
                                            },
                                            "sourceId": {
                                                "required": false,
                                                "type": "number",
                                                "description": "id of the source"
                                            },
                                            "type": {
                                                "required": false,
                                                "type": "string",
                                                "description": "type of this object"
                                            },
                                            "subjectType": {
                                                "required": false,
                                                "type": "string",
                                                "description": "type of the subject"
                                            },
                                            "subjectId": {
                                                "required": false,
                                                "type": "number",
                                                "description": "id of the subject"
                                            },
                                            "priority": {
                                                "required": false,
                                                "type": "string",
                                                "description": "priority of this object"
                                            },
                                            "clientId": {
                                                "required": false,
                                                "type": "number",
                                                "description": "id of the client"
                                            },
                                            "ttl": {
                                                "required": false,
                                                "type": "number",
                                                "description": ""
                                            },
                                            "updatedAt": {
                                                "required": false,
                                                "type": "number",
                                                "description": "time it was last updated"
                                            },
                                            "data": {
                                                "required": false,
                                                "type": "object",
                                                "description": "additional useful data"
                                            },
                                            "createdAt": {
                                                "required": false,
                                                "type": "number",
                                                "description": "time it was created"
                                            }
                                        }
                                    }
                                example: |
                                    {
                                        "id": 1,
                                        "actionTime": 1390236383512,
                                        "body": {},
                                        "clientId": 1,
                                        "data": {},
                                        "errorTTL": -1,
                                        "internal": false,
                                        "internalTTL": -1,
                                        "progress": 1,
                                        "sourceId": 0,
                                        "status": 0,
                                        "subjectId": 0,
                                        "subjectType": 1,
                                        "type": 0,
                                        "updatedAt": 1390236382695,
                                        "createdAt": 1390236382695
                                    }
                is: ["fields"]
    "/segments": 
        displayName: "Segments"
        type: "common"
        get: 
            description: "Get segments list."
            queryParameters: 
                "offset": 
                    description: "Number of returned items."
                    type: number
                    required: false
                    repeat: false
                "limit": 
                    description: "Starting position."
                    type: number
                    required: false
                    repeat: false
                "fields": 
                    description: "The fields we want to show in our result."
                    type: string
                    required: false
                    repeat: false
                    example: "id,name,description"
                "order": 
                    description: "The fields we want to order by and the type of ordering."
                    type: string
                    required: false
                    repeat: false
                    example: "id:DESC"
            responses: 
                "200": 
                    description: "Success!"
                    body: 
                        "application/json": 
                            schema: |
                                {
                                   "$schema":"http://json-schema.org/draft-03/schema",
                                   "type":"object",
                                   "description":"A representation of a segment",
                                   "properties":{
                                      "name":{
                                         "required":true,
                                         "type":"string",
                                         "constraint":"must be unique, minimum 5, maximum 50 chars, alphanumeric characters and underscore",
                                         "description":"system name of segment"
                                      }
                                   }
                                }
                            example: |
                                [
                                    {
                                        "id": 1,
                                        "name": "segment0",
                                        "updatedAt": 1390236382695,
                                        "createdAt": 1390236382695
                                    }
                                ]
                "500": 
                "404": 
                "400": 
            is: ["paginator", "fields", "ordering"]
        "/{segmentId}": 
            displayName: "Segment"
            uriParameters: 
                "segmentId": 
                    displayName: "segmentId"
                    type: string
                    required: true
                    repeat: false
            type: "common"
            get: 
                description: "Get segment by id."
                queryParameters: 
                    "fields": 
                        description: "The fields we want to show in our result."
                        type: string
                        required: false
                        repeat: false
                        example: "id,name,description"
                responses: 
                    "200": 
                        description: "Success!"
                        body: 
                            "application/json": 
                                schema: |
                                    {
                                       "$schema":"http://json-schema.org/draft-03/schema",
                                       "type":"object",
                                       "description":"A representation of a segment",
                                       "properties":{
                                          "name":{
                                             "required":true,
                                             "type":"string",
                                             "constraint":"must be unique, minimum 5, maximum 50 chars, alphanumeric characters and underscore",
                                             "description":"system name of segment"
                                          }
                                       }
                                    }
                                example: |
                                    {
                                        "id": 1,
                                        "name": "segment0",
                                        "updatedAt": 1390236382695,
                                        "createdAt": 1390236382695
                                    }
                    "500": 
                    "404": 
                    "400": 
                is: ["fields"]
    "/users": 
        displayName: "Users"
        type: "common"
        get: 
            description: "Get users collection."
            queryParameters: 
                "offset": 
                    description: "Number of returned items."
                    type: number
                    required: false
                    repeat: false
                "limit": 
                    description: "Starting position."
                    type: number
                    required: false
                    repeat: false
                "groups": 
                    description: "The groups we want to narrow down our search to."
                    type: string
                    required: false
                    repeat: false
                    example: "1,2,4,5"
                "segments": 
                    description: "The segments we want to narrow down our search to."
                    type: string
                    required: false
                    repeat: false
                    example: "1,2,4,5"
                "fields": 
                    description: "The fields we want to show in our result."
                    type: string
                    required: false
                    repeat: false
                    example: "id,name,description"
                "order": 
                    description: "The fields we want to order by and the type of ordering."
                    type: string
                    required: false
                    repeat: false
                    example: "id:DESC"
            responses: 
                "200": 
                    description: "Success!"
                    body: 
                        "application/json": 
                            schema: |
                                {
                                   "$schema":"http://json-schema.org/draft-03/schema",
                                   "type":"object",
                                   "description":"A representation of a user",
                                   "properties":{
                                      "email":{
                                         "required":true,
                                         "type":"string",
                                         "constraint":"must be unique",
                                         "description":"email address"
                                      },
                                      "password":{
                                         "required":false,
                                         "type":"string"
                                      },
                                      "salt":{
                                         "required":false,
                                         "type":"string"
                                      },
                                      "firstName":{
                                         "required":false,
                                         "type":"string"
                                      },
                                      "lastName":{
                                         "required":false,
                                         "type":"string"
                                      },
                                      "gender":{
                                         "required":false,
                                         "type":"string",
                                         "allowed":{
                                            "0":"UNKNOWN",
                                            "1":"MALE",
                                            "2":"FEMALE"
                                         },
                                         "default":"UNKNOWN"
                                      },
                                      "birthDate":{
                                         "required":false,
                                         "type":"string"
                                      },
                                      "status":{
                                         "required":false,
                                         "type":"string",
                                         "allowed":{
                                            "0":"UNACTIVE",
                                            "1":"ACTIVE",
                                            "2":"RESIGNED",
                                            "3":"BANNED"
                                         },
                                         "default":"UNACTIVE"
                                      },
                                      "friends":{
                                         "required":false,
                                         "type":"array"
                                      },
                                      "usersGroups":{
                                         "required":false,
                                         "type":"array"
                                      },
                                      "segments":{
                                         "required":false,
                                         "type":"array"
                                      },
                                      "gainedAchievements":{
                                         "required":false,
                                         "type":"array"
                                      },
                                      "wonGames":{
                                         "required":false,
                                         "type":"array"
                                      },
                                      "counterValues":{
                                         "required":false,
                                         "type":"array"
                                      },
                                      "externalIds":{
                                         "required":false,
                                         "type":"array"
                                      },
                                      "customFields":{
                                         "required":false,
                                         "type":"object"
                                      }
                                   }
                                }
                            example: |
                                [
                                    {
                                        "id": 1,
                                        "birthDate": null,
                                        "counterValues": {},
                                        "email": "user0@test.com",
                                        "externalIds": {},
                                        "firstName": null,
                                        "friends": {},
                                        "gainedAchievements": [
                                            {
                                                "origin": 0,
                                                "status": 0,
                                                "amount": 1,
                                                "achievement": 0,
                                                "updatedAt": 1390236381898,
                                                "createdAt": 1390236381898
                                            },
                                            {
                                                "origin": 0,
                                                "status": 0,
                                                "amount": 1,
                                                "achievement": 2,
                                                "updatedAt": 1390236381898,
                                                "createdAt": 1390236381898
                                            },
                                            {
                                                "origin": 0,
                                                "status": 0,
                                                "amount": 1,
                                                "achievement": 1,
                                                "updatedAt": 1390236381898,
                                                "createdAt": 1390236381898
                                            }
                                        ],
                                        "gender": 0,
                                        "lastName": "user",
                                        "level": 1,
                                        "segments": [
                                            52,
                                            53,
                                            54
                                        ],
                                        "status": 0,
                                        "usersGroups": [
                                            52,
                                            53,
                                            54
                                        ],
                                        "wonGames": [
                                            1292
                                        ],
                                        "updatedAt": 1390236382695,
                                        "createdAt": 1390236382695
                                    }
                                ]
                "500": 
                "404": 
                "400": 
            is: ["paginator", "groups", "segments", "fields", "ordering"]
        "/{userId}": 
            displayName: "User"
            uriParameters: 
                "userId": 
                    displayName: "userId"
                    type: string
                    required: true
                    repeat: false
            type: "common"
            get: 
                description: "Get one user by id."
                queryParameters: 
                    "fields": 
                        description: "The fields we want to show in our result."
                        type: string
                        required: false
                        repeat: false
                        example: "id,name,description"
                responses: 
                    "200": 
                        description: "Success!"
                        body: 
                            "application/json": 
                                schema: |
                                    {
                                       "$schema":"http://json-schema.org/draft-03/schema",
                                       "type":"object",
                                       "description":"A representation of a user",
                                       "properties":{
                                          "email":{
                                             "required":true,
                                             "type":"string",
                                             "constraint":"must be unique",
                                             "description":"email address"
                                          },
                                          "password":{
                                             "required":false,
                                             "type":"string"
                                          },
                                          "salt":{
                                             "required":false,
                                             "type":"string"
                                          },
                                          "firstName":{
                                             "required":false,
                                             "type":"string"
                                          },
                                          "lastName":{
                                             "required":false,
                                             "type":"string"
                                          },
                                          "gender":{
                                             "required":false,
                                             "type":"string",
                                             "allowed":{
                                                "0":"UNKNOWN",
                                                "1":"MALE",
                                                "2":"FEMALE"
                                             },
                                             "default":"UNKNOWN"
                                          },
                                          "birthDate":{
                                             "required":false,
                                             "type":"string"
                                          },
                                          "status":{
                                             "required":false,
                                             "type":"string",
                                             "allowed":{
                                                "0":"UNACTIVE",
                                                "1":"ACTIVE",
                                                "2":"RESIGNED",
                                                "3":"BANNED"
                                             },
                                             "default":"UNACTIVE"
                                          },
                                          "friends":{
                                             "required":false,
                                             "type":"array"
                                          },
                                          "usersGroups":{
                                             "required":false,
                                             "type":"array"
                                          },
                                          "segments":{
                                             "required":false,
                                             "type":"array"
                                          },
                                          "gainedAchievements":{
                                             "required":false,
                                             "type":"array"
                                          },
                                          "wonGames":{
                                             "required":false,
                                             "type":"array"
                                          },
                                          "counterValues":{
                                             "required":false,
                                             "type":"array"
                                          },
                                          "externalIds":{
                                             "required":false,
                                             "type":"array"
                                          },
                                          "customFields":{
                                             "required":false,
                                             "type":"object"
                                          }
                                       }
                                    }
                                example: |
                                    {
                                        "id": 1,
                                        "birthDate": null,
                                        "counterValues": {},
                                        "email": "user0@test.com",
                                        "externalIds": {},
                                        "firstName": null,
                                        "friends": {},
                                        "gainedAchievements": [
                                            {
                                                "origin": 0,
                                                "status": 0,
                                                "amount": 1,
                                                "achievement": 0,
                                                "updatedAt": 1390236381898,
                                                "createdAt": 1390236381898
                                            },
                                            {
                                                "origin": 0,
                                                "status": 0,
                                                "amount": 1,
                                                "achievement": 2,
                                                "updatedAt": 1390236381898,
                                                "createdAt": 1390236381898
                                            },
                                            {
                                                "origin": 0,
                                                "status": 0,
                                                "amount": 1,
                                                "achievement": 1,
                                                "updatedAt": 1390236381898,
                                                "createdAt": 1390236381898
                                            }
                                        ],
                                        "gender": 0,
                                        "lastName": "user",
                                        "level": 1,
                                        "segments": [
                                            52,
                                            53,
                                            54
                                        ],
                                        "status": 0,
                                        "usersGroups": [
                                            52,
                                            53,
                                            54
                                        ],
                                        "wonGames": [
                                            1292
                                        ],
                                        "updatedAt": 1390236382695,
                                        "createdAt": 1390236382695
                                    }
                    "500": 
                    "404": 
                    "400": 
                is: ["fields"]
            "/history": 
                displayName: "UserHistory"
                type: "common"
                get: 
                    description: "Get one user's history."
                    queryParameters: 
                        "fields": 
                            description: "The fields we want to show in our result."
                            type: string
                            required: false
                            repeat: false
                            example: "id,name,description"
                        "order": 
                            description: "The fields we want to order by and the type of ordering."
                            type: string
                            required: false
                            repeat: false
                            example: "id:DESC"
                        "offset": 
                            description: "Number of returned items."
                            type: number
                            required: false
                            repeat: false
                        "limit": 
                            description: "Starting position."
                            type: number
                            required: false
                            repeat: false
                    responses: 
                        "200": 
                            description: "Success!"
                            body: 
                                "application/json": 
                                    schema: |
                                        {
                                            "$schema": "http://json-schema.org/draft-03/schema",
                                            "type": "object",
                                            "description": "A representation of an achievement",
                                            "properties": {
                                                "id": {
                                                    "required": false,
                                                    "type": "number",
                                                    "description": "object id"
                                                },
                                                "createdAt": {
                                                    "required": false,
                                                    "type": "number",
                                                    "description": "time it was created"
                                                },
                                                "updatedAt": {
                                                    "required": false,
                                                    "type": "number",
                                                    "description": "time it was last updated"
                                                }
                                            }
                                        }
                                    example: |
                                        [
                                            {
                                                "userId": 1,
                                                "type": "won game"
                                            },
                                            {
                                                "userId": 1,
                                                "type": "gained achievement"
                                            },
                                            {
                                                "userId": 1,
                                                "type": "won game"
                                            }
                                        ]
                        "500": 
                        "404": 
                        "400": 
                    is: ["fields", "ordering", "paginator"]
            "/friends": 
                displayName: "UserFriends"
                type: "common"
                get: 
                    description: "Get one user's friends."
                    queryParameters: 
                        "fields": 
                            description: "The fields we want to show in our result."
                            type: string
                            required: false
                            repeat: false
                            example: "id,name,description"
                        "groups": 
                            description: "The groups we want to narrow down our search to."
                            type: string
                            required: false
                            repeat: false
                            example: "1,2,4,5"
                        "segments": 
                            description: "The segments we want to narrow down our search to."
                            type: string
                            required: false
                            repeat: false
                            example: "1,2,4,5"
                        "order": 
                            description: "The fields we want to order by and the type of ordering."
                            type: string
                            required: false
                            repeat: false
                            example: "id:DESC"
                        "offset": 
                            description: "Number of returned items."
                            type: number
                            required: false
                            repeat: false
                        "limit": 
                            description: "Starting position."
                            type: number
                            required: false
                            repeat: false
                    responses: 
                        "200": 
                            description: "Success!"
                            body: 
                                "application/json": 
                                    schema: |
                                        {
                                           "$schema":"http://json-schema.org/draft-03/schema",
                                           "type":"object",
                                           "description":"A representation of a user",
                                           "properties":{
                                              "email":{
                                                 "required":true,
                                                 "type":"string",
                                                 "constraint":"must be unique",
                                                 "description":"email address"
                                              },
                                              "password":{
                                                 "required":false,
                                                 "type":"string"
                                              },
                                              "salt":{
                                                 "required":false,
                                                 "type":"string"
                                              },
                                              "firstName":{
                                                 "required":false,
                                                 "type":"string"
                                              },
                                              "lastName":{
                                                 "required":false,
                                                 "type":"string"
                                              },
                                              "gender":{
                                                 "required":false,
                                                 "type":"string",
                                                 "allowed":{
                                                    "0":"UNKNOWN",
                                                    "1":"MALE",
                                                    "2":"FEMALE"
                                                 },
                                                 "default":"UNKNOWN"
                                              },
                                              "birthDate":{
                                                 "required":false,
                                                 "type":"string"
                                              },
                                              "status":{
                                                 "required":false,
                                                 "type":"string",
                                                 "allowed":{
                                                    "0":"UNACTIVE",
                                                    "1":"ACTIVE",
                                                    "2":"RESIGNED",
                                                    "3":"BANNED"
                                                 },
                                                 "default":"UNACTIVE"
                                              },
                                              "friends":{
                                                 "required":false,
                                                 "type":"array"
                                              },
                                              "usersGroups":{
                                                 "required":false,
                                                 "type":"array"
                                              },
                                              "segments":{
                                                 "required":false,
                                                 "type":"array"
                                              },
                                              "gainedAchievements":{
                                                 "required":false,
                                                 "type":"array"
                                              },
                                              "wonGames":{
                                                 "required":false,
                                                 "type":"array"
                                              },
                                              "counterValues":{
                                                 "required":false,
                                                 "type":"array"
                                              },
                                              "externalIds":{
                                                 "required":false,
                                                 "type":"array"
                                              },
                                              "customFields":{
                                                 "required":false,
                                                 "type":"object"
                                              }
                                           }
                                        }
                                    example: |
                                        [
                                            {
                                                "id": 1,
                                                "birthDate": null,
                                                "counterValues": {},
                                                "email": "user0@test.com",
                                                "externalIds": {},
                                                "firstName": null,
                                                "friends": {},
                                                "gainedAchievements": [
                                                    {
                                                        "origin": 0,
                                                        "status": 0,
                                                        "amount": 1,
                                                        "achievement": 0,
                                                        "updatedAt": 1390236381898,
                                                        "createdAt": 1390236381898
                                                    },
                                                    {
                                                        "origin": 0,
                                                        "status": 0,
                                                        "amount": 1,
                                                        "achievement": 2,
                                                        "updatedAt": 1390236381898,
                                                        "createdAt": 1390236381898
                                                    },
                                                    {
                                                        "origin": 0,
                                                        "status": 0,
                                                        "amount": 1,
                                                        "achievement": 1,
                                                        "updatedAt": 1390236381898,
                                                        "createdAt": 1390236381898
                                                    }
                                                ],
                                                "gender": 0,
                                                "lastName": "user",
                                                "level": 1,
                                                "segments": [
                                                    52,
                                                    53,
                                                    54
                                                ],
                                                "status": 0,
                                                "usersGroups": [
                                                    52,
                                                    53,
                                                    54
                                                ],
                                                "wonGames": [
                                                    1292
                                                ],
                                                "updatedAt": 1390236382695,
                                                "createdAt": 1390236382695
                                            }
                                        ]
                        "500": 
                        "404": 
                        "400": 
                    is: ["fields", "groups", "segments", "ordering", "paginator"]
            "/segments": 
                displayName: "UserSegments"
                type: "common"
                get: 
                    description: "Get one user's segments."
                    queryParameters: 
                        "fields": 
                            description: "The fields we want to show in our result."
                            type: string
                            required: false
                            repeat: false
                            example: "id,name,description"
                        "order": 
                            description: "The fields we want to order by and the type of ordering."
                            type: string
                            required: false
                            repeat: false
                            example: "id:DESC"
                        "offset": 
                            description: "Number of returned items."
                            type: number
                            required: false
                            repeat: false
                        "limit": 
                            description: "Starting position."
                            type: number
                            required: false
                            repeat: false
                    responses: 
                        "200": 
                            description: "Success!"
                            body: 
                                "application/json": 
                                    schema: |
                                        {
                                           "$schema":"http://json-schema.org/draft-03/schema",
                                           "type":"object",
                                           "description":"A representation of a segment",
                                           "properties":{
                                              "name":{
                                                 "required":true,
                                                 "type":"string",
                                                 "constraint":"must be unique, minimum 5, maximum 50 chars, alphanumeric characters and underscore",
                                                 "description":"system name of segment"
                                              }
                                           }
                                        }
                                    example: |
                                        [
                                            {
                                                "id": 1,
                                                "name": "segment0",
                                                "updatedAt": 1390236382695,
                                                "createdAt": 1390236382695
                                            }
                                        ]
                        "500": 
                        "404": 
                        "400": 
                    is: ["fields", "ordering", "paginator"]
            "/groups": 
                displayName: "UserGroups"
                type: "common"
                get: 
                    description: "Get the groups the a particular user belongs to."
                    queryParameters: 
                        "fields": 
                            description: "The fields we want to show in our result."
                            type: string
                            required: false
                            repeat: false
                            example: "id,name,description"
                        "order": 
                            description: "The fields we want to order by and the type of ordering."
                            type: string
                            required: false
                            repeat: false
                            example: "id:DESC"
                        "offset": 
                            description: "Number of returned items."
                            type: number
                            required: false
                            repeat: false
                        "limit": 
                            description: "Starting position."
                            type: number
                            required: false
                            repeat: false
                    responses: 
                        "200": 
                            description: "Success!"
                            body: 
                                "application/json": 
                                    schema: |
                                        {
                                           "$schema":"http://json-schema.org/draft-03/schema",
                                           "type":"object",
                                           "description":"A representation of a user group",
                                           "properties":{
                                              "name":{
                                                 "required":true,
                                                 "type":"string",
                                                 "constraint":"unique"
                                              },
                                              "users":{
                                                 "required":false,
                                                 "type":"array"
                                              },
                                              "segments":{
                                                 "required":false,
                                                 "type":"array"
                                              },
                                              "gainedAchievements":{
                                                 "required":false,
                                                 "type":"array"
                                              },
                                              "wonGames":{
                                                 "required":false,
                                                 "type":"array"
                                              },
                                              "counterValues":{
                                                 "required":false,
                                                 "type":"array"
                                              },
                                              "externalIds":{
                                                 "required":false,
                                                 "type":"array"
                                              },
                                              "customFields":{
                                                 "required":false,
                                                 "type":"object"
                                              }
                                           }
                                        }
                                    example: |
                                        [
                                            {
                                                "id": 1,
                                                "counterValues": [],
                                                "externalIds": [],
                                                "gainedAchievements": [],
                                                "level": 1,
                                                "name": "Testers 0",
                                                "segments": [
                                                    23,
                                                    44
                                                ],
                                                "users": [],
                                                "wonGames": [],
                                                "updatedAt": 1390236382695,
                                                "createdAt": 1390236382695
                                            }
                                        ]
                        "500": 
                        "404": 
                        "400": 
                    is: ["fields", "ordering", "paginator"]
            "/achievements": 
                displayName: "UserAchievements"
                type: "common"
                get: 
                    description: "Get one user's achievements."
                    queryParameters: 
                        "fields": 
                            description: "The fields we want to show in our result."
                            type: string
                            required: false
                            repeat: false
                            example: "id,name,description"
                        "order": 
                            description: "The fields we want to order by and the type of ordering."
                            type: string
                            required: false
                            repeat: false
                            example: "id:DESC"
                        "offset": 
                            description: "Number of returned items."
                            type: number
                            required: false
                            repeat: false
                        "limit": 
                            description: "Starting position."
                            type: number
                            required: false
                            repeat: false
                        "segments": 
                            description: "The segments we want to narrow down our search to."
                            type: string
                            required: false
                            repeat: false
                            example: "1,2,4,5"
                    responses: 
                        "200": 
                            description: "Success!"
                            body: 
                                "application/json": 
                                    schema: |
                                        {
                                           "$schema":"http://json-schema.org/draft-03/schema",
                                           "type":"object",
                                           "description":"A representation of a segment",
                                           "properties":{
                                              "name":{
                                                 "required":true,
                                                 "type":"string",
                                                 "constraint":"minimum 5, maximum 50 chars, alphanumeric characters and underscore",
                                                 "description":"system name of achievement"
                                              },
                                              "label":{
                                                 "required":true,
                                                 "type":"string",
                                                 "constraint":"minimum 5, maximum 100 chars",
                                                 "description":"label of achievement"
                                              },
                                              "description":{
                                                 "required":false,
                                                 "type":"string",
                                                 "constraint":"minimum 5, maximum 500 chars",
                                                 "description":"description of achievement"
                                              },
                                              "level":{
                                                 "required":false,
                                                 "type":"number",
                                                 "constraint":"must be numeric",
                                                 "default":"1",
                                                 "description":"level of achievement"
                                              },
                                              "rank":{
                                                 "required":false,
                                                 "type":"number",
                                                 "constraint":"must be numeric",
                                                 "default":"0",
                                                 "description":"rank of achievement"
                                              },
                                              "data":{
                                                 "required":false,
                                                 "type":"object",
                                                 "constraint":"must be numeric",
                                                 "description":"level of achievement"
                                              },
                                              "achievementType":{
                                                 "required":false,
                                                 "type":"string",
                                                 "allowed":{
                                                    "0":"NORMAL",
                                                    "1":"PROGRESSIVE"
                                                 },
                                                 "default":"NORMAL",
                                                 "description":"type of achievement"
                                              },
                                              "achievementGroup":{
                                                 "required":false,
                                                 "type":"number",
                                                 "constraint":"must be numeric",
                                                 "description":"id of achievement group"
                                              },
                                              "progress":{
                                                 "required":false,
                                                 "type":"number",
                                                 "constraint":"must be numeric",
                                                 "description":"id of achievement progress, required if type is PROGRESSIVE"
                                              },
                                              "segments":{
                                                 "required":false,
                                                 "type":"array",
                                                 "constraint":"elements must be numeric",
                                                 "description":"list of segment ids"
                                              }
                                           }
                                        }
                                    example: |
                                        [
                                            {
                                                "id": 1,
                                                "achievementGroup": null,
                                                "achievementType": "NORMAL",
                                                "counter": null,
                                                "data": null,
                                                "description": "description",
                                                "rank": 0,
                                                "label": "test achievement 0",
                                                "level": 1,
                                                "name": "achievement 0",
                                                "progress": null,
                                                "segments": [
                                                    54,
                                                    52,
                                                    53
                                                ],
                                                "updatedAt": 1390236382695,
                                                "createdAt": 1390236382695
                                            }
                                        ]
                        "500": 
                        "404": 
                        "400": 
                    is: ["fields", "ordering", "paginator", "segments"]
        "/segments": 
            displayName: "UsersSegments"
            type: "common"
            get: 
                description: "Get users' segment list."
                queryParameters: 
                    "fields": 
                        description: "The fields we want to show in our result."
                        type: string
                        required: false
                        repeat: false
                        example: "id,name,description"
                    "order": 
                        description: "The fields we want to order by and the type of ordering."
                        type: string
                        required: false
                        repeat: false
                        example: "id:DESC"
                    "offset": 
                        description: "Number of returned items."
                        type: number
                        required: false
                        repeat: false
                    "limit": 
                        description: "Starting position."
                        type: number
                        required: false
                        repeat: false
                responses: 
                    "200": 
                        description: "Success!"
                        body: 
                            "application/json": 
                                schema: |
                                    {
                                       "$schema":"http://json-schema.org/draft-03/schema",
                                       "type":"object",
                                       "description":"A representation of a segment",
                                       "properties":{
                                          "name":{
                                             "required":true,
                                             "type":"string",
                                             "constraint":"must be unique, minimum 5, maximum 50 chars, alphanumeric characters and underscore",
                                             "description":"system name of segment"
                                          }
                                       }
                                    }
                                example: |
                                    [
                                        {
                                            "id": 1,
                                            "name": "segment0",
                                            "updatedAt": 1390236382695,
                                            "createdAt": 1390236382695
                                        }
                                    ]
                    "500": 
                    "404": 
                    "400": 
                is: ["fields", "ordering", "paginator"]
        "/groups": 
            displayName: "Groups"
            type: "common"
            get: 
                description: "Get groups collection."
                queryParameters: 
                    "offset": 
                        description: "Number of returned items."
                        type: number
                        required: false
                        repeat: false
                    "limit": 
                        description: "Starting position."
                        type: number
                        required: false
                        repeat: false
                    "fields": 
                        description: "The fields we want to show in our result."
                        type: string
                        required: false
                        repeat: false
                        example: "id,name,description"
                    "order": 
                        description: "The fields we want to order by and the type of ordering."
                        type: string
                        required: false
                        repeat: false
                        example: "id:DESC"
                responses: 
                    "200": 
                        description: "Success!"
                        body: 
                            "application/json": 
                                schema: |
                                    {
                                       "$schema":"http://json-schema.org/draft-03/schema",
                                       "type":"object",
                                       "description":"A representation of a user group",
                                       "properties":{
                                          "name":{
                                             "required":true,
                                             "type":"string",
                                             "constraint":"unique"
                                          },
                                          "users":{
                                             "required":false,
                                             "type":"array"
                                          },
                                          "segments":{
                                             "required":false,
                                             "type":"array"
                                          },
                                          "gainedAchievements":{
                                             "required":false,
                                             "type":"array"
                                          },
                                          "wonGames":{
                                             "required":false,
                                             "type":"array"
                                          },
                                          "counterValues":{
                                             "required":false,
                                             "type":"array"
                                          },
                                          "externalIds":{
                                             "required":false,
                                             "type":"array"
                                          },
                                          "customFields":{
                                             "required":false,
                                             "type":"object"
                                          }
                                       }
                                    }
                                example: |
                                    [
                                        {
                                            "id": 1,
                                            "counterValues": [],
                                            "externalIds": [],
                                            "gainedAchievements": [],
                                            "level": 1,
                                            "name": "Testers 0",
                                            "segments": [
                                                23,
                                                44
                                            ],
                                            "users": [],
                                            "wonGames": [],
                                            "updatedAt": 1390236382695,
                                            "createdAt": 1390236382695
                                        }
                                    ]
                    "500": 
                    "404": 
                    "400": 
                is: ["paginator", "fields", "ordering"]
            "/{groupId}": 
                displayName: "Group"
                uriParameters: 
                    "groupId": 
                        displayName: "groupId"
                        type: string
                        required: true
                        repeat: false
                type: "common"
                get: 
                    description: "Get one group."
                    queryParameters: 
                        "fields": 
                            description: "The fields we want to show in our result."
                            type: string
                            required: false
                            repeat: false
                            example: "id,name,description"
                    responses: 
                        "200": 
                            description: "Success!"
                            body: 
                                "application/json": 
                                    schema: |
                                        {
                                           "$schema":"http://json-schema.org/draft-03/schema",
                                           "type":"object",
                                           "description":"A representation of a user group",
                                           "properties":{
                                              "name":{
                                                 "required":true,
                                                 "type":"string",
                                                 "constraint":"unique"
                                              },
                                              "users":{
                                                 "required":false,
                                                 "type":"array"
                                              },
                                              "segments":{
                                                 "required":false,
                                                 "type":"array"
                                              },
                                              "gainedAchievements":{
                                                 "required":false,
                                                 "type":"array"
                                              },
                                              "wonGames":{
                                                 "required":false,
                                                 "type":"array"
                                              },
                                              "counterValues":{
                                                 "required":false,
                                                 "type":"array"
                                              },
                                              "externalIds":{
                                                 "required":false,
                                                 "type":"array"
                                              },
                                              "customFields":{
                                                 "required":false,
                                                 "type":"object"
                                              }
                                           }
                                        }
                                    example: |
                                        {
                                            "id": 1,
                                            "counterValues": [],
                                            "externalIds": [],
                                            "gainedAchievements": [],
                                            "level": 1,
                                            "name": "Testers 0",
                                            "segments": [
                                                23,
                                                44
                                            ],
                                            "users": [],
                                            "wonGames": [],
                                            "updatedAt": 1390236382695,
                                            "createdAt": 1390236382695
                                        }
                        "500": 
                        "404": 
                        "400": 
                    is: ["fields"]
    "/statistics": 
        displayName: "Statistics"
        type: "common"
        get: 
            description: "Get all the current statistics."
            queryParameters: 
                "offset": 
                    description: "Number of returned items."
                    type: number
                    required: false
                    repeat: false
                "limit": 
                    description: "Starting position."
                    type: number
                    required: false
                    repeat: false
                "fields": 
                    description: "The fields we want to show in our result."
                    type: string
                    required: false
                    repeat: false
                    example: "id,name,description"
                "order": 
                    description: "The fields we want to order by and the type of ordering."
                    type: string
                    required: false
                    repeat: false
                    example: "id:DESC"
            responses: 
                "200": 
                    description: "Success!"
                    body: 
                        "application/json": 
                            schema: "Still experimental, not yet available."
                            example: "Still experimental, not yet available."
                "500": 
                "404": 
                "400": 
            is: ["paginator", "fields", "ordering"]
    "/achievements": 
        displayName: "Achievements"
        type: "common"
        get: 
            description: "Get achievements collection."
            queryParameters: 
                "offset": 
                    description: "Number of returned items."
                    type: number
                    required: false
                    repeat: false
                "limit": 
                    description: "Starting position."
                    type: number
                    required: false
                    repeat: false
                "fields": 
                    description: "The fields we want to show in our result."
                    type: string
                    required: false
                    repeat: false
                    example: "id,name,description"
                "order": 
                    description: "The fields we want to order by and the type of ordering."
                    type: string
                    required: false
                    repeat: false
                    example: "id:DESC"
                "segments": 
                    description: "The segments we want to narrow down our search to."
                    type: string
                    required: false
                    repeat: false
                    example: "1,2,4,5"
            responses: 
                "200": 
                    description: "Success!"
                    body: 
                        "application/json": 
                            schema: |
                                {
                                   "$schema":"http://json-schema.org/draft-03/schema",
                                   "type":"object",
                                   "description":"A representation of a segment",
                                   "properties":{
                                      "name":{
                                         "required":true,
                                         "type":"string",
                                         "constraint":"minimum 5, maximum 50 chars, alphanumeric characters and underscore",
                                         "description":"system name of achievement"
                                      },
                                      "label":{
                                         "required":true,
                                         "type":"string",
                                         "constraint":"minimum 5, maximum 100 chars",
                                         "description":"label of achievement"
                                      },
                                      "description":{
                                         "required":false,
                                         "type":"string",
                                         "constraint":"minimum 5, maximum 500 chars",
                                         "description":"description of achievement"
                                      },
                                      "level":{
                                         "required":false,
                                         "type":"number",
                                         "constraint":"must be numeric",
                                         "default":"1",
                                         "description":"level of achievement"
                                      },
                                      "rank":{
                                         "required":false,
                                         "type":"number",
                                         "constraint":"must be numeric",
                                         "default":"0",
                                         "description":"rank of achievement"
                                      },
                                      "data":{
                                         "required":false,
                                         "type":"object",
                                         "constraint":"must be numeric",
                                         "description":"level of achievement"
                                      },
                                      "achievementType":{
                                         "required":false,
                                         "type":"string",
                                         "allowed":{
                                            "0":"NORMAL",
                                            "1":"PROGRESSIVE"
                                         },
                                         "default":"NORMAL",
                                         "description":"type of achievement"
                                      },
                                      "achievementGroup":{
                                         "required":false,
                                         "type":"number",
                                         "constraint":"must be numeric",
                                         "description":"id of achievement group"
                                      },
                                      "progress":{
                                         "required":false,
                                         "type":"number",
                                         "constraint":"must be numeric",
                                         "description":"id of achievement progress, required if type is PROGRESSIVE"
                                      },
                                      "segments":{
                                         "required":false,
                                         "type":"array",
                                         "constraint":"elements must be numeric",
                                         "description":"list of segment ids"
                                      }
                                   }
                                }
                            example: |
                                [
                                    {
                                        "id": 1,
                                        "achievementGroup": null,
                                        "achievementType": "NORMAL",
                                        "counter": null,
                                        "data": null,
                                        "description": "description",
                                        "rank": 0,
                                        "label": "test achievement 0",
                                        "level": 1,
                                        "name": "achievement 0",
                                        "progress": null,
                                        "segments": [
                                            54,
                                            52,
                                            53
                                        ],
                                        "updatedAt": 1390236382695,
                                        "createdAt": 1390236382695
                                    }
                                ]
                "500": 
                "404": 
                "400": 
            is: ["paginator", "fields", "ordering", "segments"]
        "/{achievementId}": 
            displayName: "Achievement"
            uriParameters: 
                "achievementId": 
                    displayName: "achievementId"
                    type: string
                    required: true
                    repeat: false
            type: "common"
            get: 
                description: "Get one achievement."
                queryParameters: 
                    "fields": 
                        description: "The fields we want to show in our result."
                        type: string
                        required: false
                        repeat: false
                        example: "id,name,description"
                responses: 
                    "200": 
                        description: "Success!"
                        body: 
                            "application/json": 
                                schema: |
                                    {
                                       "$schema":"http://json-schema.org/draft-03/schema",
                                       "type":"object",
                                       "description":"A representation of a segment",
                                       "properties":{
                                          "name":{
                                             "required":true,
                                             "type":"string",
                                             "constraint":"minimum 5, maximum 50 chars, alphanumeric characters and underscore",
                                             "description":"system name of achievement"
                                          },
                                          "label":{
                                             "required":true,
                                             "type":"string",
                                             "constraint":"minimum 5, maximum 100 chars",
                                             "description":"label of achievement"
                                          },
                                          "description":{
                                             "required":false,
                                             "type":"string",
                                             "constraint":"minimum 5, maximum 500 chars",
                                             "description":"description of achievement"
                                          },
                                          "level":{
                                             "required":false,
                                             "type":"number",
                                             "constraint":"must be numeric",
                                             "default":"1",
                                             "description":"level of achievement"
                                          },
                                          "rank":{
                                             "required":false,
                                             "type":"number",
                                             "constraint":"must be numeric",
                                             "default":"0",
                                             "description":"rank of achievement"
                                          },
                                          "data":{
                                             "required":false,
                                             "type":"object",
                                             "constraint":"must be numeric",
                                             "description":"level of achievement"
                                          },
                                          "achievementType":{
                                             "required":false,
                                             "type":"string",
                                             "allowed":{
                                                "0":"NORMAL",
                                                "1":"PROGRESSIVE"
                                             },
                                             "default":"NORMAL",
                                             "description":"type of achievement"
                                          },
                                          "achievementGroup":{
                                             "required":false,
                                             "type":"number",
                                             "constraint":"must be numeric",
                                             "description":"id of achievement group"
                                          },
                                          "progress":{
                                             "required":false,
                                             "type":"number",
                                             "constraint":"must be numeric",
                                             "description":"id of achievement progress, required if type is PROGRESSIVE"
                                          },
                                          "segments":{
                                             "required":false,
                                             "type":"array",
                                             "constraint":"elements must be numeric",
                                             "description":"list of segment ids"
                                          }
                                       }
                                    }
                                example: |
                                    {
                                        "id": 1,
                                        "achievementGroup": null,
                                        "achievementType": "NORMAL",
                                        "counter": null,
                                        "data": null,
                                        "description": "description",
                                        "rank": 0,
                                        "label": "test achievement 0",
                                        "level": 1,
                                        "name": "achievement 0",
                                        "progress": null,
                                        "segments": [
                                            54,
                                            52,
                                            53
                                        ],
                                        "updatedAt": 1390236382695,
                                        "createdAt": 1390236382695
                                    }
                    "500": 
                    "404": 
                    "400": 
                is: ["fields"]
            "/segments": 
                displayName: "AchievementSegments"
                type: "common"
                get: 
                    description: "Get one achievement's segments."
                    queryParameters: 
                        "offset": 
                            description: "Number of returned items."
                            type: number
                            required: false
                            repeat: false
                        "limit": 
                            description: "Starting position."
                            type: number
                            required: false
                            repeat: false
                        "fields": 
                            description: "The fields we want to show in our result."
                            type: string
                            required: false
                            repeat: false
                            example: "id,name,description"
                        "order": 
                            description: "The fields we want to order by and the type of ordering."
                            type: string
                            required: false
                            repeat: false
                            example: "id:DESC"
                    responses: 
                        "200": 
                            description: "Success!"
                            body: 
                                "application/json": 
                                    schema: |
                                        {
                                           "$schema":"http://json-schema.org/draft-03/schema",
                                           "type":"object",
                                           "description":"A representation of a segment",
                                           "properties":{
                                              "name":{
                                                 "required":true,
                                                 "type":"string",
                                                 "constraint":"must be unique, minimum 5, maximum 50 chars, alphanumeric characters and underscore",
                                                 "description":"system name of segment"
                                              }
                                           }
                                        }
                                    example: |
                                        [
                                            {
                                                "id": 1,
                                                "name": "segment0",
                                                "updatedAt": 1390236382695,
                                                "createdAt": 1390236382695
                                            }
                                        ]
                        "500": 
                        "404": 
                        "400": 
                    is: ["paginator", "fields", "ordering"]
        "/categories": 
            displayName: "AchievementsCategories"
            type: "common"
            get: 
                description: "Get list of achievement categories."
                queryParameters: 
                    "fields": 
                        description: "The fields we want to show in our result."
                        type: string
                        required: false
                        repeat: false
                        example: "id,name,description"
                    "order": 
                        description: "The fields we want to order by and the type of ordering."
                        type: string
                        required: false
                        repeat: false
                        example: "id:DESC"
                    "offset": 
                        description: "Number of returned items."
                        type: number
                        required: false
                        repeat: false
                    "limit": 
                        description: "Starting position."
                        type: number
                        required: false
                        repeat: false
                responses: 
                    "200": 
                        description: "Success!"
                        body: 
                            "application/json": 
                                schema: |
                                    {
                                       "$schema":"http://json-schema.org/draft-03/schema",
                                       "type":"object",
                                       "description":"A representation of a category",
                                       "properties":{
                                          "name":{
                                             "required":true,
                                             "type":"string",
                                             "constraint":"minimum 5, maximum 50 chars",
                                             "description":"name of category"
                                          }
                                       }
                                    }
                                example: |
                                    [
                                        {
                                            "id": 1,
                                            "members": [
                                                3,
                                                8,
                                                9
                                            ],
                                            "name": "Test counter",
                                            "updatedAt": 1390236382695,
                                            "createdAt": 1390236382695
                                        }
                                    ]
                    "500": 
                    "404": 
                    "400": 
                is: ["fields", "ordering", "paginator"]
            "/{categoryId}": 
                displayName: "AchievementsCategory"
                uriParameters: 
                    "categoryId": 
                        displayName: "categoryId"
                        type: string
                        required: true
                        repeat: false
                type: "common"
                get: 
                    description: "Get one category."
                    responses: 
                        "200": 
                            description: "Success!"
                            body: 
                                "application/json": 
                                    schema: |
                                        {
                                           "$schema":"http://json-schema.org/draft-03/schema",
                                           "type":"object",
                                           "description":"A representation of a category",
                                           "properties":{
                                              "name":{
                                                 "required":true,
                                                 "type":"string",
                                                 "constraint":"minimum 5, maximum 50 chars",
                                                 "description":"name of category"
                                              }
                                           }
                                        }
                                    example: |
                                        {
                                            "id": 1,
                                            "members": [
                                                3,
                                                8,
                                                9
                                            ],
                                            "name": "Test counter",
                                            "updatedAt": 1390236382695,
                                            "createdAt": 1390236382695
                                        }
                        "500": 
                        "404": 
                        "400": 
        "/segments": 
            displayName: "AchievementSegments"
            type: "common"
            get: 
                description: "Get segments."
                queryParameters: 
                    "offset": 
                        description: "Number of returned items."
                        type: number
                        required: false
                        repeat: false
                    "limit": 
                        description: "Starting position."
                        type: number
                        required: false
                        repeat: false
                    "fields": 
                        description: "The fields we want to show in our result."
                        type: string
                        required: false
                        repeat: false
                        example: "id,name,description"
                    "order": 
                        description: "The fields we want to order by and the type of ordering."
                        type: string
                        required: false
                        repeat: false
                        example: "id:DESC"
                responses: 
                    "200": 
                        description: "Success!"
                        body: 
                            "application/json": 
                                schema: |
                                    {
                                       "$schema":"http://json-schema.org/draft-03/schema",
                                       "type":"object",
                                       "description":"A representation of a segment",
                                       "properties":{
                                          "name":{
                                             "required":true,
                                             "type":"string",
                                             "constraint":"must be unique, minimum 5, maximum 50 chars, alphanumeric characters and underscore",
                                             "description":"system name of segment"
                                          }
                                       }
                                    }
                                example: |
                                    [
                                        {
                                            "id": 1,
                                            "name": "segment0",
                                            "updatedAt": 1390236382695,
                                            "createdAt": 1390236382695
                                        }
                                    ]
                    "500": 
                    "404": 
                    "400": 
                is: ["paginator", "fields", "ordering"]
    "/games": 
        displayName: "Games"
        type: "common"
        get: 
            description: "Get a list of games."
            queryParameters: 
                "offset": 
                    description: "Number of returned items."
                    type: number
                    required: false
                    repeat: false
                "limit": 
                    description: "Starting position."
                    type: number
                    required: false
                    repeat: false
                "fields": 
                    description: "The fields we want to show in our result."
                    type: string
                    required: false
                    repeat: false
                    example: "id,name,description"
                "order": 
                    description: "The fields we want to order by and the type of ordering."
                    type: string
                    required: false
                    repeat: false
                    example: "id:DESC"
                "segments": 
                    description: "The segments we want to narrow down our search to."
                    type: string
                    required: false
                    repeat: false
                    example: "1,2,4,5"
            responses: 
                "200": 
                    description: "Success!"
                    body: 
                        "application/json": 
                            schema: |
                                {
                                   "$schema":"http://json-schema.org/draft-03/schema",
                                   "type":"object",
                                   "description":"A representation of a game",
                                   "properties":{
                                      "active":{
                                         "required":false,
                                         "type":"boolean",
                                         "default":"false",
                                         "description":"whether the game is active"
                                      },
                                      "name":{
                                         "required":true,
                                         "type":"string",
                                         "constraint":"minimum 5, maximum 50 chars, alphanumeric characters and underscore",
                                         "description":"system name of game"
                                      },
                                      "description":{
                                         "required":false,
                                         "type":"string",
                                         "constraint":"minimum 5, maximum 500 chars",
                                         "description":"description of game"
                                      },
                                      "expression":{
                                         "required":true,
                                         "type":"string",
                                         "constraint":"minimum 3, maximum 200 chars",
                                         "description":"logical expression (ex: {1} OR {2}), please look into documentation"
                                      },
                                      "priority":{
                                         "required":false,
                                         "type":"number",
                                         "constraint":"must be numeric",
                                         "default":"1",
                                         "description":"priority of game (if more than one game has been won)"
                                      },
                                      "gameType":{
                                         "required":false,
                                         "type":"string",
                                         "allowed":{
                                            "0":"ONE_TIME",
                                            "1":"GRADUAL"
                                         },
                                         "default":"ONE_TIME",
                                         "description":"type of game"
                                      },
                                      "notifications":{
                                         "required":false,
                                         "type":"array",
                                         "constraint":"elements must be numeric",
                                         "description":"list of notification ids"
                                      },
                                      "conditions":{
                                         "required":false,
                                         "type":"array",
                                         "constraint":"elements must be numeric",
                                         "description":"list of condition ids"
                                      },
                                      "transactionSource":{
                                         "required":true,
                                         "type":"number",
                                         "constraint":"must be numeric",
                                         "description":"id of transaction source"
                                      },
                                      "segments":{
                                         "required":false,
                                         "type":"array",
                                         "constraint":"elements must be numeric",
                                         "description":"list of segments ids"
                                      }
                                   }
                                }
                            example: |
                                [
                                    {
                                        "id": 1,
                                        "active": true,
                                        "conditions": {},
                                        "description": "game game0",
                                        "expression": null,
                                        "gameType": "ONE_TIME",
                                        "name": "game0",
                                        "notifications": [],
                                        "priority": 1,
                                        "segments": [
                                            51,
                                            52,
                                            50
                                        ],
                                        "transactionSource": null,
                                        "updatedAt": 1390236382695,
                                        "createdAt": 1390236382695
                                    }
                                ]
                "500": 
                "404": 
                "400": 
            is: ["paginator", "fields", "ordering", "segments"]
        "/{gameId}": 
            displayName: "Game"
            uriParameters: 
                "gameId": 
                    displayName: "gameId"
                    type: string
                    required: true
                    repeat: false
            type: "common"
            get: 
                description: "Get one game."
                queryParameters: 
                    "fields": 
                        description: "The fields we want to show in our result."
                        type: string
                        required: false
                        repeat: false
                        example: "id,name,description"
                responses: 
                    "200": 
                        description: "Success!"
                        body: 
                            "application/json": 
                                schema: |
                                    {
                                       "$schema":"http://json-schema.org/draft-03/schema",
                                       "type":"object",
                                       "description":"A representation of a game",
                                       "properties":{
                                          "active":{
                                             "required":false,
                                             "type":"boolean",
                                             "default":"false",
                                             "description":"whether the game is active"
                                          },
                                          "name":{
                                             "required":true,
                                             "type":"string",
                                             "constraint":"minimum 5, maximum 50 chars, alphanumeric characters and underscore",
                                             "description":"system name of game"
                                          },
                                          "description":{
                                             "required":false,
                                             "type":"string",
                                             "constraint":"minimum 5, maximum 500 chars",
                                             "description":"description of game"
                                          },
                                          "expression":{
                                             "required":true,
                                             "type":"string",
                                             "constraint":"minimum 3, maximum 200 chars",
                                             "description":"logical expression (ex: {1} OR {2}), please look into documentation"
                                          },
                                          "priority":{
                                             "required":false,
                                             "type":"number",
                                             "constraint":"must be numeric",
                                             "default":"1",
                                             "description":"priority of game (if more than one game has been won)"
                                          },
                                          "gameType":{
                                             "required":false,
                                             "type":"string",
                                             "allowed":{
                                                "0":"ONE_TIME",
                                                "1":"GRADUAL"
                                             },
                                             "default":"ONE_TIME",
                                             "description":"type of game"
                                          },
                                          "notifications":{
                                             "required":false,
                                             "type":"array",
                                             "constraint":"elements must be numeric",
                                             "description":"list of notification ids"
                                          },
                                          "conditions":{
                                             "required":false,
                                             "type":"array",
                                             "constraint":"elements must be numeric",
                                             "description":"list of condition ids"
                                          },
                                          "transactionSource":{
                                             "required":true,
                                             "type":"number",
                                             "constraint":"must be numeric",
                                             "description":"id of transaction source"
                                          },
                                          "segments":{
                                             "required":false,
                                             "type":"array",
                                             "constraint":"elements must be numeric",
                                             "description":"list of segments ids"
                                          }
                                       }
                                    }
                                example: |
                                    {
                                        "id": 1,
                                        "active": true,
                                        "conditions": {},
                                        "description": "game game0",
                                        "expression": null,
                                        "gameType": "ONE_TIME",
                                        "name": "game0",
                                        "notifications": [],
                                        "priority": 1,
                                        "segments": [
                                            51,
                                            52,
                                            50
                                        ],
                                        "transactionSource": null,
                                        "updatedAt": 1390236382695,
                                        "createdAt": 1390236382695
                                    }
                    "500": 
                    "404": 
                    "400": 
                is: ["fields"]
    "/leaderboards": 
        displayName: "Leaderboards"
        type: "common"
        get: 
            description: "Get list of possible leaderboards."
            queryParameters: 
                "fields": 
                    description: "The fields we want to show in our result."
                    type: string
                    required: false
                    repeat: false
                    example: "id,name,description"
                "segments": 
                    description: "The segments we want to narrow down our search to."
                    type: string
                    required: false
                    repeat: false
                    example: "1,2,4,5"
                "offset": 
                    description: "Number of returned items."
                    type: number
                    required: false
                    repeat: false
                "limit": 
                    description: "Starting position."
                    type: number
                    required: false
                    repeat: false
                "groups": 
                    description: "The groups we want to narrow down our search to."
                    type: string
                    required: false
                    repeat: false
                    example: "1,2,4,5"
                "order": 
                    description: "The fields we want to order by and the type of ordering."
                    type: string
                    required: false
                    repeat: false
                    example: "id:DESC"
            responses: 
                "200": 
                    description: "Success!"
                    body: 
                        "application/json": 
                            schema: |
                                {
                                    "$schema": "http://json-schema.org/draft-03/schema",
                                    "type": "object",
                                    "description": "A representation of a user",
                                    "properties": {
                                        "lb": {
                                            "items": {
                                                "type": "object",
                                                "properties": {
                                                    "sc": {
                                                        "required": true,
                                                        "type": "number"
                                                    },
                                                    "i": {
                                                        "required": true,
                                                        "type": "number"
                                                    },
                                                    "id": {
                                                        "required": true,
                                                        "type": "number"
                                                    }
                                                }
                                            },
                                            "required": true,
                                            "type": "array",
                                            "description": ""
                                        }
                                    }
                                }
                            example: |
                                [
                                    {
                                        "name": "leaderboard0",
                                        "description": "Test leaderboard 0",
                                        "cron": null,
                                        "id": 0,
                                        "script": null,
                                        "active": true,
                                        "updatedAt": 1390236383800,
                                        "createdAt": 1390236383800,
                                    },
                                    {
                                        "name": "leaderboard1",        
                                        "description": "Test leaderboard 1",
                                        "cron": null,
                                        "id": 1,        
                                        "script": null,
                                        "active": true,
                                        "updatedAt": 1390236383803,
                                        "createdAt": 1390236383803
                                    },
                                    {
                                        "name": "leaderboard2",
                                        "updatedAt": 1390236383804,
                                        "description": "Test leaderboard 2",
                                        "cron": null,
                                        "id": 2,        
                                        "script": null,
                                        "active": true,
                                        "updatedAt": 1390236383804,
                                        "createdAt": 1390236383804
                                    }
                                ]
                "500": 
                "404": 
                "400": 
            is: ["fields", "segments", "paginator", "groups", "ordering"]
        "/{leaderboardId}": 
            displayName: "Leaderboard"
            uriParameters: 
                "leaderboardId": 
                    displayName: "leaderboardId"
                    type: string
                    required: true
                    repeat: false
            type: "common"
            get: 
                description: "Get users with one of the leaderboards."
                queryParameters: 
                    "fields": 
                        description: "The fields we want to show in our result."
                        type: string
                        required: false
                        repeat: false
                        example: "id,name,description"
                    "segments": 
                        description: "The segments we want to narrow down our search to."
                        type: string
                        required: false
                        repeat: false
                        example: "1,2,4,5"
                    "offset": 
                        description: "Number of returned items."
                        type: number
                        required: false
                        repeat: false
                    "limit": 
                        description: "Starting position."
                        type: number
                        required: false
                        repeat: false
                    "groups": 
                        description: "The groups we want to narrow down our search to."
                        type: string
                        required: false
                        repeat: false
                        example: "1,2,4,5"
                    "order": 
                        description: "The fields we want to order by and the type of ordering."
                        type: string
                        required: false
                        repeat: false
                        example: "id:DESC"
                responses: 
                    "200": 
                        description: "Success!"
                        body: 
                            "application/json": 
                                schema: |
                                    {
                                        "$schema": "http://json-schema.org/draft-03/schema",
                                        "type": "object",
                                        "description": "A representation of a user",
                                        "properties": {
                                            "lb": {
                                                "items": {
                                                    "type": "object",
                                                    "properties": {
                                                        "sc": {
                                                            "required": true,
                                                            "type": "number"
                                                        },
                                                        "i": {
                                                            "required": true,
                                                            "type": "number"
                                                        },
                                                        "id": {
                                                            "required": true,
                                                            "type": "number"
                                                        }
                                                    }
                                                },
                                                "required": true,
                                                "type": "array",
                                                "description": ""
                                            }
                                        }
                                    }
                                example: |
                                    [
                                        {
                                            "id": 1,
                                            "leaderboards": {
                                                "0": {
                                                    "id": 1,
                                                    "score": 100,
                                                    "index": 1
                                                }
                                            }
                                        },
                                        {
                                            "id": 2,
                                            "leaderboards": {
                                                "0": {
                                                    "id": 1,
                                                    "score": 200,
                                                    "index": 2
                                                }
                                            }
                                        },
                                        {
                                            "id": 3,
                                            "leaderboards": {
                                                "0": {
                                                    "id": 1,
                                                    "score": 300,
                                                    "index": 3
                                                }
                                            }
                                        }
                                    ]
                    "500": 
                    "404": 
                    "400": 
                is: ["fields", "segments", "paginator", "groups", "ordering"]
            "/segments": 
                displayName: "LeaderboardSegments"
                type: "common"
                "/{segmentId}": 
                    displayName: "LeaderboardSegment"
                    uriParameters: 
                        "segmentId": 
                            displayName: "segmentId"
                            type: string
                            required: true
                            repeat: false
                    type: "common"
                    get: 
                        description: "Get user's with a segment Id in one of the leaderboards."
                        queryParameters: 
                            "fields": 
                                description: "The fields we want to show in our result."
                                type: string
                                required: false
                                repeat: false
                                example: "id,name,description"
                            "segments": 
                                description: "The segments we want to narrow down our search to."
                                type: string
                                required: false
                                repeat: false
                                example: "1,2,4,5"
                            "offset": 
                                description: "Number of returned items."
                                type: number
                                required: false
                                repeat: false
                            "limit": 
                                description: "Starting position."
                                type: number
                                required: false
                                repeat: false
                            "groups": 
                                description: "The groups we want to narrow down our search to."
                                type: string
                                required: false
                                repeat: false
                                example: "1,2,4,5"
                            "order": 
                                description: "The fields we want to order by and the type of ordering."
                                type: string
                                required: false
                                repeat: false
                                example: "id:DESC"
                        responses: 
                            "200": 
                                description: "Success!"
                                body: 
                                    "application/json": 
                                        schema: |
                                            {
                                                "$schema": "http://json-schema.org/draft-03/schema",
                                                "type": "object",
                                                "description": "A representation of a user",
                                                "properties": {
                                                    "lb": {
                                                        "items": {
                                                            "type": "object",
                                                            "properties": {
                                                                "sc": {
                                                                    "required": true,
                                                                    "type": "number"
                                                                },
                                                                "i": {
                                                                    "required": true,
                                                                    "type": "number"
                                                                },
                                                                "id": {
                                                                    "required": true,
                                                                    "type": "number"
                                                                }
                                                            }
                                                        },
                                                        "required": true,
                                                        "type": "array",
                                                        "description": ""
                                                    }
                                                }
                                            }
                                        example: |
                                            [
                                                {
                                                    "id": 1,
                                                    "leaderboards": {
                                                        "0": {
                                                            "id": 1,
                                                            "score": 100,
                                                            "index": 1
                                                        }
                                                    }
                                                },
                                                {
                                                    "id": 2,
                                                    "leaderboards": {
                                                        "0": {
                                                            "id": 1,
                                                            "score": 200,
                                                            "index": 2
                                                        }
                                                    }
                                                },
                                                {
                                                    "id": 3,
                                                    "leaderboards": {
                                                        "0": {
                                                            "id": 1,
                                                            "score": 300,
                                                            "index": 3
                                                        }
                                                    }
                                                }
                                            ]
                            "500": 
                            "404": 
                            "400": 
                        is: ["fields", "segments", "paginator", "groups", "ordering"]
            "/users": 
                displayName: "LeaderboardUsers"
                type: "common"
                "/{userId}": 
                    displayName: "LeaderboardUser"
                    uriParameters: 
                        "userId": 
                            displayName: "userId"
                            type: string
                            required: true
                            repeat: false
                    type: "common"
                    "/friends": 
                        displayName: "LeaderboardUserFriends"
                        type: "common"
                        get: 
                            description: "Get user's friends with one of the leaderboards."
                            queryParameters: 
                                "fields": 
                                    description: "The fields we want to show in our result."
                                    type: string
                                    required: false
                                    repeat: false
                                    example: "id,name,description"
                                "segments": 
                                    description: "The segments we want to narrow down our search to."
                                    type: string
                                    required: false
                                    repeat: false
                                    example: "1,2,4,5"
                                "offset": 
                                    description: "Number of returned items."
                                    type: number
                                    required: false
                                    repeat: false
                                "limit": 
                                    description: "Starting position."
                                    type: number
                                    required: false
                                    repeat: false
                                "groups": 
                                    description: "The groups we want to narrow down our search to."
                                    type: string
                                    required: false
                                    repeat: false
                                    example: "1,2,4,5"
                                "order": 
                                    description: "The fields we want to order by and the type of ordering."
                                    type: string
                                    required: false
                                    repeat: false
                                    example: "id:DESC"
                            responses: 
                                "200": 
                                    description: "Success!"
                                    body: 
                                        "application/json": 
                                            schema: |
                                                {
                                                    "$schema": "http://json-schema.org/draft-03/schema",
                                                    "type": "object",
                                                    "description": "A representation of a user",
                                                    "properties": {
                                                        "lb": {
                                                            "items": {
                                                                "type": "object",
                                                                "properties": {
                                                                    "sc": {
                                                                        "required": true,
                                                                        "type": "number"
                                                                    },
                                                                    "i": {
                                                                        "required": true,
                                                                        "type": "number"
                                                                    },
                                                                    "id": {
                                                                        "required": true,
                                                                        "type": "number"
                                                                    }
                                                                }
                                                            },
                                                            "required": true,
                                                            "type": "array",
                                                            "description": ""
                                                        }
                                                    }
                                                }
                                            example: |
                                                [
                                                    {
                                                        "id": 1,
                                                        "leaderboards": {
                                                            "0": {
                                                                "id": 1,
                                                                "score": 100,
                                                                "index": 1
                                                            }
                                                        }
                                                    },
                                                    {
                                                        "id": 2,
                                                        "leaderboards": {
                                                            "0": {
                                                                "id": 1,
                                                                "score": 200,
                                                                "index": 2
                                                            }
                                                        }
                                                    },
                                                    {
                                                        "id": 3,
                                                        "leaderboards": {
                                                            "0": {
                                                                "id": 1,
                                                                "score": 300,
                                                                "index": 3
                                                            }
                                                        }
                                                    }
                                                ]
                                "500": 
                                "404": 
                                "400": 
                            is: ["fields", "segments", "paginator", "groups", "ordering"]
            "/groups": 
                displayName: "LeaderboardGroups"
                type: "common"
                "/{groupId}": 
                    displayName: "LeaderboardGroup"
                    uriParameters: 
                        "groupId": 
                            displayName: "groupId"
                            type: string
                            required: true
                            repeat: false
                    type: "common"
                    get: 
                        description: "Get user's with a group Id in one of the leaderboards."
                        queryParameters: 
                            "fields": 
                                description: "The fields we want to show in our result."
                                type: string
                                required: false
                                repeat: false
                                example: "id,name,description"
                            "segments": 
                                description: "The segments we want to narrow down our search to."
                                type: string
                                required: false
                                repeat: false
                                example: "1,2,4,5"
                            "offset": 
                                description: "Number of returned items."
                                type: number
                                required: false
                                repeat: false
                            "limit": 
                                description: "Starting position."
                                type: number
                                required: false
                                repeat: false
                            "groups": 
                                description: "The groups we want to narrow down our search to."
                                type: string
                                required: false
                                repeat: false
                                example: "1,2,4,5"
                            "order": 
                                description: "The fields we want to order by and the type of ordering."
                                type: string
                                required: false
                                repeat: false
                                example: "id:DESC"
                        responses: 
                            "200": 
                                description: "Success!"
                                body: 
                                    "application/json": 
                                        schema: |
                                            {
                                                "$schema": "http://json-schema.org/draft-03/schema",
                                                "type": "object",
                                                "description": "A representation of a user",
                                                "properties": {
                                                    "lb": {
                                                        "items": {
                                                            "type": "object",
                                                            "properties": {
                                                                "sc": {
                                                                    "required": true,
                                                                    "type": "number"
                                                                },
                                                                "i": {
                                                                    "required": true,
                                                                    "type": "number"
                                                                },
                                                                "id": {
                                                                    "required": true,
                                                                    "type": "number"
                                                                }
                                                            }
                                                        },
                                                        "required": true,
                                                        "type": "array",
                                                        "description": ""
                                                    }
                                                }
                                            }
                                        example: |
                                            [
                                                {
                                                    "id": 1,
                                                    "leaderboards": {
                                                        "0": {
                                                            "id": 1,
                                                            "score": 100,
                                                            "index": 1
                                                        }
                                                    }
                                                },
                                                {
                                                    "id": 2,
                                                    "leaderboards": {
                                                        "0": {
                                                            "id": 1,
                                                            "score": 200,
                                                            "index": 2
                                                        }
                                                    }
                                                },
                                                {
                                                    "id": 3,
                                                    "leaderboards": {
                                                        "0": {
                                                            "id": 1,
                                                            "score": 300,
                                                            "index": 3
                                                        }
                                                    }
                                                }
                                            ]
                            "500": 
                            "404": 
                            "400": 
                        is: ["fields", "segments", "paginator", "groups", "ordering"]
    "/notifications": 
        displayName: "Notifications"
        type: "common"
        get: 
            description: "Get notification collection."
            queryParameters: 
                "offset": 
                    description: "Number of returned items."
                    type: number
                    required: false
                    repeat: false
                "limit": 
                    description: "Starting position."
                    type: number
                    required: false
                    repeat: false
                "fields": 
                    description: "The fields we want to show in our result."
                    type: string
                    required: false
                    repeat: false
                    example: "id,name,description"
                "order": 
                    description: "The fields we want to order by and the type of ordering."
                    type: string
                    required: false
                    repeat: false
                    example: "id:DESC"
            responses: 
                "200": 
                    description: "Success!"
                    body: 
                        "application/json": 
                            schema: |
                                {
                                    "$schema": "http://json-schema.org/draft-03/schema",
                                    "properties": {
                                        "status": {
                                            "required": false,
                                            "type": "string",
                                            "description": "current status"
                                        },
                                        "typeId": {
                                            "required": false,
                                            "type": "number",
                                            "description": "id of the type"
                                        },
                                        "subjectType": {
                                            "required": false,
                                            "type": "string",
                                            "description": "type of the subject"
                                        },
                                        "clientId": {
                                            "required": false,
                                            "type": "number",
                                            "description": "id of the client"
                                        },
                                        "priority": {
                                            "required": false,
                                            "type": "string",
                                            "description": "priority of this object"
                                        },
                                        "source": {
                                            "required": false,
                                            "type": "number",
                                            "description": ""
                                        },
                                        "subjectId": {
                                            "required": false,
                                            "type": "number",
                                            "description": "id of the subject"
                                        },
                                        "ttl": {
                                            "required": false,
                                            "type": "number",
                                            "description": ""
                                        },
                                        "updatedAt": {
                                            "required": false,
                                            "type": "number",
                                            "description": "time it was last updated"
                                        },
                                        "data": {
                                            "required": false,
                                            "type": "object",
                                            "description": "additional useful data"
                                        },
                                        "action": {
                                            "required": false,
                                            "type": "object",
                                            "description": "kind of action that will be taken"
                                        },
                                        "createdAt": {
                                            "required": false,
                                            "type": "number",
                                            "description": "time it was created"
                                        }
                                    }
                                }
                            example: |
                                [
                                    {
                                        "id": 1,
                                        "data": "{0}",
                                        "game": 1,
                                        "notificationType": 0,
                                        "segment": 1,
                                        "updatedAt": 1390236382695,
                                        "createdAt": 1390236382695
                                    }
                                ]
                "500": 
                "404": 
                "400": 
            is: ["paginator", "fields", "ordering"]
        "/{notificationId}": 
            displayName: "Notification"
            uriParameters: 
                "notificationId": 
                    displayName: "notificationId"
                    type: string
                    required: true
                    repeat: false
            type: "common"
            get: 
                description: "Get one notification."
                queryParameters: 
                    "fields": 
                        description: "The fields we want to show in our result."
                        type: string
                        required: false
                        repeat: false
                        example: "id,name,description"
                responses: 
                    "200": 
                        description: "Success!"
                        body: 
                            "application/json": 
                                schema: |
                                    {
                                        "$schema": "http://json-schema.org/draft-03/schema",
                                        "properties": {
                                            "status": {
                                                "required": false,
                                                "type": "string",
                                                "description": "current status"
                                            },
                                            "typeId": {
                                                "required": false,
                                                "type": "number",
                                                "description": "id of the type"
                                            },
                                            "subjectType": {
                                                "required": false,
                                                "type": "string",
                                                "description": "type of the subject"
                                            },
                                            "clientId": {
                                                "required": false,
                                                "type": "number",
                                                "description": "id of the client"
                                            },
                                            "priority": {
                                                "required": false,
                                                "type": "string",
                                                "description": "priority of this object"
                                            },
                                            "source": {
                                                "required": false,
                                                "type": "number",
                                                "description": ""
                                            },
                                            "subjectId": {
                                                "required": false,
                                                "type": "number",
                                                "description": "id of the subject"
                                            },
                                            "ttl": {
                                                "required": false,
                                                "type": "number",
                                                "description": ""
                                            },
                                            "updatedAt": {
                                                "required": false,
                                                "type": "number",
                                                "description": "time it was last updated"
                                            },
                                            "data": {
                                                "required": false,
                                                "type": "object",
                                                "description": "additional useful data"
                                            },
                                            "action": {
                                                "required": false,
                                                "type": "object",
                                                "description": "kind of action that will be taken"
                                            },
                                            "createdAt": {
                                                "required": false,
                                                "type": "number",
                                                "description": "time it was created"
                                            }
                                        }
                                    }
                                example: |
                                    {
                                        "id": 1,
                                        "data": "{0}",
                                        "game": 1,
                                        "notificationType": 0,
                                        "segment": 1,
                                        "updatedAt": 1390236382695,
                                        "createdAt": 1390236382695
                                    }
                    "500": 
                    "404": 
                    "400": 
                is: ["fields"]
"/admin": 
    displayName: "Admin"
    "/counters": 
        displayName: "Counters"
        type: "common"
        get: 
            description: "Get one counter."
            queryParameters: 
                "offset": 
                    description: "Number of returned items."
                    type: number
                    required: false
                    repeat: false
                "limit": 
                    description: "Starting position."
                    type: number
                    required: false
                    repeat: false
                "fields": 
                    description: "The fields we want to show in our result."
                    type: string
                    required: false
                    repeat: false
                    example: "id,name,description"
                "order": 
                    description: "The fields we want to order by and the type of ordering."
                    type: string
                    required: false
                    repeat: false
                    example: "id:DESC"
            responses: 
                "200": 
                    description: "Success!"
                    body: 
                        "application/json": 
                            schema: |
                                {
                                   "$schema":"http://json-schema.org/draft-03/schema",
                                   "type":"object",
                                   "description":"A representation of a counter",
                                   "properties":{
                                      "name":{
                                         "required":true,
                                         "type":"string",
                                         "constraint":"must be unique, minimum 5, maximum 50 chars, alphanumeric characters and underscore",
                                         "description":"system name of counter, can be used in conditions on left side"
                                      },
                                      "description":{
                                         "required":false,
                                         "type":"string",
                                         "constraint":"minimum 5, maximum 50 chars, alphanumeric characters and underscore",
                                         "description":"system name of counter"
                                      },
                                      "value":{
                                         "required":false,
                                         "type":"number",
                                         "default":"0",
                                         "description":"global value of counter"
                                      },
                                      "requirement":{
                                         "required":false,
                                         "type":"string",
                                         "allowed":{
                                            "0":"ALL",
                                            "1":"ANY"
                                         },
                                         "default":"ANY",
                                         "description":"determines if counter requires all conditions or only one"
                                      },
                                      "conditions":{
                                         "required":false,
                                         "type":"array",
                                         "constraint":"elements must be numeric",
                                         "description":"list of conditions ids"
                                      },
                                      "eventSettable":{
                                         "required":false,
                                         "type":"boolean",
                                         "default":"false",
                                         "description":"determines if counter can be set by event"
                                      },
                                      "globalCounter":{
                                         "required":false,
                                         "type":"boolean",
                                         "default":"false",
                                         "description":"determines if counter is global, which means that will be counting all incrementations"
                                      },
                                      "transactionSource":{
                                         "required":true,
                                         "type":"number",
                                         "constraint":"must be numeric",
                                         "description":"id of transaction source"
                                      }
                                   }
                                }
                            example: |
                                [
                                    {
                                        "id": 1,
                                        "conditions": [
                                            1,
                                            2
                                        ],
                                        "description": "Example description",
                                        "eventSettable": true,
                                        "game": 1,
                                        "name": "Example",
                                        "requirement": "ALL",
                                        "transactionSource": 1,
                                        "value": 1,
                                        "updatedAt": 1390236382695,
                                        "createdAt": 1390236382695
                                    }
                                ]
                "500": 
                "404": 
                "400": 
            is: ["paginator", "fields", "ordering"]
        post: 
            description: "Add a new counter."
            body: 
                "application/json": 
                    schema: |
                        {
                           "$schema":"http://json-schema.org/draft-03/schema",
                           "type":"object",
                           "description":"A representation of a counter",
                           "properties":{
                              "name":{
                                 "required":true,
                                 "type":"string",
                                 "constraint":"must be unique, minimum 5, maximum 50 chars, alphanumeric characters and underscore",
                                 "description":"system name of counter, can be used in conditions on left side"
                              },
                              "description":{
                                 "required":false,
                                 "type":"string",
                                 "constraint":"minimum 5, maximum 50 chars, alphanumeric characters and underscore",
                                 "description":"system name of counter"
                              },
                              "value":{
                                 "required":false,
                                 "type":"number",
                                 "default":"0",
                                 "description":"global value of counter"
                              },
                              "requirement":{
                                 "required":false,
                                 "type":"string",
                                 "allowed":{
                                    "0":"ALL",
                                    "1":"ANY"
                                 },
                                 "default":"ANY",
                                 "description":"determines if counter requires all conditions or only one"
                              },
                              "conditions":{
                                 "required":false,
                                 "type":"array",
                                 "constraint":"elements must be numeric",
                                 "description":"list of conditions ids"
                              },
                              "eventSettable":{
                                 "required":false,
                                 "type":"boolean",
                                 "default":"false",
                                 "description":"determines if counter can be set by event"
                              },
                              "globalCounter":{
                                 "required":false,
                                 "type":"boolean",
                                 "default":"false",
                                 "description":"determines if counter is global, which means that will be counting all incrementations"
                              },
                              "transactionSource":{
                                 "required":true,
                                 "type":"number",
                                 "constraint":"must be numeric",
                                 "description":"id of transaction source"
                              }
                           }
                        }
                    example: |
                        {
                            "conditions": [
                                1,
                                2
                            ],
                            "description": "Example description",
                            "eventSettable": true,
                            "game": 1,
                            "name": "Example",
                            "requirement": "ALL",
                            "transactionSource": 1,
                            "value": 1
                        }
            responses: 
                "200": 
                    description: "Success!"
                    body: 
                        "application/json": 
                            example: "example"
                "500": 
                "400": 
        "/{counterId}": 
            displayName: "Counter"
            uriParameters: 
                "counterId": 
                    displayName: "counterId"
                    type: string
                    required: true
                    repeat: false
            type: "common"
            get: 
                description: "Get one counter."
                queryParameters: 
                    "fields": 
                        description: "The fields we want to show in our result."
                        type: string
                        required: false
                        repeat: false
                        example: "id,name,description"
                responses: 
                    "200": 
                        description: "Success!"
                        body: 
                            "application/json": 
                                schema: |
                                    {
                                       "$schema":"http://json-schema.org/draft-03/schema",
                                       "type":"object",
                                       "description":"A representation of a counter",
                                       "properties":{
                                          "name":{
                                             "required":true,
                                             "type":"string",
                                             "constraint":"must be unique, minimum 5, maximum 50 chars, alphanumeric characters and underscore",
                                             "description":"system name of counter, can be used in conditions on left side"
                                          },
                                          "description":{
                                             "required":false,
                                             "type":"string",
                                             "constraint":"minimum 5, maximum 50 chars, alphanumeric characters and underscore",
                                             "description":"system name of counter"
                                          },
                                          "value":{
                                             "required":false,
                                             "type":"number",
                                             "default":"0",
                                             "description":"global value of counter"
                                          },
                                          "requirement":{
                                             "required":false,
                                             "type":"string",
                                             "allowed":{
                                                "0":"ALL",
                                                "1":"ANY"
                                             },
                                             "default":"ANY",
                                             "description":"determines if counter requires all conditions or only one"
                                          },
                                          "conditions":{
                                             "required":false,
                                             "type":"array",
                                             "constraint":"elements must be numeric",
                                             "description":"list of conditions ids"
                                          },
                                          "eventSettable":{
                                             "required":false,
                                             "type":"boolean",
                                             "default":"false",
                                             "description":"determines if counter can be set by event"
                                          },
                                          "globalCounter":{
                                             "required":false,
                                             "type":"boolean",
                                             "default":"false",
                                             "description":"determines if counter is global, which means that will be counting all incrementations"
                                          },
                                          "transactionSource":{
                                             "required":true,
                                             "type":"number",
                                             "constraint":"must be numeric",
                                             "description":"id of transaction source"
                                          }
                                       }
                                    }
                                example: |
                                    {
                                        "id": 1,
                                        "conditions": [
                                            1,
                                            2
                                        ],
                                        "description": "Example description",
                                        "eventSettable": true,
                                        "game": 1,
                                        "name": "Example",
                                        "requirement": "ALL",
                                        "transactionSource": 1,
                                        "value": 1,
                                        "updatedAt": 1390236382695,
                                        "createdAt": 1390236382695
                                    }
                    "500": 
                    "404": 
                    "400": 
                is: ["fields"]
            put: 
                description: "Update a counter."
                body: 
                    "application/json": 
                        schema: |
                            {
                               "$schema":"http://json-schema.org/draft-03/schema",
                               "type":"object",
                               "description":"A representation of a counter",
                               "properties":{
                                  "name":{
                                     "required":true,
                                     "type":"string",
                                     "constraint":"must be unique, minimum 5, maximum 50 chars, alphanumeric characters and underscore",
                                     "description":"system name of counter, can be used in conditions on left side"
                                  },
                                  "description":{
                                     "required":false,
                                     "type":"string",
                                     "constraint":"minimum 5, maximum 50 chars, alphanumeric characters and underscore",
                                     "description":"system name of counter"
                                  },
                                  "value":{
                                     "required":false,
                                     "type":"number",
                                     "default":"0",
                                     "description":"global value of counter"
                                  },
                                  "requirement":{
                                     "required":false,
                                     "type":"string",
                                     "allowed":{
                                        "0":"ALL",
                                        "1":"ANY"
                                     },
                                     "default":"ANY",
                                     "description":"determines if counter requires all conditions or only one"
                                  },
                                  "conditions":{
                                     "required":false,
                                     "type":"array",
                                     "constraint":"elements must be numeric",
                                     "description":"list of conditions ids"
                                  },
                                  "eventSettable":{
                                     "required":false,
                                     "type":"boolean",
                                     "default":"false",
                                     "description":"determines if counter can be set by event"
                                  },
                                  "globalCounter":{
                                     "required":false,
                                     "type":"boolean",
                                     "default":"false",
                                     "description":"determines if counter is global, which means that will be counting all incrementations"
                                  },
                                  "transactionSource":{
                                     "required":true,
                                     "type":"number",
                                     "constraint":"must be numeric",
                                     "description":"id of transaction source"
                                  }
                               }
                            }
                        example: |
                            {
                                "conditions": [
                                    1,
                                    2
                                ],
                                "description": "Example description",
                                "eventSettable": true,
                                "game": 1,
                                "name": "Example",
                                "requirement": "ALL",
                                "transactionSource": 1,
                                "value": 1
                            }
                responses: 
                    "200": 
                        description: "Success!"
                        body: 
                            "application/json": 
                                example: "example"
                    "500": 
                    "404": 
                    "400": 
            delete: 
                description: "Delete one counter."
                responses: 
                    "200": 
                        description: "Success!"
                        body: 
                            "application/json": 
                                example: "example"
                    "500": 
                    "404": 
                    "400": 
            "/conditions": 
                displayName: "CounterConditions"
                type: "common"
                "/{conditionId}": 
                    displayName: "CounterCondition"
                    uriParameters: 
                        "conditionId": 
                            displayName: "conditionId"
                            type: string
                            required: true
                            repeat: false
                    type: "common"
                    put: 
                        description: "Add a condition to a counter."
                        responses: 
                            "200": 
                                description: "Success!"
                                body: 
                                    "application/json": 
                                        example: "example"
                            "500": 
                            "404": 
                            "400": 
                    delete: 
                        description: "Remove a condition from a counter."
                        responses: 
                            "200": 
                                description: "Success!"
                                body: 
                                    "application/json": 
                                        example: "example"
                            "500": 
                            "404": 
                            "400": 
        "/doc": 
            displayName: "CountersDoc"
            type: "common"
            get: 
                description: "Get a schema showing how to make a proper json for counters."
                responses: 
                    "200": 
                        description: "Success!"
                        body: 
                            "application/json": 
                                example: |
                                    {
                                       "$schema":"http://json-schema.org/draft-03/schema",
                                       "type":"object",
                                       "description":"A representation of a counter",
                                       "properties":{
                                          "name":{
                                             "required":true,
                                             "type":"string",
                                             "constraint":"must be unique, minimum 5, maximum 50 chars, alphanumeric characters and underscore",
                                             "description":"system name of counter, can be used in conditions on left side"
                                          },
                                          "description":{
                                             "required":false,
                                             "type":"string",
                                             "constraint":"minimum 5, maximum 50 chars, alphanumeric characters and underscore",
                                             "description":"system name of counter"
                                          },
                                          "value":{
                                             "required":false,
                                             "type":"number",
                                             "default":"0",
                                             "description":"global value of counter"
                                          },
                                          "requirement":{
                                             "required":false,
                                             "type":"string",
                                             "allowed":{
                                                "0":"ALL",
                                                "1":"ANY"
                                             },
                                             "default":"ANY",
                                             "description":"determines if counter requires all conditions or only one"
                                          },
                                          "conditions":{
                                             "required":false,
                                             "type":"array",
                                             "constraint":"elements must be numeric",
                                             "description":"list of conditions ids"
                                          },
                                          "eventSettable":{
                                             "required":false,
                                             "type":"boolean",
                                             "default":"false",
                                             "description":"determines if counter can be set by event"
                                          },
                                          "globalCounter":{
                                             "required":false,
                                             "type":"boolean",
                                             "default":"false",
                                             "description":"determines if counter is global, which means that will be counting all incrementations"
                                          },
                                          "transactionSource":{
                                             "required":true,
                                             "type":"number",
                                             "constraint":"must be numeric",
                                             "description":"id of transaction source"
                                          }
                                       }
                                    }
                    "500": 
                    "404": 
                    "400": 
    "/conditions": 
        displayName: "Conditions"
        type: "common"
        get: 
            description: "Get a list of conditions."
            queryParameters: 
                "fields": 
                    description: "The fields we want to show in our result."
                    type: string
                    required: false
                    repeat: false
                    example: "id,name,description"
                "offset": 
                    description: "Number of returned items."
                    type: number
                    required: false
                    repeat: false
                "limit": 
                    description: "Starting position."
                    type: number
                    required: false
                    repeat: false
                "order": 
                    description: "The fields we want to order by and the type of ordering."
                    type: string
                    required: false
                    repeat: false
                    example: "id:DESC"
            responses: 
                "200": 
                    description: "Success!"
                    body: 
                        "application/json": 
                            schema: |
                                {
                                   "$schema":"http://json-schema.org/draft-03/schema",
                                   "type":"object",
                                   "description":"A representation of a condition",
                                   "properties":{
                                      "name":{
                                         "required":true,
                                         "type":"string",
                                         "constraint":"minimum 5, maximum 50 chars, alphanumeric characters and underscore",
                                         "description":"system name of condition"
                                      },
                                      "leftSide":{
                                         "required":false,
                                         "type":"string",
                                         "constraint":"minimum 5, maximum 50 chars",
                                         "description":"left side of condition"
                                      },
                                      "rightSide":{
                                         "required":false,
                                         "type":"string",
                                         "constraint":"minimum 5, maximum 50 chars",
                                         "description":"right side of condition"
                                      },
                                      "operator":{
                                         "required":false,
                                         "type":"string",
                                         "allowed":{
                                            "0":"EQ",
                                            "1":"NE",
                                            "2":"GT",
                                            "3":"GTE",
                                            "4":"LT",
                                            "5":"LTE"
                                         },
                                         "default":"EQ",
                                         "description":"operator which compares two sides"
                                      },
                                      "conditionType":{
                                         "required":false,
                                         "type":"string",
                                         "allowed":{
                                            "0":"NORMAL",
                                            "1":"FUNCTION"
                                         },
                                         "default":"NORMAL",
                                         "description":"type of condition"
                                      },
                                      "function":{
                                         "required":false,
                                         "type":"number",
                                         "constraint":"must be numeric",
                                         "description":"function id (if condition has type FUNCTION)"
                                      },
                                      "functionArgs":{
                                         "required":false,
                                         "type":"object",
                                         "description":"arguments for the function as json"
                                      },
                                      "transactionSource":{
                                         "required":true,
                                         "type":"number",
                                         "constraint":"must be numeric",
                                         "description":"id of transaction source"
                                      }
                                   }
                                }
                            example: |
                                [
                                    {
                                        "id": 1,
                                        "conditionType": "NORMAL",
                                        "counters": [
                                            1,
                                            2
                                        ],
                                        "leftSide": "hello",
                                        "name": "Example",
                                        "operator": "NE",
                                        "rightSide": "game",
                                        "transactionSource": 1,
                                        "updatedAt": 1390236382695,
                                        "createdAt": 1390236382695
                                    }
                                ]
                "500": 
                "404": 
                "400": 
            is: ["fields", "paginator", "ordering"]
        post: 
            description: "Add a new condition."
            body: 
                "application/json": 
                    schema: |
                        {
                           "$schema":"http://json-schema.org/draft-03/schema",
                           "type":"object",
                           "description":"A representation of a condition",
                           "properties":{
                              "name":{
                                 "required":true,
                                 "type":"string",
                                 "constraint":"minimum 5, maximum 50 chars, alphanumeric characters and underscore",
                                 "description":"system name of condition"
                              },
                              "leftSide":{
                                 "required":false,
                                 "type":"string",
                                 "constraint":"minimum 5, maximum 50 chars",
                                 "description":"left side of condition"
                              },
                              "rightSide":{
                                 "required":false,
                                 "type":"string",
                                 "constraint":"minimum 5, maximum 50 chars",
                                 "description":"right side of condition"
                              },
                              "operator":{
                                 "required":false,
                                 "type":"string",
                                 "allowed":{
                                    "0":"EQ",
                                    "1":"NE",
                                    "2":"GT",
                                    "3":"GTE",
                                    "4":"LT",
                                    "5":"LTE"
                                 },
                                 "default":"EQ",
                                 "description":"operator which compares two sides"
                              },
                              "conditionType":{
                                 "required":false,
                                 "type":"string",
                                 "allowed":{
                                    "0":"NORMAL",
                                    "1":"FUNCTION"
                                 },
                                 "default":"NORMAL",
                                 "description":"type of condition"
                              },
                              "function":{
                                 "required":false,
                                 "type":"number",
                                 "constraint":"must be numeric",
                                 "description":"function id (if condition has type FUNCTION)"
                              },
                              "functionArgs":{
                                 "required":false,
                                 "type":"object",
                                 "description":"arguments for the function as json"
                              },
                              "transactionSource":{
                                 "required":true,
                                 "type":"number",
                                 "constraint":"must be numeric",
                                 "description":"id of transaction source"
                              }
                           }
                        }
                    example: |
                        {
                        	"conditionType": "NORMAL",
                            "counters": [
                                1,
                                2
                            ],
                            "leftSide": "hello",
                            "name": "Example",
                            "operator": "NE",
                            "rightSide": "game",
                            "transactionSource": 1
                        }
            responses: 
                "200": 
                    description: "Success!"
                    body: 
                        "application/json": 
                            schema: |
                                {
                                   "$schema":"http://json-schema.org/draft-03/schema",
                                   "type":"object",
                                   "description":"A representation of a condition",
                                   "properties":{
                                      "name":{
                                         "required":true,
                                         "type":"string",
                                         "constraint":"minimum 5, maximum 50 chars, alphanumeric characters and underscore",
                                         "description":"system name of condition"
                                      },
                                      "leftSide":{
                                         "required":false,
                                         "type":"string",
                                         "constraint":"minimum 5, maximum 50 chars",
                                         "description":"left side of condition"
                                      },
                                      "rightSide":{
                                         "required":false,
                                         "type":"string",
                                         "constraint":"minimum 5, maximum 50 chars",
                                         "description":"right side of condition"
                                      },
                                      "operator":{
                                         "required":false,
                                         "type":"string",
                                         "allowed":{
                                            "0":"EQ",
                                            "1":"NE",
                                            "2":"GT",
                                            "3":"GTE",
                                            "4":"LT",
                                            "5":"LTE"
                                         },
                                         "default":"EQ",
                                         "description":"operator which compares two sides"
                                      },
                                      "conditionType":{
                                         "required":false,
                                         "type":"string",
                                         "allowed":{
                                            "0":"NORMAL",
                                            "1":"FUNCTION"
                                         },
                                         "default":"NORMAL",
                                         "description":"type of condition"
                                      },
                                      "function":{
                                         "required":false,
                                         "type":"number",
                                         "constraint":"must be numeric",
                                         "description":"function id (if condition has type FUNCTION)"
                                      },
                                      "functionArgs":{
                                         "required":false,
                                         "type":"object",
                                         "description":"arguments for the function as json"
                                      },
                                      "transactionSource":{
                                         "required":true,
                                         "type":"number",
                                         "constraint":"must be numeric",
                                         "description":"id of transaction source"
                                      }
                                   }
                                }
                            example: |
                                {
                                    "id": 1,
                                    "conditionType": "NORMAL",
                                    "counters": [
                                        1,
                                        2
                                    ],
                                    "leftSide": "hello",
                                    "name": "Example",
                                    "operator": "NE",
                                    "rightSide": "game",
                                    "transactionSource": 1,
                                    "updatedAt": 1390236382695,
                                    "createdAt": 1390236382695
                                }
                "500": 
                "400": 
        "/{conditionId}": 
            displayName: "Condition"
            uriParameters: 
                "conditionId": 
                    displayName: "conditionId"
                    type: string
                    required: true
                    repeat: false
            type: "common"
            get: 
                description: |
                    Get one condition by its id.
                queryParameters: 
                    "fields": 
                        description: "The fields we want to show in our result."
                        type: string
                        required: false
                        repeat: false
                        example: "id,name,description"
                responses: 
                    "200": 
                        description: "Success!"
                        body: 
                            "application/json": 
                                schema: |
                                    {
                                       "$schema":"http://json-schema.org/draft-03/schema",
                                       "type":"object",
                                       "description":"A representation of a condition",
                                       "properties":{
                                          "name":{
                                             "required":true,
                                             "type":"string",
                                             "constraint":"minimum 5, maximum 50 chars, alphanumeric characters and underscore",
                                             "description":"system name of condition"
                                          },
                                          "leftSide":{
                                             "required":false,
                                             "type":"string",
                                             "constraint":"minimum 5, maximum 50 chars",
                                             "description":"left side of condition"
                                          },
                                          "rightSide":{
                                             "required":false,
                                             "type":"string",
                                             "constraint":"minimum 5, maximum 50 chars",
                                             "description":"right side of condition"
                                          },
                                          "operator":{
                                             "required":false,
                                             "type":"string",
                                             "allowed":{
                                                "0":"EQ",
                                                "1":"NE",
                                                "2":"GT",
                                                "3":"GTE",
                                                "4":"LT",
                                                "5":"LTE"
                                             },
                                             "default":"EQ",
                                             "description":"operator which compares two sides"
                                          },
                                          "conditionType":{
                                             "required":false,
                                             "type":"string",
                                             "allowed":{
                                                "0":"NORMAL",
                                                "1":"FUNCTION"
                                             },
                                             "default":"NORMAL",
                                             "description":"type of condition"
                                          },
                                          "function":{
                                             "required":false,
                                             "type":"number",
                                             "constraint":"must be numeric",
                                             "description":"function id (if condition has type FUNCTION)"
                                          },
                                          "functionArgs":{
                                             "required":false,
                                             "type":"object",
                                             "description":"arguments for the function as json"
                                          },
                                          "transactionSource":{
                                             "required":true,
                                             "type":"number",
                                             "constraint":"must be numeric",
                                             "description":"id of transaction source"
                                          }
                                       }
                                    }
                                example: |
                                    {
                                        "id": 1,
                                        "conditionType": "NORMAL",
                                        "counters": [
                                            1,
                                            2
                                        ],
                                        "leftSide": "hello",
                                        "name": "Example",
                                        "operator": "NE",
                                        "rightSide": "game",
                                        "transactionSource": 1,
                                        "updatedAt": 1390236382695,
                                        "createdAt": 1390236382695
                                    }
                    "500": 
                    "404": 
                    "400": 
                is: ["fields"]
            put: 
                description: "Change one condition."
                body: 
                    "application/json": 
                        schema: |
                            {
                               "$schema":"http://json-schema.org/draft-03/schema",
                               "type":"object",
                               "description":"A representation of a condition",
                               "properties":{
                                  "name":{
                                     "required":true,
                                     "type":"string",
                                     "constraint":"minimum 5, maximum 50 chars, alphanumeric characters and underscore",
                                     "description":"system name of condition"
                                  },
                                  "leftSide":{
                                     "required":false,
                                     "type":"string",
                                     "constraint":"minimum 5, maximum 50 chars",
                                     "description":"left side of condition"
                                  },
                                  "rightSide":{
                                     "required":false,
                                     "type":"string",
                                     "constraint":"minimum 5, maximum 50 chars",
                                     "description":"right side of condition"
                                  },
                                  "operator":{
                                     "required":false,
                                     "type":"string",
                                     "allowed":{
                                        "0":"EQ",
                                        "1":"NE",
                                        "2":"GT",
                                        "3":"GTE",
                                        "4":"LT",
                                        "5":"LTE"
                                     },
                                     "default":"EQ",
                                     "description":"operator which compares two sides"
                                  },
                                  "conditionType":{
                                     "required":false,
                                     "type":"string",
                                     "allowed":{
                                        "0":"NORMAL",
                                        "1":"FUNCTION"
                                     },
                                     "default":"NORMAL",
                                     "description":"type of condition"
                                  },
                                  "function":{
                                     "required":false,
                                     "type":"number",
                                     "constraint":"must be numeric",
                                     "description":"function id (if condition has type FUNCTION)"
                                  },
                                  "functionArgs":{
                                     "required":false,
                                     "type":"object",
                                     "description":"arguments for the function as json"
                                  },
                                  "transactionSource":{
                                     "required":true,
                                     "type":"number",
                                     "constraint":"must be numeric",
                                     "description":"id of transaction source"
                                  }
                               }
                            }
                        example: |
                            {
                            	"conditionType": "NORMAL",
                                "counters": [
                                    1,
                                    2
                                ],
                                "leftSide": "hello",
                                "name": "Example",
                                "operator": "NE",
                                "rightSide": "game",
                                "transactionSource": 1
                            }
                responses: 
                    "200": 
                        description: "Success!"
                        body: 
                            "application/json": 
                                example: "example"
                    "500": 
                    "404": 
                    "400": 
            delete: 
                description: "Delete one condition."
                responses: 
                    "200": 
                        description: "Success!"
                        body: 
                            "application/json": 
                                example: "example"
                    "500": 
                    "404": 
                    "400": 
            "/counters": 
                displayName: "ConditionCounters"
                type: "common"
                "/{counterId}": 
                    displayName: "ConditionCounter"
                    uriParameters: 
                        "counterId": 
                            displayName: "counterId"
                            type: string
                            required: true
                            repeat: false
                    type: "common"
                    put: 
                        description: "Add a counter."
                        responses: 
                            "200": 
                                description: "Success!"
                                body: 
                                    "application/json": 
                                        example: "example"
                            "500": 
                            "404": 
                            "400": 
                    delete: 
                        description: "Remove a counter."
                        responses: 
                            "200": 
                                description: "Success!"
                                body: 
                                    "application/json": 
                                        example: "example"
                            "500": 
                            "404": 
                            "400": 
        "/doc": 
            displayName: "ConditionsDoc"
            type: "common"
            get: 
                description: "Get a schema showing how to make a proper json for clientscripts."
                responses: 
                    "200": 
                        description: "Success!"
                        body: 
                            "application/json": 
                                example: |
                                    {
                                       "$schema":"http://json-schema.org/draft-03/schema",
                                       "type":"object",
                                       "description":"A representation of a condition",
                                       "properties":{
                                          "name":{
                                             "required":true,
                                             "type":"string",
                                             "constraint":"minimum 5, maximum 50 chars, alphanumeric characters and underscore",
                                             "description":"system name of condition"
                                          },
                                          "leftSide":{
                                             "required":false,
                                             "type":"string",
                                             "constraint":"minimum 5, maximum 50 chars",
                                             "description":"left side of condition"
                                          },
                                          "rightSide":{
                                             "required":false,
                                             "type":"string",
                                             "constraint":"minimum 5, maximum 50 chars",
                                             "description":"right side of condition"
                                          },
                                          "operator":{
                                             "required":false,
                                             "type":"string",
                                             "allowed":{
                                                "0":"EQ",
                                                "1":"NE",
                                                "2":"GT",
                                                "3":"GTE",
                                                "4":"LT",
                                                "5":"LTE"
                                             },
                                             "default":"EQ",
                                             "description":"operator which compares two sides"
                                          },
                                          "conditionType":{
                                             "required":false,
                                             "type":"string",
                                             "allowed":{
                                                "0":"NORMAL",
                                                "1":"FUNCTION"
                                             },
                                             "default":"NORMAL",
                                             "description":"type of condition"
                                          },
                                          "function":{
                                             "required":false,
                                             "type":"number",
                                             "constraint":"must be numeric",
                                             "description":"function id (if condition has type FUNCTION)"
                                          },
                                          "functionArgs":{
                                             "required":false,
                                             "type":"object",
                                             "description":"arguments for the function as json"
                                          },
                                          "transactionSource":{
                                             "required":true,
                                             "type":"number",
                                             "constraint":"must be numeric",
                                             "description":"id of transaction source"
                                          }
                                       }
                                    }
                    "500": 
                    "404": 
                    "400": 
    "/segments": 
        displayName: "Segments"
        type: "common"
        get: 
            description: "Get a segment list."
            queryParameters: 
                "fields": 
                    description: "The fields we want to show in our result."
                    type: string
                    required: false
                    repeat: false
                    example: "id,name,description"
                "offset": 
                    description: "Number of returned items."
                    type: number
                    required: false
                    repeat: false
                "limit": 
                    description: "Starting position."
                    type: number
                    required: false
                    repeat: false
                "order": 
                    description: "The fields we want to order by and the type of ordering."
                    type: string
                    required: false
                    repeat: false
                    example: "id:DESC"
            responses: 
                "200": 
                    description: "Success!"
                    body: 
                        "application/json": 
                            schema: |
                                {
                                   "$schema":"http://json-schema.org/draft-03/schema",
                                   "type":"object",
                                   "description":"A representation of a segment",
                                   "properties":{
                                      "name":{
                                         "required":true,
                                         "type":"string",
                                         "constraint":"must be unique, minimum 5, maximum 50 chars, alphanumeric characters and underscore",
                                         "description":"system name of segment"
                                      }
                                   }
                                }
                            example: |
                                [
                                    {
                                        "id": 1,
                                        "name": "Example",
                                        "updatedAt": 1390236382695,
                                        "createdAt": 1390236382695
                                    }
                                ]
                "500": 
                "404": 
                "400": 
            is: ["fields", "paginator", "ordering"]
        post: 
            description: "Add a new segment."
            body: 
                "application/json": 
                    schema: |
                        {
                           "$schema":"http://json-schema.org/draft-03/schema",
                           "type":"object",
                           "description":"A representation of a segment",
                           "properties":{
                              "name":{
                                 "required":true,
                                 "type":"string",
                                 "constraint":"must be unique, minimum 5, maximum 50 chars, alphanumeric characters and underscore",
                                 "description":"system name of segment"
                              }
                           }
                        }
                    example: |
                        {
                            "name": "Example"
                        }
            responses: 
                "200": 
                    description: "Success!"
                    body: 
                        "application/json": 
                            example: "example"
                "500": 
                "400": 
        "/{segmentId}": 
            displayName: "Segment"
            uriParameters: 
                "segmentId": 
                    displayName: "segmentId"
                    type: string
                    required: true
                    repeat: false
            type: "common"
            get: 
                description: "Get a segment by its id."
                queryParameters: 
                    "fields": 
                        description: "The fields we want to show in our result."
                        type: string
                        required: false
                        repeat: false
                        example: "id,name,description"
                responses: 
                    "200": 
                        description: "Success!"
                        body: 
                            "application/json": 
                                schema: |
                                    {
                                       "$schema":"http://json-schema.org/draft-03/schema",
                                       "type":"object",
                                       "description":"A representation of a segment",
                                       "properties":{
                                          "name":{
                                             "required":true,
                                             "type":"string",
                                             "constraint":"must be unique, minimum 5, maximum 50 chars, alphanumeric characters and underscore",
                                             "description":"system name of segment"
                                          }
                                       }
                                    }
                                example: |
                                    {
                                        "name": "Example"
                                    }
                    "500": 
                    "404": 
                    "400": 
                is: ["fields"]
            put: 
                description: "Update a segment."
                body: 
                    "application/json": 
                        schema: |
                            {
                               "$schema":"http://json-schema.org/draft-03/schema",
                               "type":"object",
                               "description":"A representation of a segment",
                               "properties":{
                                  "name":{
                                     "required":true,
                                     "type":"string",
                                     "constraint":"must be unique, minimum 5, maximum 50 chars, alphanumeric characters and underscore",
                                     "description":"system name of segment"
                                  }
                               }
                            }
                        example: |
                            {
                                "id": 1,
                                "name": "Example",
                                "updatedAt": 1390236382695,
                                "createdAt": 1390236382695
                            }
                responses: 
                    "200": 
                        description: "Success!"
                        body: 
                            "application/json": 
                                example: "example"
                    "500": 
                    "404": 
                    "400": 
            delete: 
                description: "Delete a segment."
                responses: 
                    "200": 
                        description: "Success!"
                        body: 
                            "application/json": 
                                example: "example"
                    "500": 
                    "404": 
                    "400": 
        "/doc": 
            displayName: "SegmentsDocs"
            type: "common"
            get: 
                description: "Get a schema showing how to make a proper json for segment."
                responses: 
                    "200": 
                        description: "Success!"
                        body: 
                            "application/json": 
                                example: |
                                    {
                                       "$schema":"http://json-schema.org/draft-03/schema",
                                       "type":"object",
                                       "description":"A representation of a segment",
                                       "properties":{
                                          "name":{
                                             "required":true,
                                             "type":"string",
                                             "constraint":"must be unique, minimum 5, maximum 50 chars, alphanumeric characters and underscore",
                                             "description":"system name of segment"
                                          }
                                       }
                                    }
                    "500": 
                    "404": 
                    "400": 
    "/clientscripts": 
        displayName: "ClientScripts"
        type: "common"
        get: 
            description: |
                Use this method to get a list of client scripts. It returns a json body.
            queryParameters: 
                "fields": 
                    description: "The fields we want to show in our result."
                    type: string
                    required: false
                    repeat: false
                    example: "id,name,description"
                "order": 
                    description: "The fields we want to order by and the type of ordering."
                    type: string
                    required: false
                    repeat: false
                    example: "id:DESC"
                "offset": 
                    description: "Number of returned items."
                    type: number
                    required: false
                    repeat: false
                "limit": 
                    description: "Starting position."
                    type: number
                    required: false
                    repeat: false
            responses: 
                "200": 
                    description: "Success!"
                    body: 
                        "application/json": 
                            schema: |
                                {
                                   "$schema":"http://json-schema.org/draft-03/schema",
                                   "type":"object",
                                   "description":"A representation of a client script",
                                   "properties":{
                                      "name":{
                                         "required":true,
                                         "type":"string",
                                         "description":"name of the script"
                                      },
                                      "code":{
                                         "required":true,
                                         "type":"string",
                                          "description":"script code"
                                      },
                                      "returnType":{
                                         "required":true,
                                         "type":"string",
                                         "allowed":{
                                            "0":"NUMBER",
                                            "1":"STRING",
                                            "2":"BOOLEAN"
                                         },
                                         "default":"STRING",
                                         "description":"return type of the script"
                                      }
                                   }
                                }
                            example: |
                                [
                                    {
                                        "id": 1,
                                        "code": "$.subject.getCounterValue(1)",
                                        "name": "Example",
                                        "returnType": "STRING",
                                        "updatedAt": 1390236382695,
                                        "createdAt": 1390236382695
                                    }
                                ]
                "500": 
                "404": 
                "400": 
            is: ["fields", "ordering", "paginator"]
        post: 
            description: |
                We can use this method to create a new client script. It needs a body and 
                returns the created object.
            body: 
                "application/json": 
                    schema: |
                        {
                           "$schema":"http://json-schema.org/draft-03/schema",
                           "type":"object",
                           "description":"A representation of a client script",
                           "properties":{
                              "name":{
                                 "required":true,
                                 "type":"string",
                                 "description":"name of the script"
                              },
                              "code":{
                                 "required":true,
                                 "type":"string",
                                  "description":"script code"
                              },
                              "returnType":{
                                 "required":true,
                                 "type":"string",
                                 "allowed":{
                                    "0":"NUMBER",
                                    "1":"STRING",
                                    "2":"BOOLEAN"
                                 },
                                 "default":"STRING",
                                 "description":"return type of the script"
                              }
                           }
                        }
                    example: |
                        {
                            "code": "$.subject.getCounterValue(1)",
                            "name": "Example",
                            "returnType": "STRING"
                        }
            responses: 
                "200": 
                    description: "Success!"
                    body: 
                        "application/json": 
                            schema: |
                                {
                                   "$schema":"http://json-schema.org/draft-03/schema",
                                   "type":"object",
                                   "description":"A representation of a client script",
                                   "properties":{
                                      "name":{
                                         "required":true,
                                         "type":"string",
                                         "description":"name of the script"
                                      },
                                      "code":{
                                         "required":true,
                                         "type":"string",
                                          "description":"script code"
                                      },
                                      "returnType":{
                                         "required":true,
                                         "type":"string",
                                         "allowed":{
                                            "0":"NUMBER",
                                            "1":"STRING",
                                            "2":"BOOLEAN"
                                         },
                                         "default":"STRING",
                                         "description":"return type of the script"
                                      }
                                   }
                                }
                            example: |
                                {
                                    "id": 1,
                                    "code": "$.subject.getCounterValue(1)",
                                    "name": "Example",
                                    "returnType": "STRING",
                                    "updatedAt": 1390236382695,
                                    "createdAt": 1390236382695
                                }
                "500": 
                "400": 
        "/{clientScriptId}": 
            displayName: "ClientScript"
            uriParameters: 
                "clientScriptId": 
                    displayName: "clientScriptId"
                    type: string
                    required: true
                    repeat: false
            type: "common"
            get: 
                description: |
                    Use this method to get one client script by id.
                queryParameters: 
                    "fields": 
                        description: "The fields we want to show in our result."
                        type: string
                        required: false
                        repeat: false
                        example: "id,name,description"
                responses: 
                    "200": 
                        description: "Success!"
                        body: 
                            "application/json": 
                                schema: |
                                    {
                                       "$schema":"http://json-schema.org/draft-03/schema",
                                       "type":"object",
                                       "description":"A representation of a client script",
                                       "properties":{
                                          "name":{
                                             "required":true,
                                             "type":"string",
                                             "description":"name of the script"
                                          },
                                          "code":{
                                             "required":true,
                                             "type":"string",
                                              "description":"script code"
                                          },
                                          "returnType":{
                                             "required":true,
                                             "type":"string",
                                             "allowed":{
                                                "0":"NUMBER",
                                                "1":"STRING",
                                                "2":"BOOLEAN"
                                             },
                                             "default":"STRING",
                                             "description":"return type of the script"
                                          }
                                       }
                                    }
                                example: |
                                    {
                                        "id": 1,
                                        "code": "$.subject.getCounterValue(1)",
                                        "name": "Example",
                                        "returnType": "STRING",
                                        "updatedAt": 1390236382695,
                                        "createdAt": 1390236382695
                                    }
                    "500": 
                    "404": 
                    "400": 
                is: ["fields"]
            put: 
                description: |
                    Use this method to change one client script.
                body: 
                    "application/json": 
                        schema: |
                            {
                               "$schema":"http://json-schema.org/draft-03/schema",
                               "type":"object",
                               "description":"A representation of a client script",
                               "properties":{
                                  "name":{
                                     "required":true,
                                     "type":"string",
                                     "description":"name of the script"
                                  },
                                  "code":{
                                     "required":true,
                                     "type":"string",
                                      "description":"script code"
                                  },
                                  "returnType":{
                                     "required":true,
                                     "type":"string",
                                     "allowed":{
                                        "0":"NUMBER",
                                        "1":"STRING",
                                        "2":"BOOLEAN"
                                     },
                                     "default":"STRING",
                                     "description":"return type of the script"
                                  }
                               }
                            }
                        example: |
                            {
                                "code": "$.subject.getCounterValue(1)",
                                "name": "Example",
                                "returnType": "STRING"
                            }
                responses: 
                    "200": 
                        description: "Success!"
                        body: 
                            "application/json": 
                                example: "example"
                    "500": 
                    "404": 
                    "400": 
            delete: 
                description: "Delete one client script using and id."
                responses: 
                    "200": 
                        description: "Success!"
                        body: 
                            "application/json": 
                                example: "example"
                    "500": 
                    "404": 
                    "400": 
        "/doc": 
            displayName: "ClientScriptsDoc"
            type: "common"
            get: 
                description: |
                    Get a schema showing how to create a proper json for clientscripts.
                responses: 
                    "200": 
                        description: "Success!"
                        body: 
                            "application/json": 
                                example: |
                                    {
                                       "$schema":"http://json-schema.org/draft-03/schema",
                                       "type":"object",
                                       "description":"A representation of a client script",
                                       "properties":{
                                          "name":{
                                             "required":true,
                                             "type":"string",
                                             "description":"name of the script"
                                          },
                                          "code":{
                                             "required":true,
                                             "type":"string",
                                              "description":"script code"
                                          },
                                          "returnType":{
                                             "required":true,
                                             "type":"string",
                                             "allowed":{
                                                "0":"NUMBER",
                                                "1":"STRING",
                                                "2":"BOOLEAN"
                                             },
                                             "default":"STRING",
                                             "description":"return type of the script"
                                          }
                                       }
                                    }
                    "500": 
                    "404": 
                    "400": 
    "/users": 
        displayName: "Users"
        type: "common"
        get: 
            description: "Get a list of users."
            queryParameters: 
                "fields": 
                    description: "The fields we want to show in our result."
                    type: string
                    required: false
                    repeat: false
                    example: "id,name,description"
                "offset": 
                    description: "Number of returned items."
                    type: number
                    required: false
                    repeat: false
                "limit": 
                    description: "Starting position."
                    type: number
                    required: false
                    repeat: false
                "order": 
                    description: "The fields we want to order by and the type of ordering."
                    type: string
                    required: false
                    repeat: false
                    example: "id:DESC"
                "groups": 
                    description: "The groups we want to narrow down our search to."
                    type: string
                    required: false
                    repeat: false
                    example: "1,2,4,5"
                "segments": 
                    description: "The segments we want to narrow down our search to."
                    type: string
                    required: false
                    repeat: false
                    example: "1,2,4,5"
            responses: 
                "200": 
                    description: "Success!"
                    body: 
                        "application/json": 
                            schema: |
                                {
                                   "$schema":"http://json-schema.org/draft-03/schema",
                                   "type":"object",
                                   "description":"A representation of a user",
                                   "properties":{
                                      "email":{
                                         "required":true,
                                         "type":"string",
                                         "constraint":"must be unique, minimum 5, maximum 200 chars",
                                         "description":"user email"
                                      },
                                      "password":{
                                         "required":false,
                                         "type":"string",
                                         "constraint":"minimum 6, maximum 15 chars, uppercase, lowercase, number, symbol @#$%.",
                                         "description":"user password"
                                      },
                                      "firstName":{
                                         "required":false,
                                         "type":"string",
                                         "constraint":"minimum 5, maximum 50 chars, can contain only alphanumeric characters",
                                         "description":"user first name"
                                      },
                                      "lastName":{
                                         "required":false,
                                         "type":"string",
                                         "constraint":"minimum 5, maximum 50 chars, can contain only alphanumeric characters",
                                         "description":"user last name"
                                      },
                                      "gender":{
                                         "required":false,
                                         "type":"string",
                                         "allowed":{
                                            "0":"UNKNOWN",
                                            "1":"MALE",
                                            "2":"FEMALE"
                                         },
                                         "default":"UNKNOWN",
                                         "description":"user gender"
                                      },
                                      "birthDate":{
                                         "required":false,
                                         "type":"string",
                                         "description":"user birth date, format: YYYY-MM-DD"
                                      },
                                      "status":{
                                         "required":false,
                                         "type":"string",
                                         "allowed":{
                                            "0":"UNACTIVE",
                                            "1":"ACTIVE",
                                            "2":"RESIGNED",
                                            "3":"BANNED"
                                         },
                                         "default":"UNACTIVE",
                                         "description":"user status"
                                      },
                                      "friends":{
                                         "required":false,
                                         "type":"array",
                                         "constraint":"elements must be numeric",
                                         "description":"list of users friends"
                                      },
                                      "usersGroups":{
                                         "required":false,
                                         "type":"array",
                                         "constraint":"elements must be numeric",
                                         "description":"list of user group ids, which user belongs to"
                                      },
                                      "segments":{
                                         "required":false,
                                         "type":"array",
                                         "constraint":"elements must be numeric",
                                         "description":"list of segment ids"
                                      },
                                      "gainedAchievements":{
                                         "required":false,
                                         "type":"array",
                                         "constraint":"elements must be numeric",
                                         "description":"list of gained achievement ids"
                                      },
                                      "wonGames":{
                                         "required":false,
                                         "type":"array",
                                         "constraint":"elements must be numeric",
                                         "description":"list of won game ids"
                                      },
                                      "counterValues":{
                                         "required":false,
                                         "type":"array",
                                         "constraint":"elements must be numeric",
                                         "description":"list of counter value ids"
                                      },
                                      "externalIds":{
                                         "required":false,
                                         "type":"array",
                                         "constraint":"elements must be numeric",
                                         "description":"list of external ids"
                                      },
                                      "customFields":{
                                         "required":false,
                                         "type":"object",
                                         "description":"key:value pairs as json object"
                                      }
                                   }
                                }
                            example: |
                                [
                                    {
                                        "id": 1,
                                        "birthDate": null,
                                        "counterValues": [
                                            5,
                                            3
                                        ],
                                        "customFields": {
                                            "shoes": "45",
                                            "system": "Windows"
                                        },
                                        "email": "example@ex.pl",
                                        "externalIds": [
                                            3,
                                            4
                                        ],
                                        "firstName": "Example",
                                        "friends": [
                                            1,
                                            2,
                                            3
                                        ],
                                        "gainedAchievements": [
                                            2,
                                            3
                                        ],
                                        "gender": "MALE",
                                        "lastName": "Example",
                                        "segments": [
                                            1,
                                            3
                                        ],
                                        "status": "ACTIVE",
                                        "usersGroups": [
                                            1,
                                            2
                                        ],
                                        "wonGames": [
                                            4,
                                            5
                                        ],
                                        "updatedAt": 1390236382695,
                                        "createdAt": 1390236382695
                                    }
                                ]
                "500": 
                "404": 
                "400": 
            is: ["fields", "paginator", "ordering", "groups", "segments"]
        post: 
            description: "Add a user."
            body: 
                "application/json": 
                    schema: |
                        {
                           "$schema":"http://json-schema.org/draft-03/schema",
                           "type":"object",
                           "description":"A representation of a user",
                           "properties":{
                              "email":{
                                 "required":true,
                                 "type":"string",
                                 "constraint":"must be unique, minimum 5, maximum 200 chars",
                                 "description":"user email"
                              },
                              "password":{
                                 "required":false,
                                 "type":"string",
                                 "constraint":"minimum 6, maximum 15 chars, uppercase, lowercase, number, symbol @#$%.",
                                 "description":"user password"
                              },
                              "firstName":{
                                 "required":false,
                                 "type":"string",
                                 "constraint":"minimum 5, maximum 50 chars, can contain only alphanumeric characters",
                                 "description":"user first name"
                              },
                              "lastName":{
                                 "required":false,
                                 "type":"string",
                                 "constraint":"minimum 5, maximum 50 chars, can contain only alphanumeric characters",
                                 "description":"user last name"
                              },
                              "gender":{
                                 "required":false,
                                 "type":"string",
                                 "allowed":{
                                    "0":"UNKNOWN",
                                    "1":"MALE",
                                    "2":"FEMALE"
                                 },
                                 "default":"UNKNOWN",
                                 "description":"user gender"
                              },
                              "birthDate":{
                                 "required":false,
                                 "type":"string",
                                 "description":"user birth date, format: YYYY-MM-DD"
                              },
                              "status":{
                                 "required":false,
                                 "type":"string",
                                 "allowed":{
                                    "0":"UNACTIVE",
                                    "1":"ACTIVE",
                                    "2":"RESIGNED",
                                    "3":"BANNED"
                                 },
                                 "default":"UNACTIVE",
                                 "description":"user status"
                              },
                              "friends":{
                                 "required":false,
                                 "type":"array",
                                 "constraint":"elements must be numeric",
                                 "description":"list of users friends"
                              },
                              "usersGroups":{
                                 "required":false,
                                 "type":"array",
                                 "constraint":"elements must be numeric",
                                 "description":"list of user group ids, which user belongs to"
                              },
                              "segments":{
                                 "required":false,
                                 "type":"array",
                                 "constraint":"elements must be numeric",
                                 "description":"list of segment ids"
                              },
                              "gainedAchievements":{
                                 "required":false,
                                 "type":"array",
                                 "constraint":"elements must be numeric",
                                 "description":"list of gained achievement ids"
                              },
                              "wonGames":{
                                 "required":false,
                                 "type":"array",
                                 "constraint":"elements must be numeric",
                                 "description":"list of won game ids"
                              },
                              "counterValues":{
                                 "required":false,
                                 "type":"array",
                                 "constraint":"elements must be numeric",
                                 "description":"list of counter value ids"
                              },
                              "externalIds":{
                                 "required":false,
                                 "type":"array",
                                 "constraint":"elements must be numeric",
                                 "description":"list of external ids"
                              },
                              "customFields":{
                                 "required":false,
                                 "type":"object",
                                 "description":"key:value pairs as json object"
                              }
                           }
                        }
                    example: |
                        {
                            "birthDate": null,
                            "counterValues": [
                                5,
                                3
                            ],
                            "customFields": {
                                "shoes": "45",
                                "system": "Windows"
                            },
                            "email": "example@ex.pl",
                            "externalIds": [
                                3,
                                4
                            ],
                            "firstName": "Example",
                            "friends": [
                                1,
                                2,
                                3
                            ],
                            "gainedAchievements": [
                                2,
                                3
                            ],
                            "gender": "MALE",
                            "lastName": "Example",
                            "password": "Example1@",
                            "segments": [
                                1,
                                3
                            ],
                            "status": "ACTIVE",
                            "usersGroups": [
                                1,
                                2
                            ],
                            "wonGames": [
                                4,
                                5
                            ]
                        }
            responses: 
                "200": 
                    description: "Success!"
                    body: 
                        "application/json": 
                            example: "example"
                "500": 
                "400": 
        "/{userId}": 
            displayName: "User"
            uriParameters: 
                "userId": 
                    displayName: "userId"
                    type: string
                    required: true
                    repeat: false
            type: "common"
            get: 
                description: "Get one user by id."
                responses: 
                    "200": 
                        description: "Success!"
                        body: 
                            "application/json": 
                                schema: |
                                    {
                                       "$schema":"http://json-schema.org/draft-03/schema",
                                       "type":"object",
                                       "description":"A representation of a user",
                                       "properties":{
                                          "email":{
                                             "required":true,
                                             "type":"string",
                                             "constraint":"must be unique, minimum 5, maximum 200 chars",
                                             "description":"user email"
                                          },
                                          "password":{
                                             "required":false,
                                             "type":"string",
                                             "constraint":"minimum 6, maximum 15 chars, uppercase, lowercase, number, symbol @#$%.",
                                             "description":"user password"
                                          },
                                          "firstName":{
                                             "required":false,
                                             "type":"string",
                                             "constraint":"minimum 5, maximum 50 chars, can contain only alphanumeric characters",
                                             "description":"user first name"
                                          },
                                          "lastName":{
                                             "required":false,
                                             "type":"string",
                                             "constraint":"minimum 5, maximum 50 chars, can contain only alphanumeric characters",
                                             "description":"user last name"
                                          },
                                          "gender":{
                                             "required":false,
                                             "type":"string",
                                             "allowed":{
                                                "0":"UNKNOWN",
                                                "1":"MALE",
                                                "2":"FEMALE"
                                             },
                                             "default":"UNKNOWN",
                                             "description":"user gender"
                                          },
                                          "birthDate":{
                                             "required":false,
                                             "type":"string",
                                             "description":"user birth date, format: YYYY-MM-DD"
                                          },
                                          "status":{
                                             "required":false,
                                             "type":"string",
                                             "allowed":{
                                                "0":"UNACTIVE",
                                                "1":"ACTIVE",
                                                "2":"RESIGNED",
                                                "3":"BANNED"
                                             },
                                             "default":"UNACTIVE",
                                             "description":"user status"
                                          },
                                          "friends":{
                                             "required":false,
                                             "type":"array",
                                             "constraint":"elements must be numeric",
                                             "description":"list of users friends"
                                          },
                                          "usersGroups":{
                                             "required":false,
                                             "type":"array",
                                             "constraint":"elements must be numeric",
                                             "description":"list of user group ids, which user belongs to"
                                          },
                                          "segments":{
                                             "required":false,
                                             "type":"array",
                                             "constraint":"elements must be numeric",
                                             "description":"list of segment ids"
                                          },
                                          "gainedAchievements":{
                                             "required":false,
                                             "type":"array",
                                             "constraint":"elements must be numeric",
                                             "description":"list of gained achievement ids"
                                          },
                                          "wonGames":{
                                             "required":false,
                                             "type":"array",
                                             "constraint":"elements must be numeric",
                                             "description":"list of won game ids"
                                          },
                                          "counterValues":{
                                             "required":false,
                                             "type":"array",
                                             "constraint":"elements must be numeric",
                                             "description":"list of counter value ids"
                                          },
                                          "externalIds":{
                                             "required":false,
                                             "type":"array",
                                             "constraint":"elements must be numeric",
                                             "description":"list of external ids"
                                          },
                                          "customFields":{
                                             "required":false,
                                             "type":"object",
                                             "description":"key:value pairs as json object"
                                          }
                                       }
                                    }
                                example: |
                                    {
                                        "id": 1,
                                        "birthDate": null,
                                        "counterValues": [
                                            5,
                                            3
                                        ],
                                        "customFields": {
                                            "shoes": "45",
                                            "system": "Windows"
                                        },
                                        "email": "example@ex.pl",
                                        "externalIds": [
                                            3,
                                            4
                                        ],
                                        "firstName": "Example",
                                        "friends": [
                                            1,
                                            2,
                                            3
                                        ],
                                        "gainedAchievements": [
                                            2,
                                            3
                                        ],
                                        "gender": "MALE",
                                        "lastName": "Example",
                                        "segments": [
                                            1,
                                            3
                                        ],
                                        "status": "ACTIVE",
                                        "usersGroups": [
                                            1,
                                            2
                                        ],
                                        "wonGames": [
                                            4,
                                            5
                                        ],
                                        "updatedAt": 1390236382695,
                                        "createdAt": 1390236382695
                                    }
                    "500": 
                    "404": 
                    "400": 
            put: 
                description: "Update one user by id."
                body: 
                    "application/json": 
                        schema: |
                            {
                               "$schema":"http://json-schema.org/draft-03/schema",
                               "type":"object",
                               "description":"A representation of a user",
                               "properties":{
                                  "email":{
                                     "required":true,
                                     "type":"string",
                                     "constraint":"must be unique, minimum 5, maximum 200 chars",
                                     "description":"user email"
                                  },
                                  "password":{
                                     "required":false,
                                     "type":"string",
                                     "constraint":"minimum 6, maximum 15 chars, uppercase, lowercase, number, symbol @#$%.",
                                     "description":"user password"
                                  },
                                  "firstName":{
                                     "required":false,
                                     "type":"string",
                                     "constraint":"minimum 5, maximum 50 chars, can contain only alphanumeric characters",
                                     "description":"user first name"
                                  },
                                  "lastName":{
                                     "required":false,
                                     "type":"string",
                                     "constraint":"minimum 5, maximum 50 chars, can contain only alphanumeric characters",
                                     "description":"user last name"
                                  },
                                  "gender":{
                                     "required":false,
                                     "type":"string",
                                     "allowed":{
                                        "0":"UNKNOWN",
                                        "1":"MALE",
                                        "2":"FEMALE"
                                     },
                                     "default":"UNKNOWN",
                                     "description":"user gender"
                                  },
                                  "birthDate":{
                                     "required":false,
                                     "type":"string",
                                     "description":"user birth date, format: YYYY-MM-DD"
                                  },
                                  "status":{
                                     "required":false,
                                     "type":"string",
                                     "allowed":{
                                        "0":"UNACTIVE",
                                        "1":"ACTIVE",
                                        "2":"RESIGNED",
                                        "3":"BANNED"
                                     },
                                     "default":"UNACTIVE",
                                     "description":"user status"
                                  },
                                  "friends":{
                                     "required":false,
                                     "type":"array",
                                     "constraint":"elements must be numeric",
                                     "description":"list of users friends"
                                  },
                                  "usersGroups":{
                                     "required":false,
                                     "type":"array",
                                     "constraint":"elements must be numeric",
                                     "description":"list of user group ids, which user belongs to"
                                  },
                                  "segments":{
                                     "required":false,
                                     "type":"array",
                                     "constraint":"elements must be numeric",
                                     "description":"list of segment ids"
                                  },
                                  "gainedAchievements":{
                                     "required":false,
                                     "type":"array",
                                     "constraint":"elements must be numeric",
                                     "description":"list of gained achievement ids"
                                  },
                                  "wonGames":{
                                     "required":false,
                                     "type":"array",
                                     "constraint":"elements must be numeric",
                                     "description":"list of won game ids"
                                  },
                                  "counterValues":{
                                     "required":false,
                                     "type":"array",
                                     "constraint":"elements must be numeric",
                                     "description":"list of counter value ids"
                                  },
                                  "externalIds":{
                                     "required":false,
                                     "type":"array",
                                     "constraint":"elements must be numeric",
                                     "description":"list of external ids"
                                  },
                                  "customFields":{
                                     "required":false,
                                     "type":"object",
                                     "description":"key:value pairs as json object"
                                  }
                               }
                            }
                        example: |
                            {
                                "birthDate": null,
                                "counterValues": [
                                    5,
                                    3
                                ],
                                "customFields": {
                                    "shoes": "45",
                                    "system": "Windows"
                                },
                                "email": "example@ex.pl",
                                "externalIds": [
                                    3,
                                    4
                                ],
                                "firstName": "Example",
                                "friends": [
                                    1,
                                    2,
                                    3
                                ],
                                "gainedAchievements": [
                                    2,
                                    3
                                ],
                                "gender": "MALE",
                                "lastName": "Example",
                                "password": "Example1@",
                                "segments": [
                                    1,
                                    3
                                ],
                                "status": "ACTIVE",
                                "usersGroups": [
                                    1,
                                    2
                                ],
                                "wonGames": [
                                    4,
                                    5
                                ]
                            }
                responses: 
                    "200": 
                        description: "Success!"
                        body: 
                            "application/json": 
                                example: "example"
                    "500": 
                    "404": 
                    "400": 
            delete: 
                description: "Delete one user"
                responses: 
                    "200": 
                        description: "Success!"
                        body: 
                            "application/json": 
                                example: "example"
                    "500": 
                    "404": 
                    "400": 
            "/friends": 
                displayName: "UserFriends"
                type: "common"
                "/{friendId}": 
                    displayName: "UserFriend"
                    uriParameters: 
                        "friendId": 
                            displayName: "friendId"
                            type: string
                            required: true
                            repeat: false
                    type: "common"
                    put: 
                        description: "Add a friend to user."
                        responses: 
                            "200": 
                                description: "Success!"
                                body: 
                                    "application/json": 
                                        example: "example"
                            "500": 
                            "404": 
                            "400": 
                    delete: 
                        description: "Remove a friend from user."
                        responses: 
                            "200": 
                                description: "Success!"
                                body: 
                                    "application/json": 
                                        example: "example"
                            "500": 
                            "404": 
                            "400": 
            "/wongames": 
                displayName: "UserWonGames"
                type: "common"
                get: 
                    description: "Get a list of won games for a user."
                    queryParameters: 
                        "offset": 
                            description: "Number of returned items."
                            type: number
                            required: false
                            repeat: false
                        "limit": 
                            description: "Starting position."
                            type: number
                            required: false
                            repeat: false
                        "order": 
                            description: "The fields we want to order by and the type of ordering."
                            type: string
                            required: false
                            repeat: false
                            example: "id:DESC"
                        "fields": 
                            description: "The fields we want to show in our result."
                            type: string
                            required: false
                            repeat: false
                            example: "id,name,description"
                    responses: 
                        "200": 
                            description: "Success!"
                            body: 
                                "application/json": 
                                    schema: |
                                        {
                                            "$schema": "http://json-schema.org/draft-03/schema",
                                            "type": "object",
                                            "description": "A representation of a won game",
                                            "properties": {
                                                "game": {
                                                    "required": true,
                                                    "type": "number",
                                                    "description": "id of the game"
                                                },
                                                "amount": {
                                                    "default": "1",
                                                    "required": false,
                                                    "type": "number",
                                                    "description": "number of times the game was won"
                                                }
                                            }
                                        }
                                    example: |
                                        [
                                            {
                                                "id": 1,
                                                "amount": 5,
                                                "game": 1,
                                                "updatedAt": 1390236382695,
                                                "createdAt": 1390236382695
                                            }
                                        ]
                        "500": 
                        "404": 
                        "400": 
                    is: ["paginator", "ordering", "fields"]
                post: 
                    description: "Create a new won game for a user."
                    body: 
                        "application/json": 
                            schema: |
                                {
                                    "$schema": "http://json-schema.org/draft-03/schema",
                                    "type": "object",
                                    "description": "A representation of a won game",
                                    "properties": {
                                        "game": {
                                            "required": true,
                                            "type": "number",
                                            "description": "id of the game"
                                        },
                                        "amount": {
                                            "default": "1",
                                            "required": false,
                                            "type": "number",
                                            "description": "number of times the game was won"
                                        }
                                    }
                                }
                            example: |
                                {
                                    "amount": 5,
                                    "game": 1
                                }
                    responses: 
                        "200": 
                            description: "Success!"
                            body: 
                                "application/json": 
                                    example: "example"
                        "500": 
                        "400": 
                "/{wonGameId}": 
                    displayName: "UserWonGame"
                    uriParameters: 
                        "wonGameId": 
                            displayName: "wonGameId"
                            type: string
                            required: true
                            repeat: false
                    type: "common"
                    get: 
                        description: "Get one won game for a user."
                        responses: 
                            "200": 
                                description: "Success!"
                                body: 
                                    "application/json": 
                                        schema: |
                                            {
                                                "$schema": "http://json-schema.org/draft-03/schema",
                                                "type": "object",
                                                "description": "A representation of a won game",
                                                "properties": {
                                                    "game": {
                                                        "required": true,
                                                        "type": "number",
                                                        "description": "id of the game"
                                                    },
                                                    "amount": {
                                                        "default": "1",
                                                        "required": false,
                                                        "type": "number",
                                                        "description": "number of times the game was won"
                                                    }
                                                }
                                            }
                                        example: |
                                            {
                                                "id": 1,
                                                "amount": 5,
                                                "game": 1,
                                                "updatedAt": 1390236382695,
                                                "createdAt": 1390236382695
                                            }
                            "500": 
                            "404": 
                            "400": 
                    put: 
                        description: "Update one won game for a user."
                        body: 
                            "application/json": 
                                schema: |
                                    {
                                        "$schema": "http://json-schema.org/draft-03/schema",
                                        "type": "object",
                                        "description": "A representation of a won game",
                                        "properties": {
                                            "game": {
                                                "required": true,
                                                "type": "number",
                                                "description": "id of the game"
                                            },
                                            "amount": {
                                                "default": "1",
                                                "required": false,
                                                "type": "number",
                                                "description": "number of times the game was won"
                                            }
                                        }
                                    }
                                example: |
                                    {
                                        "amount": 5,
                                        "game": 1
                                    }
                        responses: 
                            "200": 
                                description: "Success!"
                                body: 
                                    "application/json": 
                                        example: "example"
                            "500": 
                            "404": 
                            "400": 
                    delete: 
                        description: "Delete one won game for a user."
                        responses: 
                            "200": 
                                description: "Success!"
                                body: 
                                    "application/json": 
                                        example: "example"
                            "500": 
                            "404": 
                            "400": 
                "/doc": 
                    displayName: "UserWonGamesDoc"
                    type: "common"
                    get: 
                        description: "Get a pseudo schema showing quickly how to make a proper json for user won game."
                        responses: 
                            "200": 
                                description: "Success!"
                                body: 
                                    "application/json": 
                                        example: |
                                            {
                                                "$schema": "http://json-schema.org/draft-03/schema",
                                                "type": "object",
                                                "description": "A representation of a won game",
                                                "properties": {
                                                    "game": {
                                                        "required": true,
                                                        "type": "number",
                                                        "description": "id of the game"
                                                    },
                                                    "amount": {
                                                        "default": "1",
                                                        "required": false,
                                                        "type": "number",
                                                        "description": "number of times the game was won"
                                                    }
                                                }
                                            }
                            "500": 
                            "404": 
                            "400": 
            "/countervalues": 
                displayName: "UserCounterValues"
                type: "common"
                get: 
                    description: "Get a list of counter values for a user."
                    queryParameters: 
                        "offset": 
                            description: "Number of returned items."
                            type: number
                            required: false
                            repeat: false
                        "limit": 
                            description: "Starting position."
                            type: number
                            required: false
                            repeat: false
                        "fields": 
                            description: "The fields we want to show in our result."
                            type: string
                            required: false
                            repeat: false
                            example: "id,name,description"
                        "order": 
                            description: "The fields we want to order by and the type of ordering."
                            type: string
                            required: false
                            repeat: false
                            example: "id:DESC"
                    responses: 
                        "200": 
                            description: "Success!"
                            body: 
                                "application/json": 
                                    schema: |
                                        {
                                           "$schema":"http://json-schema.org/draft-03/schema",
                                           "type":"object",
                                           "description":"A representation of a counter value",
                                           "properties":{
                                              "counter":{
                                                 "required":true,
                                                 "type":"number",
                                                 "constraint":"must be numeric",
                                                 "description":"id of counter"
                                              },
                                              "value":{
                                                 "required":false,
                                                 "type":"number",
                                                 "constraint":"must be numeric",
                                                 "default":"1",
                                                 "description":"value of counter"
                                              }
                                           }
                                        }
                                    example: |
                                        [
                                            {
                                                "id": 1,
                                                "counter": 1,
                                                "value": 5,
                                                "updatedAt": 1390236382695,
                                                "createdAt": 1390236382695
                                            }
                                        ]
                        "500": 
                        "404": 
                        "400": 
                    is: ["paginator", "fields", "ordering"]
                post: 
                    description: "Create a new counter value for a user."
                    body: 
                        "application/json": 
                            schema: |
                                {
                                   "$schema":"http://json-schema.org/draft-03/schema",
                                   "type":"object",
                                   "description":"A representation of a counter value",
                                   "properties":{
                                      "counter":{
                                         "required":true,
                                         "type":"number",
                                         "constraint":"must be numeric",
                                         "description":"id of counter"
                                      },
                                      "value":{
                                         "required":false,
                                         "type":"number",
                                         "constraint":"must be numeric",
                                         "default":"1",
                                         "description":"value of counter"
                                      }
                                   }
                                }
                            example: |
                                {
                                    "counter": 1,
                                    "value": 5
                                }
                    responses: 
                        "200": 
                            description: "Success!"
                            body: 
                                "application/json": 
                                    example: "example"
                        "500": 
                        "400": 
                "/{counterValueId}": 
                    displayName: "UserCounterValue"
                    uriParameters: 
                        "counterValueId": 
                            displayName: "counterValueId"
                            type: string
                            required: true
                            repeat: false
                    type: "common"
                    get: 
                        description: "Get one user counter value."
                        responses: 
                            "200": 
                                description: "Success!"
                                body: 
                                    "application/json": 
                                        schema: |
                                            {
                                               "$schema":"http://json-schema.org/draft-03/schema",
                                               "type":"object",
                                               "description":"A representation of a counter value",
                                               "properties":{
                                                  "counter":{
                                                     "required":true,
                                                     "type":"number",
                                                     "constraint":"must be numeric",
                                                     "description":"id of counter"
                                                  },
                                                  "value":{
                                                     "required":false,
                                                     "type":"number",
                                                     "constraint":"must be numeric",
                                                     "default":"1",
                                                     "description":"value of counter"
                                                  }
                                               }
                                            }
                                        example: |
                                            {
                                                "id": 1,
                                                "counter": 1,
                                                "value": 5,
                                                "updatedAt": 1390236382695,
                                                "createdAt": 1390236382695
                                            }
                            "500": 
                            "404": 
                            "400": 
                    put: 
                        description: "Update one user counter value."
                        body: 
                            "application/json": 
                                schema: |
                                    {
                                       "$schema":"http://json-schema.org/draft-03/schema",
                                       "type":"object",
                                       "description":"A representation of a counter value",
                                       "properties":{
                                          "counter":{
                                             "required":true,
                                             "type":"number",
                                             "constraint":"must be numeric",
                                             "description":"id of counter"
                                          },
                                          "value":{
                                             "required":false,
                                             "type":"number",
                                             "constraint":"must be numeric",
                                             "default":"1",
                                             "description":"value of counter"
                                          }
                                       }
                                    }
                                example: |
                                    {
                                        "counter": 1,
                                        "value": 5
                                    }
                        responses: 
                            "200": 
                                description: "Success!"
                                body: 
                                    "application/json": 
                                        example: "example"
                            "500": 
                            "404": 
                            "400": 
                    delete: 
                        description: "Delete one user counter value."
                        responses: 
                            "200": 
                                description: "Success!"
                                body: 
                                    "application/json": 
                                        example: "example"
                            "500": 
                            "404": 
                            "400": 
                "/doc": 
                    displayName: "UserCounterValueDoc"
                    type: "common"
                    get: 
                        description: "Get a schema showing how to make a proper json for user counter values."
                        responses: 
                            "200": 
                                description: "Success!"
                                body: 
                                    "application/json": 
                                        example: |
                                            {
                                               "$schema":"http://json-schema.org/draft-03/schema",
                                               "type":"object",
                                               "description":"A representation of a counter value",
                                               "properties":{
                                                  "counter":{
                                                     "required":true,
                                                     "type":"number",
                                                     "constraint":"must be numeric",
                                                     "description":"id of counter"
                                                  },
                                                  "value":{
                                                     "required":false,
                                                     "type":"number",
                                                     "constraint":"must be numeric",
                                                     "default":"1",
                                                     "description":"value of counter"
                                                  }
                                               }
                                            }
                            "500": 
                            "404": 
                            "400": 
            "/segments": 
                displayName: "UserSegments"
                type: "common"
                "/{segmentId}": 
                    displayName: "UserSegment"
                    uriParameters: 
                        "segmentId": 
                            displayName: "segmentId"
                            type: string
                            required: true
                            repeat: false
                    type: "common"
                    put: 
                        description: "Add a segment to a user."
                        responses: 
                            "200": 
                                description: "Success!"
                                body: 
                                    "application/json": 
                                        example: "example"
                            "500": 
                            "404": 
                            "400": 
                    delete: 
                        description: "Delete a segment from a user."
                        responses: 
                            "200": 
                                description: "Success!"
                                body: 
                                    "application/json": 
                                        example: "example"
                            "500": 
                            "404": 
                            "400": 
            "/externalids": 
                displayName: "UserExternalIds"
                type: "common"
                get: 
                    description: "Get a list of external ids."
                    queryParameters: 
                        "fields": 
                            description: "The fields we want to show in our result."
                            type: string
                            required: false
                            repeat: false
                            example: "id,name,description"
                        "offset": 
                            description: "Number of returned items."
                            type: number
                            required: false
                            repeat: false
                        "limit": 
                            description: "Starting position."
                            type: number
                            required: false
                            repeat: false
                        "order": 
                            description: "The fields we want to order by and the type of ordering."
                            type: string
                            required: false
                            repeat: false
                            example: "id:DESC"
                    responses: 
                        "200": 
                            description: "Success!"
                            body: 
                                "application/json": 
                                    schema: |
                                        {
                                           "$schema":"http://json-schema.org/draft-03/schema",
                                           "type":"object",
                                           "description":"A representation of an external id",
                                           "properties":{
                                              "name":{
                                                 "required":true,
                                                 "type":"string",
                                                 "constraint":"minimum 5, maximum 50 chars, alphanumeric characters and underscore",
                                                 "description":"system name of external id"
                                              },
                                              "externalId":{
                                                 "required":true,
                                                 "type":"string",
                                                 "constraint":"minimum 5, maximum 100 chars",
                                                 "description":"external id"
                                              }
                                           }
                                        }
                                    example: |
                                        [
                                            {
                                                "id": 1,
                                                "externaliId": "124234678354653542357546",
                                                "name": "fb",
                                                "updatedAt": 1390236382695,
                                                "createdAt": 1390236382695
                                            }
                                        ]
                        "500": 
                        "404": 
                        "400": 
                    is: ["fields", "paginator", "ordering"]
                post: 
                    description: "Create a new external id."
                    body: 
                        "application/json": 
                            schema: |
                                {
                                   "$schema":"http://json-schema.org/draft-03/schema",
                                   "type":"object",
                                   "description":"A representation of an external id",
                                   "properties":{
                                      "name":{
                                         "required":true,
                                         "type":"string",
                                         "constraint":"minimum 5, maximum 50 chars, alphanumeric characters and underscore",
                                         "description":"system name of external id"
                                      },
                                      "externalId":{
                                         "required":true,
                                         "type":"string",
                                         "constraint":"minimum 5, maximum 100 chars",
                                         "description":"external id"
                                      }
                                   }
                                }
                            example: |
                                {
                                    "externaliId": "124234678354653542357546",
                                    "name": "fb"
                                }
                    responses: 
                        "200": 
                            description: "Success!"
                            body: 
                                "application/json": 
                                    example: "example"
                        "500": 
                        "400": 
                "/{externalId}": 
                    displayName: "UserExternalId"
                    uriParameters: 
                        "externalId": 
                            displayName: "externalId"
                            type: string
                            required: true
                            repeat: false
                    type: "common"
                    get: 
                        description: "Get one external id for a user."
                        responses: 
                            "200": 
                                description: "Success!"
                                body: 
                                    "application/json": 
                                        schema: |
                                            {
                                               "$schema":"http://json-schema.org/draft-03/schema",
                                               "type":"object",
                                               "description":"A representation of an external id",
                                               "properties":{
                                                  "name":{
                                                     "required":true,
                                                     "type":"string",
                                                     "constraint":"minimum 5, maximum 50 chars, alphanumeric characters and underscore",
                                                     "description":"system name of external id"
                                                  },
                                                  "externalId":{
                                                     "required":true,
                                                     "type":"string",
                                                     "constraint":"minimum 5, maximum 100 chars",
                                                     "description":"external id"
                                                  }
                                               }
                                            }
                                        example: |
                                            {
                                                "id": 1,
                                                "externaliId": "124234678354653542357546",
                                                "name": "fb",
                                                "updatedAt": 1390236382695,
                                                "createdAt": 1390236382695
                                            }
                            "500": 
                            "404": 
                            "400": 
                    put: 
                        description: "Update one external id for a user."
                        body: 
                            "application/json": 
                                schema: |
                                    {
                                       "$schema":"http://json-schema.org/draft-03/schema",
                                       "type":"object",
                                       "description":"A representation of an external id",
                                       "properties":{
                                          "name":{
                                             "required":true,
                                             "type":"string",
                                             "constraint":"minimum 5, maximum 50 chars, alphanumeric characters and underscore",
                                             "description":"system name of external id"
                                          },
                                          "externalId":{
                                             "required":true,
                                             "type":"string",
                                             "constraint":"minimum 5, maximum 100 chars",
                                             "description":"external id"
                                          }
                                       }
                                    }
                                example: |
                                    {
                                        "externaliId": "124234678354653542357546",
                                        "name": "fb"
                                    }
                        responses: 
                            "200": 
                                description: "Success!"
                                body: 
                                    "application/json": 
                                        example: "example"
                            "500": 
                            "404": 
                            "400": 
                    delete: 
                        description: "Delete one external id for a user."
                        responses: 
                            "200": 
                                description: "Success!"
                                body: 
                                    "application/json": 
                                        example: "example"
                            "500": 
                            "404": 
                            "400": 
                "/doc": 
                    displayName: "UserExternalIdsDoc"
                    type: "common"
                    get: 
                        description: "Get a schema showing how to make a proper json for user external ids."
                        responses: 
                            "200": 
                                description: "Success!"
                                body: 
                                    "application/json": 
                                        schema: |
                                            {
                                                "id": 1,
                                                "externaliId": "124234678354653542357546",
                                                "name": "fb",
                                                "updatedAt": 1390236382695,
                                                "createdAt": 1390236382695
                                            }
                                        example: "example"
                            "500": 
                            "404": 
                            "400": 
            "/groups": 
                displayName: "UserGroup"
                type: "common"
                "/{groupId}": 
                    displayName: "UserGroup"
                    uriParameters: 
                        "groupId": 
                            displayName: "groupId"
                            type: string
                            required: true
                            repeat: false
                    type: "common"
                    put: 
                        description: "Add a group to user."
                        responses: 
                            "200": 
                                description: "Success!"
                                body: 
                                    "application/json": 
                                        example: "example"
                            "500": 
                            "404": 
                            "400": 
                    delete: 
                        description: "Remove a group from user."
                        responses: 
                            "200": 
                                description: "Success!"
                                body: 
                                    "application/json": 
                                        example: "example"
                            "500": 
                            "404": 
                            "400": 
            "/customfields": 
                displayName: "UserCustomFields"
                type: "common"
                get: 
                    description: "Get all existing custom fields for user."
                    responses: 
                        "200": 
                            description: "Success!"
                            body: 
                                "application/json": 
                                    schema: |
                                        {
                                            "$schema": "http://json-schema.org/draft-03/schema",
                                            "type": "object",
                                            "description": "A representation of a category",
                                            "properties": {
                                                "key": {
                                                    "required": true,
                                                    "type": "string",
                                                    "description": "Key for the key:value storage, can have any name."
                                                },
                                        		"value": {
                                        			"required": true,
                                        			"type": "string",
                                        			"description": "Value for the key:value storage, can have any name."
                                        			}
                                            }
                                        }
                                    example: |
                                        {
                                            "key1": "value1"
                                        }
                        "500": 
                        "404": 
                        "400": 
                put: 
                    description: "Update an existing custom field for user."
                    body: 
                        "application/json": 
                            schema: |
                                {
                                    "$schema": "http://json-schema.org/draft-03/schema",
                                    "type": "object",
                                    "description": "A representation of a category",
                                    "properties": {
                                        "key": {
                                            "required": true,
                                            "type": "string",
                                            "description": "Key for the key:value storage, can have any name."
                                        },
                                		"value": {
                                			"required": true,
                                			"type": "string",
                                			"description": "Value for the key:value storage, can have any name."
                                			}
                                    }
                                }
                            example: |
                                {
                                    "key1": "value1"
                                }
                    responses: 
                        "200": 
                            description: "Success!"
                            body: 
                                "application/json": 
                                    example: "example"
                        "500": 
                        "404": 
                        "400": 
                post: 
                    description: "Create a new custom field for user."
                    body: 
                        "application/json": 
                            schema: |
                                {
                                    "$schema": "http://json-schema.org/draft-03/schema",
                                    "type": "object",
                                    "description": "A representation of a category",
                                    "properties": {
                                        "key": {
                                            "required": true,
                                            "type": "string",
                                            "description": "Key for the key:value storage, can have any name."
                                        },
                                		"value": {
                                			"required": true,
                                			"type": "string",
                                			"description": "Value for the key:value storage, can have any name."
                                			}
                                    }
                                }
                            example: |
                                {
                                    "key1": "value1"
                                }
                    responses: 
                        "200": 
                            description: "Success!"
                            body: 
                                "application/json": 
                                    schema: |
                                        {
                                            "$schema": "http://json-schema.org/draft-03/schema",
                                            "type": "object",
                                            "description": "A representation of a category",
                                            "properties": {
                                                "key": {
                                                    "required": true,
                                                    "type": "string",
                                                    "description": "Key for the key:value storage, can have any name."
                                                },
                                        		"value": {
                                        			"required": true,
                                        			"type": "string",
                                        			"description": "Value for the key:value storage, can have any name."
                                        			}
                                            }
                                        }
                                    example: |
                                        {
                                            "key1": "value1"
                                        }
                        "500": 
                        "400": 
                "/{key}": 
                    displayName: "UserCustomField"
                    uriParameters: 
                        "key": 
                            displayName: "key"
                            type: string
                            required: true
                            repeat: false
                    type: "common"
                    get: 
                        description: "Get a custom field by key."
                        responses: 
                            "200": 
                                description: "Success!"
                                body: 
                                    "application/json": 
                                        schema: |
                                            {
                                                "$schema": "http://json-schema.org/draft-03/schema",
                                                "type": "object",
                                                "description": "A representation of a category",
                                                "properties": {
                                                    "key": {
                                                        "required": true,
                                                        "type": "string",
                                                        "description": "Key for the key:value storage, can have any name."
                                                    },
                                            		"value": {
                                            			"required": true,
                                            			"type": "string",
                                            			"description": "Value for the key:value storage, can have any name."
                                            			}
                                                }
                                            }
                                        example: |
                                            {
                                                "key1": "value1"
                                            }
                            "500": 
                            "404": 
                            "400": 
                    delete: 
                        description: "Delete a custom field by key."
                        responses: 
                            "200": 
                                description: "Success!"
                                body: 
                                    "application/json": 
                                        example: "example"
                            "500": 
                            "404": 
                            "400": 
            "/gainedachievements": 
                displayName: "UserGainedAchievements"
                type: "common"
                get: 
                    description: "Get a list of gained achievements for a user."
                    queryParameters: 
                        "offset": 
                            description: "Number of returned items."
                            type: number
                            required: false
                            repeat: false
                        "limit": 
                            description: "Starting position."
                            type: number
                            required: false
                            repeat: false
                        "order": 
                            description: "The fields we want to order by and the type of ordering."
                            type: string
                            required: false
                            repeat: false
                            example: "id:DESC"
                        "fields": 
                            description: "The fields we want to show in our result."
                            type: string
                            required: false
                            repeat: false
                            example: "id,name,description"
                    responses: 
                        "200": 
                            description: "Success!"
                            body: 
                                "application/json": 
                                    schema: |
                                        {
                                           "$schema":"http://json-schema.org/draft-03/schema",
                                           "type":"object",
                                           "description":"A representation of a gained achievement",
                                           "properties":{
                                              "achievement":{
                                                 "required":true,
                                                 "type":"number",
                                                 "constraint":"must be numeric",
                                                 "description":"id of achievement which has been gained"
                                              },
                                              "status":{
                                                 "required":false,
                                                 "type":"string",
                                                 "allowed":{
                                                    "0":"ACTIVE",
                                                    "1":"REVOKED"
                                                 },
                                                 "default":"ACTIVE",
                                                 "description":"status of gained achievement"
                                              },
                                              "origin":{
                                                 "required":false,
                                                 "type":"string",
                                                 "allowed":{
                                                    "0":"AUTO",
                                                    "1":"MANUAL"
                                                 },
                                                 "default":"AUTO",
                                                 "description":"origin of gained achievement"
                                              },
                                              "amount":{
                                                 "required":false,
                                                 "type":"number",
                                                 "default":"1",
                                                 "description":"number of how many times achievement has been gained"
                                              }
                                           }
                                        }
                                    example: |
                                        [
                                            {
                                                "id": 1,
                                                "achievement": 1,
                                                "amount": 5,
                                                "origin": "MANUAL",
                                                "status": "ACTIVE",
                                                "updatedAt": 1390236382695,
                                                "createdAt": 1390236382695
                                            }
                                        ]
                        "500": 
                        "404": 
                        "400": 
                    is: ["paginator", "ordering", "fields"]
                post: 
                    description: "Create a new gained achievement for a user."
                    body: 
                        "application/json": 
                            schema: |
                                {
                                   "$schema":"http://json-schema.org/draft-03/schema",
                                   "type":"object",
                                   "description":"A representation of a gained achievement",
                                   "properties":{
                                      "achievement":{
                                         "required":true,
                                         "type":"number",
                                         "constraint":"must be numeric",
                                         "description":"id of achievement which has been gained"
                                      },
                                      "status":{
                                         "required":false,
                                         "type":"string",
                                         "allowed":{
                                            "0":"ACTIVE",
                                            "1":"REVOKED"
                                         },
                                         "default":"ACTIVE",
                                         "description":"status of gained achievement"
                                      },
                                      "origin":{
                                         "required":false,
                                         "type":"string",
                                         "allowed":{
                                            "0":"AUTO",
                                            "1":"MANUAL"
                                         },
                                         "default":"AUTO",
                                         "description":"origin of gained achievement"
                                      },
                                      "amount":{
                                         "required":false,
                                         "type":"number",
                                         "default":"1",
                                         "description":"number of how many times achievement has been gained"
                                      }
                                   }
                                }
                            example: |
                                {
                                    "achievement": 1,
                                    "amount": 5,
                                    "origin": "MANUAL",
                                    "status": "ACTIVE"
                                }
                    responses: 
                        "200": 
                            description: "Success!"
                            body: 
                                "application/json": 
                                    example: "example"
                        "500": 
                        "400": 
                "/{gainedAchievementId}": 
                    displayName: "UserGainedAchievement"
                    uriParameters: 
                        "gainedAchievementId": 
                            displayName: "gainedAchievementId"
                            type: string
                            required: true
                            repeat: false
                    type: "common"
                    get: 
                        description: "Get one user gained achievement."
                        responses: 
                            "200": 
                                description: "Success!"
                                body: 
                                    "application/json": 
                                        schema: |
                                            {
                                               "$schema":"http://json-schema.org/draft-03/schema",
                                               "type":"object",
                                               "description":"A representation of a gained achievement",
                                               "properties":{
                                                  "achievement":{
                                                     "required":true,
                                                     "type":"number",
                                                     "constraint":"must be numeric",
                                                     "description":"id of achievement which has been gained"
                                                  },
                                                  "status":{
                                                     "required":false,
                                                     "type":"string",
                                                     "allowed":{
                                                        "0":"ACTIVE",
                                                        "1":"REVOKED"
                                                     },
                                                     "default":"ACTIVE",
                                                     "description":"status of gained achievement"
                                                  },
                                                  "origin":{
                                                     "required":false,
                                                     "type":"string",
                                                     "allowed":{
                                                        "0":"AUTO",
                                                        "1":"MANUAL"
                                                     },
                                                     "default":"AUTO",
                                                     "description":"origin of gained achievement"
                                                  },
                                                  "amount":{
                                                     "required":false,
                                                     "type":"number",
                                                     "default":"1",
                                                     "description":"number of how many times achievement has been gained"
                                                  }
                                               }
                                            }
                                        example: |
                                            {
                                                "id": 1,
                                                "achievement": 1,
                                                "amount": 5,
                                                "origin": "MANUAL",
                                                "status": "ACTIVE",
                                                "updatedAt": 1390236382695,
                                                "createdAt": 1390236382695
                                            }
                            "500": 
                            "404": 
                            "400": 
                    put: 
                        description: "Update one user gained achievement."
                        body: 
                            "application/json": 
                                schema: |
                                    {
                                       "$schema":"http://json-schema.org/draft-03/schema",
                                       "type":"object",
                                       "description":"A representation of a gained achievement",
                                       "properties":{
                                          "achievement":{
                                             "required":true,
                                             "type":"number",
                                             "constraint":"must be numeric",
                                             "description":"id of achievement which has been gained"
                                          },
                                          "status":{
                                             "required":false,
                                             "type":"string",
                                             "allowed":{
                                                "0":"ACTIVE",
                                                "1":"REVOKED"
                                             },
                                             "default":"ACTIVE",
                                             "description":"status of gained achievement"
                                          },
                                          "origin":{
                                             "required":false,
                                             "type":"string",
                                             "allowed":{
                                                "0":"AUTO",
                                                "1":"MANUAL"
                                             },
                                             "default":"AUTO",
                                             "description":"origin of gained achievement"
                                          },
                                          "amount":{
                                             "required":false,
                                             "type":"number",
                                             "default":"1",
                                             "description":"number of how many times achievement has been gained"
                                          }
                                       }
                                    }
                                example: |
                                    {
                                        "achievement": 1,
                                        "amount": 5,
                                        "origin": "MANUAL",
                                        "status": "ACTIVE"
                                    }
                        responses: 
                            "200": 
                                description: "Success!"
                                body: 
                                    "application/json": 
                                        example: "example"
                            "500": 
                            "404": 
                            "400": 
                    delete: 
                        description: "Update one user gained achievement."
                        responses: 
                            "200": 
                                description: "Success!"
                                body: 
                                    "application/json": 
                                        example: "example"
                            "500": 
                            "404": 
                            "400": 
                "/doc": 
                    displayName: "UserGainedAchievementsDoc"
                    type: "common"
                    get: 
                        description: "Get a schema showing how to make a proper json for user gained achievement."
                        responses: 
                            "200": 
                                description: "Success!"
                                body: 
                                    "application/json": 
                                        example: |
                                            {
                                               "$schema":"http://json-schema.org/draft-03/schema",
                                               "type":"object",
                                               "description":"A representation of a gained achievement",
                                               "properties":{
                                                  "achievement":{
                                                     "required":true,
                                                     "type":"number",
                                                     "constraint":"must be numeric",
                                                     "description":"id of achievement which has been gained"
                                                  },
                                                  "status":{
                                                     "required":false,
                                                     "type":"string",
                                                     "allowed":{
                                                        "0":"ACTIVE",
                                                        "1":"REVOKED"
                                                     },
                                                     "default":"ACTIVE",
                                                     "description":"status of gained achievement"
                                                  },
                                                  "origin":{
                                                     "required":false,
                                                     "type":"string",
                                                     "allowed":{
                                                        "0":"AUTO",
                                                        "1":"MANUAL"
                                                     },
                                                     "default":"AUTO",
                                                     "description":"origin of gained achievement"
                                                  },
                                                  "amount":{
                                                     "required":false,
                                                     "type":"number",
                                                     "default":"1",
                                                     "description":"number of how many times achievement has been gained"
                                                  }
                                               }
                                            }
                            "500": 
                            "404": 
                            "400": 
        "/groups": 
            displayName: "UserGroups"
            type: "common"
            get: 
                description: "Get a list of user groups."
                queryParameters: 
                    "fields": 
                        description: "The fields we want to show in our result."
                        type: string
                        required: false
                        repeat: false
                        example: "id,name,description"
                    "offset": 
                        description: "Number of returned items."
                        type: number
                        required: false
                        repeat: false
                    "limit": 
                        description: "Starting position."
                        type: number
                        required: false
                        repeat: false
                    "order": 
                        description: "The fields we want to order by and the type of ordering."
                        type: string
                        required: false
                        repeat: false
                        example: "id:DESC"
                    "segments": 
                        description: "The segments we want to narrow down our search to."
                        type: string
                        required: false
                        repeat: false
                        example: "1,2,4,5"
                responses: 
                    "200": 
                        description: "Success!"
                        body: 
                            "application/json": 
                                schema: |
                                    {
                                       "$schema":"http://json-schema.org/draft-03/schema",
                                       "type":"object",
                                       "description":"A representation of a user group",
                                       "properties":{
                                          "name":{
                                             "required":true,
                                             "type":"string",
                                             "constraint":"must be unique, minimum 5, maximum 50 chars, alphanumeric characters and underscore",
                                             "description":"system name of user group"
                                          },
                                          "label":{
                                             "required":true,
                                             "type":"string",
                                             "constraint":"must be unique, minimum 5, maximum 100 chars",
                                             "description":"label of user group"
                                          },
                                          "users":{
                                             "required":false,
                                             "type":"array",
                                             "constraint":"elements must be numeric",
                                             "description":"list of user ids, that belong to this group"
                                          },
                                          "segments":{
                                             "required":false,
                                             "type":"array",
                                             "constraint":"elements must be numeric",
                                             "description":"list of segment ids"
                                          },
                                          "gainedAchievements":{
                                             "required":false,
                                             "type":"array",
                                             "constraint":"elements must be numeric",
                                             "description":"list of gained achievement ids"
                                          },
                                          "wonGames":{
                                             "required":false,
                                             "type":"array",
                                             "constraint":"elements must be numeric",
                                             "description":"list of won game ids"
                                          },
                                          "counterValues":{
                                             "required":false,
                                             "type":"array",
                                             "constraint":"elements must be numeric",
                                             "description":"list of counter value ids"
                                          },
                                          "externalIds":{
                                             "required":false,
                                             "type":"array",
                                             "constraint":"elements must be numeric",
                                             "description":"list of external ids"
                                          },
                                          "customFields":{
                                             "required":false,
                                             "type":"object",
                                             "description":"key:value pairs as json object"
                                          }
                                       }
                                    }
                                example: |
                                    [
                                        {
                                            "id": 1,
                                            "counterValues": [
                                                5,
                                                3
                                            ],
                                            "customFields": {
                                                "key2": "value2",
                                                "key1": "value1"
                                            },
                                            "externalIds": [
                                                3,
                                                4
                                            ],
                                            "gainedAchievements": [
                                                2,
                                                3
                                            ],
                                            "name": "Example",
                                            "segments": [
                                                1,
                                                3
                                            ],
                                            "users": [
                                                1,
                                                2,
                                                3
                                            ],
                                            "wonGames": [
                                                4,
                                                5
                                            ],
                                            "updatedAt": 1390236382695,
                                            "createdAt": 1390236382695
                                        }
                                    ]
                    "500": 
                    "404": 
                    "400": 
                is: ["fields", "paginator", "ordering", "segments"]
            post: 
                description: "Add a user group."
                body: 
                    "application/json": 
                        schema: |
                            {
                               "$schema":"http://json-schema.org/draft-03/schema",
                               "type":"object",
                               "description":"A representation of a user group",
                               "properties":{
                                  "name":{
                                     "required":true,
                                     "type":"string",
                                     "constraint":"must be unique, minimum 5, maximum 50 chars, alphanumeric characters and underscore",
                                     "description":"system name of user group"
                                  },
                                  "label":{
                                     "required":true,
                                     "type":"string",
                                     "constraint":"must be unique, minimum 5, maximum 100 chars",
                                     "description":"label of user group"
                                  },
                                  "users":{
                                     "required":false,
                                     "type":"array",
                                     "constraint":"elements must be numeric",
                                     "description":"list of user ids, that belong to this group"
                                  },
                                  "segments":{
                                     "required":false,
                                     "type":"array",
                                     "constraint":"elements must be numeric",
                                     "description":"list of segment ids"
                                  },
                                  "gainedAchievements":{
                                     "required":false,
                                     "type":"array",
                                     "constraint":"elements must be numeric",
                                     "description":"list of gained achievement ids"
                                  },
                                  "wonGames":{
                                     "required":false,
                                     "type":"array",
                                     "constraint":"elements must be numeric",
                                     "description":"list of won game ids"
                                  },
                                  "counterValues":{
                                     "required":false,
                                     "type":"array",
                                     "constraint":"elements must be numeric",
                                     "description":"list of counter value ids"
                                  },
                                  "externalIds":{
                                     "required":false,
                                     "type":"array",
                                     "constraint":"elements must be numeric",
                                     "description":"list of external ids"
                                  },
                                  "customFields":{
                                     "required":false,
                                     "type":"object",
                                     "description":"key:value pairs as json object"
                                  }
                               }
                            }
                        example: |
                            {
                                "counterValues": [
                                    5,
                                    3
                                ],
                                "customFields": {
                                    "key2": "value2",
                                    "key1": "value1"
                                },
                                "externalIds": [
                                    3,
                                    4
                                ],
                                "gainedAchievements": [
                                    2,
                                    3
                                ],
                                "name": "Example",
                                "segments": [
                                    1,
                                    3
                                ],
                                "users": [
                                    1,
                                    2,
                                    3
                                ],
                                "wonGames": [
                                    4,
                                    5
                                ]
                            }
                responses: 
                    "200": 
                        description: "Success!"
                        body: 
                            "application/json": 
                                example: "example"
                    "500": 
                    "400": 
            "/{userGroupId}": 
                displayName: "UserGroup"
                uriParameters: 
                    "userGroupId": 
                        displayName: "userGroupId"
                        type: string
                        required: true
                        repeat: false
                type: "common"
                get: 
                    description: "Get a user group."
                    responses: 
                        "200": 
                            description: "Success!"
                            body: 
                                "application/json": 
                                    schema: |
                                        {
                                           "$schema":"http://json-schema.org/draft-03/schema",
                                           "type":"object",
                                           "description":"A representation of a user group",
                                           "properties":{
                                              "name":{
                                                 "required":true,
                                                 "type":"string",
                                                 "constraint":"must be unique, minimum 5, maximum 50 chars, alphanumeric characters and underscore",
                                                 "description":"system name of user group"
                                              },
                                              "label":{
                                                 "required":true,
                                                 "type":"string",
                                                 "constraint":"must be unique, minimum 5, maximum 100 chars",
                                                 "description":"label of user group"
                                              },
                                              "users":{
                                                 "required":false,
                                                 "type":"array",
                                                 "constraint":"elements must be numeric",
                                                 "description":"list of user ids, that belong to this group"
                                              },
                                              "segments":{
                                                 "required":false,
                                                 "type":"array",
                                                 "constraint":"elements must be numeric",
                                                 "description":"list of segment ids"
                                              },
                                              "gainedAchievements":{
                                                 "required":false,
                                                 "type":"array",
                                                 "constraint":"elements must be numeric",
                                                 "description":"list of gained achievement ids"
                                              },
                                              "wonGames":{
                                                 "required":false,
                                                 "type":"array",
                                                 "constraint":"elements must be numeric",
                                                 "description":"list of won game ids"
                                              },
                                              "counterValues":{
                                                 "required":false,
                                                 "type":"array",
                                                 "constraint":"elements must be numeric",
                                                 "description":"list of counter value ids"
                                              },
                                              "externalIds":{
                                                 "required":false,
                                                 "type":"array",
                                                 "constraint":"elements must be numeric",
                                                 "description":"list of external ids"
                                              },
                                              "customFields":{
                                                 "required":false,
                                                 "type":"object",
                                                 "description":"key:value pairs as json object"
                                              }
                                           }
                                        }
                                    example: |
                                        {
                                            "id": 1,
                                            "counterValues": [
                                                5,
                                                3
                                            ],
                                            "customFields": {
                                                "key2": "value2",
                                                "key1": "value1"
                                            },
                                            "externalIds": [
                                                3,
                                                4
                                            ],
                                            "gainedAchievements": [
                                                2,
                                                3
                                            ],
                                            "name": "Example",
                                            "segments": [
                                                1,
                                                3
                                            ],
                                            "users": [
                                                1,
                                                2,
                                                3
                                            ],
                                            "wonGames": [
                                                4,
                                                5
                                            ],
                                            "updatedAt": 1390236382695,
                                            "createdAt": 1390236382695
                                        }
                        "500": 
                        "404": 
                        "400": 
                put: 
                    description: "Update a user group."
                    body: 
                        "application/json": 
                            schema: |
                                {
                                   "$schema":"http://json-schema.org/draft-03/schema",
                                   "type":"object",
                                   "description":"A representation of a user group",
                                   "properties":{
                                      "name":{
                                         "required":true,
                                         "type":"string",
                                         "constraint":"must be unique, minimum 5, maximum 50 chars, alphanumeric characters and underscore",
                                         "description":"system name of user group"
                                      },
                                      "label":{
                                         "required":true,
                                         "type":"string",
                                         "constraint":"must be unique, minimum 5, maximum 100 chars",
                                         "description":"label of user group"
                                      },
                                      "users":{
                                         "required":false,
                                         "type":"array",
                                         "constraint":"elements must be numeric",
                                         "description":"list of user ids, that belong to this group"
                                      },
                                      "segments":{
                                         "required":false,
                                         "type":"array",
                                         "constraint":"elements must be numeric",
                                         "description":"list of segment ids"
                                      },
                                      "gainedAchievements":{
                                         "required":false,
                                         "type":"array",
                                         "constraint":"elements must be numeric",
                                         "description":"list of gained achievement ids"
                                      },
                                      "wonGames":{
                                         "required":false,
                                         "type":"array",
                                         "constraint":"elements must be numeric",
                                         "description":"list of won game ids"
                                      },
                                      "counterValues":{
                                         "required":false,
                                         "type":"array",
                                         "constraint":"elements must be numeric",
                                         "description":"list of counter value ids"
                                      },
                                      "externalIds":{
                                         "required":false,
                                         "type":"array",
                                         "constraint":"elements must be numeric",
                                         "description":"list of external ids"
                                      },
                                      "customFields":{
                                         "required":false,
                                         "type":"object",
                                         "description":"key:value pairs as json object"
                                      }
                                   }
                                }
                            example: |
                                {
                                    "counterValues": [
                                        5,
                                        3
                                    ],
                                    "customFields": {
                                        "key2": "value2",
                                        "key1": "value1"
                                    },
                                    "externalIds": [
                                        3,
                                        4
                                    ],
                                    "gainedAchievements": [
                                        2,
                                        3
                                    ],
                                    "name": "Example",
                                    "segments": [
                                        1,
                                        3
                                    ],
                                    "users": [
                                        1,
                                        2,
                                        3
                                    ],
                                    "wonGames": [
                                        4,
                                        5
                                    ]
                                }
                    responses: 
                        "200": 
                            description: "Success!"
                            body: 
                                "application/json": 
                                    example: "example"
                        "500": 
                        "404": 
                        "400": 
                delete: 
                    description: "Delete a user group."
                    responses: 
                        "200": 
                            description: "Success!"
                            body: 
                                "application/json": 
                                    example: "example"
                        "500": 
                        "404": 
                        "400": 
                "/wongames": 
                    displayName: "UserGroupWonGames"
                    type: "common"
                    get: 
                        description: "Get a list of user group won games."
                        queryParameters: 
                            "fields": 
                                description: "The fields we want to show in our result."
                                type: string
                                required: false
                                repeat: false
                                example: "id,name,description"
                            "offset": 
                                description: "Number of returned items."
                                type: number
                                required: false
                                repeat: false
                            "limit": 
                                description: "Starting position."
                                type: number
                                required: false
                                repeat: false
                            "order": 
                                description: "The fields we want to order by and the type of ordering."
                                type: string
                                required: false
                                repeat: false
                                example: "id:DESC"
                        responses: 
                            "200": 
                                description: "Success!"
                                body: 
                                    "application/json": 
                                        schema: |
                                            {
                                                "$schema": "http://json-schema.org/draft-03/schema",
                                                "type": "object",
                                                "description": "A representation of a won game",
                                                "properties": {
                                                    "game": {
                                                        "required": true,
                                                        "type": "number",
                                                        "description": "id of the game"
                                                    },
                                                    "amount": {
                                                        "default": "1",
                                                        "required": false,
                                                        "type": "number",
                                                        "description": "number of times the game was won"
                                                    }
                                                }
                                            }
                                        example: |
                                            [
                                                {
                                                    "id": 1,
                                                    "amount": 5,
                                                    "game": 1,
                                                    "updatedAt": 1390236382695,
                                                    "createdAt": 1390236382695
                                                }
                                            ]
                            "500": 
                            "404": 
                            "400": 
                        is: ["fields", "paginator", "ordering"]
                    post: 
                        description: "Create a won game for user group."
                        body: 
                            "application/json": 
                                schema: |
                                    {
                                        "$schema": "http://json-schema.org/draft-03/schema",
                                        "type": "object",
                                        "description": "A representation of a won game",
                                        "properties": {
                                            "game": {
                                                "required": true,
                                                "type": "number",
                                                "description": "id of the game"
                                            },
                                            "amount": {
                                                "default": "1",
                                                "required": false,
                                                "type": "number",
                                                "description": "number of times the game was won"
                                            }
                                        }
                                    }
                                example: |
                                    {
                                        "amount": 5,
                                        "game": 1
                                    }
                        responses: 
                            "200": 
                                description: "Success!"
                                body: 
                                    "application/json": 
                                        example: "example"
                            "500": 
                            "400": 
                    "/{wonGameId}": 
                        displayName: "UserGroupWonGame"
                        uriParameters: 
                            "wonGameId": 
                                displayName: "wonGameId"
                                type: string
                                required: true
                                repeat: false
                        type: "common"
                        get: 
                            description: "Get a won game for user group by id."
                            responses: 
                                "200": 
                                    description: "Success!"
                                    body: 
                                        "application/json": 
                                            schema: |
                                                {
                                                    "$schema": "http://json-schema.org/draft-03/schema",
                                                    "type": "object",
                                                    "description": "A representation of a won game",
                                                    "properties": {
                                                        "game": {
                                                            "required": true,
                                                            "type": "number",
                                                            "description": "id of the game"
                                                        },
                                                        "amount": {
                                                            "default": "1",
                                                            "required": false,
                                                            "type": "number",
                                                            "description": "number of times the game was won"
                                                        }
                                                    }
                                                }
                                            example: |
                                                {
                                                    "id": 1,
                                                    "amount": 5,
                                                    "game": 1,
                                                    "updatedAt": 1390236382695,
                                                    "createdAt": 1390236382695
                                                }
                                "500": 
                                "404": 
                                "400": 
                        put: 
                            description: "Update a won game for user group by id."
                            body: 
                                "application/json": 
                                    schema: |
                                        {
                                            "$schema": "http://json-schema.org/draft-03/schema",
                                            "type": "object",
                                            "description": "A representation of a won game",
                                            "properties": {
                                                "game": {
                                                    "required": true,
                                                    "type": "number",
                                                    "description": "id of the game"
                                                },
                                                "amount": {
                                                    "default": "1",
                                                    "required": false,
                                                    "type": "number",
                                                    "description": "number of times the game was won"
                                                }
                                            }
                                        }
                                    example: |
                                        {
                                            "amount": 5,
                                            "game": 1
                                        }
                            responses: 
                                "200": 
                                    description: "Success!"
                                    body: 
                                        "application/json": 
                                            example: "example"
                                "500": 
                                "404": 
                                "400": 
                        delete: 
                            description: "Delete a won game for user group by id."
                            responses: 
                                "200": 
                                    description: "Success!"
                                    body: 
                                        "application/json": 
                                            example: "example"
                                "500": 
                                "404": 
                                "400": 
                    "/doc": 
                        displayName: "UserGroupWonGameDoc"
                        type: "common"
                        get: 
                            description: "Get a schema showing how to make a proper json for user group won games."
                            responses: 
                                "200": 
                                    description: "Success!"
                                    body: 
                                        "application/json": 
                                            schema: |
                                                {
                                                    "id": 1,
                                                    "amount": 5,
                                                    "game": 1,
                                                    "updatedAt": 1390236382695,
                                                    "createdAt": 1390236382695
                                                }
                                            example: "example"
                                "500": 
                                "404": 
                                "400": 
                "/countervalues": 
                    displayName: "UserGroupCounterValues"
                    type: "common"
                    get: 
                        description: "Get a list of counter values fro a user group."
                        queryParameters: 
                            "fields": 
                                description: "The fields we want to show in our result."
                                type: string
                                required: false
                                repeat: false
                                example: "id,name,description"
                            "offset": 
                                description: "Number of returned items."
                                type: number
                                required: false
                                repeat: false
                            "limit": 
                                description: "Starting position."
                                type: number
                                required: false
                                repeat: false
                            "order": 
                                description: "The fields we want to order by and the type of ordering."
                                type: string
                                required: false
                                repeat: false
                                example: "id:DESC"
                        responses: 
                            "200": 
                                description: "Success!"
                                body: 
                                    "application/json": 
                                        schema: |
                                            {
                                               "$schema":"http://json-schema.org/draft-03/schema",
                                               "type":"object",
                                               "description":"A representation of a counter value",
                                               "properties":{
                                                  "counter":{
                                                     "required":true,
                                                     "type":"number",
                                                     "constraint":"must be numeric",
                                                     "description":"id of counter"
                                                  },
                                                  "value":{
                                                     "required":false,
                                                     "type":"number",
                                                     "constraint":"must be numeric",
                                                     "default":"1",
                                                     "description":"value of counter"
                                                  }
                                               }
                                            }
                                        example: |
                                            [
                                                {
                                                    "id": 1,
                                                    "counter": 1,
                                                    "value": 5,
                                                    "updatedAt": 1390236382695,
                                                    "createdAt": 1390236382695
                                                }
                                            ]
                            "500": 
                            "404": 
                            "400": 
                        is: ["fields", "paginator", "ordering"]
                    post: 
                        description: "Create a new counter value."
                        body: 
                            "application/json": 
                                schema: |
                                    {
                                       "$schema":"http://json-schema.org/draft-03/schema",
                                       "type":"object",
                                       "description":"A representation of a counter value",
                                       "properties":{
                                          "counter":{
                                             "required":true,
                                             "type":"number",
                                             "constraint":"must be numeric",
                                             "description":"id of counter"
                                          },
                                          "value":{
                                             "required":false,
                                             "type":"number",
                                             "constraint":"must be numeric",
                                             "default":"1",
                                             "description":"value of counter"
                                          }
                                       }
                                    }
                                example: |
                                    {
                                        "counter": 1,
                                        "value": 5
                                    }
                        responses: 
                            "200": 
                                description: "Success!"
                                body: 
                                    "application/json": 
                                        example: "example"
                            "500": 
                            "400": 
                    "/{counterValueId}": 
                        displayName: "UserGroupCounterValue"
                        uriParameters: 
                            "counterValueId": 
                                displayName: "counterValueId"
                                type: string
                                required: true
                                repeat: false
                        type: "common"
                        get: 
                            description: "Get one counter value for a user group."
                            responses: 
                                "200": 
                                    description: "Success!"
                                    body: 
                                        "application/json": 
                                            schema: |
                                                {
                                                   "$schema":"http://json-schema.org/draft-03/schema",
                                                   "type":"object",
                                                   "description":"A representation of a counter value",
                                                   "properties":{
                                                      "counter":{
                                                         "required":true,
                                                         "type":"number",
                                                         "constraint":"must be numeric",
                                                         "description":"id of counter"
                                                      },
                                                      "value":{
                                                         "required":false,
                                                         "type":"number",
                                                         "constraint":"must be numeric",
                                                         "default":"1",
                                                         "description":"value of counter"
                                                      }
                                                   }
                                                }
                                            example: |
                                                {
                                                    "id": 1,
                                                    "counter": 1,
                                                    "value": 5,
                                                    "updatedAt": 1390236382695,
                                                    "createdAt": 1390236382695
                                                }
                                "500": 
                                "404": 
                                "400": 
                        put: 
                            description: "Update one counter value for a user group."
                            body: 
                                "application/json": 
                                    schema: |
                                        {
                                           "$schema":"http://json-schema.org/draft-03/schema",
                                           "type":"object",
                                           "description":"A representation of a counter value",
                                           "properties":{
                                              "counter":{
                                                 "required":true,
                                                 "type":"number",
                                                 "constraint":"must be numeric",
                                                 "description":"id of counter"
                                              },
                                              "value":{
                                                 "required":false,
                                                 "type":"number",
                                                 "constraint":"must be numeric",
                                                 "default":"1",
                                                 "description":"value of counter"
                                              }
                                           }
                                        }
                                    example: |
                                        {
                                            "counter": 1,
                                            "value": 5
                                        }
                            responses: 
                                "200": 
                                    description: "Success!"
                                    body: 
                                        "application/json": 
                                            example: "example"
                                "500": 
                                "404": 
                                "400": 
                        delete: 
                            description: "Remove one counter value from a user group."
                            responses: 
                                "200": 
                                    description: "Success!"
                                    body: 
                                        "application/json": 
                                            example: "example"
                                "500": 
                                "404": 
                                "400": 
                    "/doc": 
                        displayName: "UserGroupCounterValueDoc"
                        type: "common"
                        get: 
                            description: "Get a schema showing how to make a proper json for user group counter value."
                            responses: 
                                "200": 
                                    description: "Success!"
                                    body: 
                                        "application/json": 
                                            example: |
                                                {
                                                   "$schema":"http://json-schema.org/draft-03/schema",
                                                   "type":"object",
                                                   "description":"A representation of a counter value",
                                                   "properties":{
                                                      "counter":{
                                                         "required":true,
                                                         "type":"number",
                                                         "constraint":"must be numeric",
                                                         "description":"id of counter"
                                                      },
                                                      "value":{
                                                         "required":false,
                                                         "type":"number",
                                                         "constraint":"must be numeric",
                                                         "default":"1",
                                                         "description":"value of counter"
                                                      }
                                                   }
                                                }
                                "500": 
                                "404": 
                                "400": 
                "/segments": 
                    displayName: "UserGroupSegments"
                    type: "common"
                    "/{segmentId}": 
                        displayName: "UserGroupSegment"
                        uriParameters: 
                            "segmentId": 
                                displayName: "segmentId"
                                type: string
                                required: true
                                repeat: false
                        type: "common"
                        put: 
                            description: "Add a segment to a user group."
                            responses: 
                                "200": 
                                    description: "Success!"
                                    body: 
                                        "application/json": 
                                            example: "example"
                                "500": 
                                "404": 
                                "400": 
                        delete: 
                            description: "Remove a segment from a user group."
                            responses: 
                                "200": 
                                    description: "Success!"
                                    body: 
                                        "application/json": 
                                            example: "example"
                                "500": 
                                "404": 
                                "400": 
                "/externalids": 
                    displayName: "UserGroupExternalIds"
                    type: "common"
                    get: 
                        description: "Get a list of external ids."
                        queryParameters: 
                            "fields": 
                                description: "The fields we want to show in our result."
                                type: string
                                required: false
                                repeat: false
                                example: "id,name,description"
                            "order": 
                                description: "The fields we want to order by and the type of ordering."
                                type: string
                                required: false
                                repeat: false
                                example: "id:DESC"
                            "offset": 
                                description: "Number of returned items."
                                type: number
                                required: false
                                repeat: false
                            "limit": 
                                description: "Starting position."
                                type: number
                                required: false
                                repeat: false
                        responses: 
                            "200": 
                                description: "Success!"
                                body: 
                                    "application/json": 
                                        schema: |
                                            {
                                               "$schema":"http://json-schema.org/draft-03/schema",
                                               "type":"object",
                                               "description":"A representation of an external id",
                                               "properties":{
                                                  "name":{
                                                     "required":true,
                                                     "type":"string",
                                                     "constraint":"minimum 5, maximum 50 chars, alphanumeric characters and underscore",
                                                     "description":"system name of external id"
                                                  },
                                                  "externalId":{
                                                     "required":true,
                                                     "type":"string",
                                                     "constraint":"minimum 5, maximum 100 chars",
                                                     "description":"external id"
                                                  }
                                               }
                                            }
                                        example: |
                                            [
                                                {
                                                    "id": 1,
                                                    "externaliId": "124234678354653542357546",
                                                    "name": "fb",
                                                    "updatedAt": 1390236382695,
                                                    "createdAt": 1390236382695
                                                }
                                            ]
                            "500": 
                            "404": 
                            "400": 
                        is: ["fields", "ordering", "paginator"]
                    post: 
                        description: "Add an external group id."
                        body: 
                            "application/json": 
                                schema: |
                                    {
                                       "$schema":"http://json-schema.org/draft-03/schema",
                                       "type":"object",
                                       "description":"A representation of an external id",
                                       "properties":{
                                          "name":{
                                             "required":true,
                                             "type":"string",
                                             "constraint":"minimum 5, maximum 50 chars, alphanumeric characters and underscore",
                                             "description":"system name of external id"
                                          },
                                          "externalId":{
                                             "required":true,
                                             "type":"string",
                                             "constraint":"minimum 5, maximum 100 chars",
                                             "description":"external id"
                                          }
                                       }
                                    }
                                example: |
                                    {
                                        "externaliId": "124234678354653542357546",
                                        "name": "fb"
                                    }
                        responses: 
                            "200": 
                                description: "Success!"
                                body: 
                                    "application/json": 
                                        example: "example"
                            "500": 
                            "400": 
                    "/{externalId}": 
                        displayName: "UserGroupExternalId"
                        uriParameters: 
                            "externalId": 
                                displayName: "externalId"
                                type: string
                                required: true
                                repeat: false
                        type: "common"
                        get: 
                            description: "Get an external group id."
                            responses: 
                                "200": 
                                    description: "Success!"
                                    body: 
                                        "application/json": 
                                            schema: |
                                                {
                                                   "$schema":"http://json-schema.org/draft-03/schema",
                                                   "type":"object",
                                                   "description":"A representation of an external id",
                                                   "properties":{
                                                      "name":{
                                                         "required":true,
                                                         "type":"string",
                                                         "constraint":"minimum 5, maximum 50 chars, alphanumeric characters and underscore",
                                                         "description":"system name of external id"
                                                      },
                                                      "externalId":{
                                                         "required":true,
                                                         "type":"string",
                                                         "constraint":"minimum 5, maximum 100 chars",
                                                         "description":"external id"
                                                      }
                                                   }
                                                }
                                            example: |
                                                {
                                                    "id": 1,
                                                    "externaliId": "124234678354653542357546",
                                                    "name": "fb",
                                                    "updatedAt": 1390236382695,
                                                    "createdAt": 1390236382695
                                                }
                                "500": 
                                "404": 
                                "400": 
                        put: 
                            description: "Update an external group id."
                            body: 
                                "application/json": 
                                    schema: |
                                        {
                                           "$schema":"http://json-schema.org/draft-03/schema",
                                           "type":"object",
                                           "description":"A representation of an external id",
                                           "properties":{
                                              "name":{
                                                 "required":true,
                                                 "type":"string",
                                                 "constraint":"minimum 5, maximum 50 chars, alphanumeric characters and underscore",
                                                 "description":"system name of external id"
                                              },
                                              "externalId":{
                                                 "required":true,
                                                 "type":"string",
                                                 "constraint":"minimum 5, maximum 100 chars",
                                                 "description":"external id"
                                              }
                                           }
                                        }
                                    example: |
                                        {
                                            "externaliId": "124234678354653542357546",
                                            "name": "fb"
                                        }
                            responses: 
                                "200": 
                                    description: "Success!"
                                    body: 
                                        "application/json": 
                                            example: "example"
                                "500": 
                                "404": 
                                "400": 
                        delete: 
                            description: "Remove an external group id."
                            responses: 
                                "200": 
                                    description: "Success!"
                                    body: 
                                        "application/json": 
                                            example: "example"
                                "500": 
                                "404": 
                                "400": 
                    "/doc": 
                        displayName: "UserGroupExternalIdsDocs"
                        type: "common"
                        get: 
                            description: "Get a schema showing how to make a proper json for user group external ids."
                            responses: 
                                "200": 
                                    description: "Success!"
                                    body: 
                                        "application/json": 
                                            example: |
                                                {
                                                   "$schema":"http://json-schema.org/draft-03/schema",
                                                   "type":"object",
                                                   "description":"A representation of an external id",
                                                   "properties":{
                                                      "name":{
                                                         "required":true,
                                                         "type":"string",
                                                         "constraint":"minimum 5, maximum 50 chars, alphanumeric characters and underscore",
                                                         "description":"system name of external id"
                                                      },
                                                      "externalId":{
                                                         "required":true,
                                                         "type":"string",
                                                         "constraint":"minimum 5, maximum 100 chars",
                                                         "description":"external id"
                                                      }
                                                   }
                                                }
                                "500": 
                                "404": 
                                "400": 
                "/users": 
                    displayName: "UserGroupFriends"
                    type: "common"
                    "/{friendId}": 
                        displayName: "UserGroupFriend"
                        uriParameters: 
                            "friendId": 
                                displayName: "friendId"
                                type: string
                                required: true
                                repeat: false
                        type: "common"
                        put: 
                            description: "Add a user to user group."
                            responses: 
                                "200": 
                                    description: "Success!"
                                    body: 
                                        "application/json": 
                                            example: "example"
                                "500": 
                                "404": 
                                "400": 
                        delete: 
                            description: "Delete a user from user group."
                            responses: 
                                "200": 
                                    description: "Success!"
                                    body: 
                                        "application/json": 
                                            example: "example"
                                "500": 
                                "404": 
                                "400": 
                "/gainedachievements": 
                    displayName: "UserGroupGainedAchievements"
                    type: "common"
                    get: 
                        description: "Get a list of gained achievements for a group."
                        queryParameters: 
                            "fields": 
                                description: "The fields we want to show in our result."
                                type: string
                                required: false
                                repeat: false
                                example: "id,name,description"
                            "offset": 
                                description: "Number of returned items."
                                type: number
                                required: false
                                repeat: false
                            "limit": 
                                description: "Starting position."
                                type: number
                                required: false
                                repeat: false
                            "order": 
                                description: "The fields we want to order by and the type of ordering."
                                type: string
                                required: false
                                repeat: false
                                example: "id:DESC"
                        responses: 
                            "200": 
                                description: "Success!"
                                body: 
                                    "application/json": 
                                        schema: |
                                            {
                                               "$schema":"http://json-schema.org/draft-03/schema",
                                               "type":"object",
                                               "description":"A representation of a gained achievement",
                                               "properties":{
                                                  "achievement":{
                                                     "required":true,
                                                     "type":"number",
                                                     "constraint":"must be numeric",
                                                     "description":"id of achievement which has been gained"
                                                  },
                                                  "status":{
                                                     "required":false,
                                                     "type":"string",
                                                     "allowed":{
                                                        "0":"ACTIVE",
                                                        "1":"REVOKED"
                                                     },
                                                     "default":"ACTIVE",
                                                     "description":"status of gained achievement"
                                                  },
                                                  "origin":{
                                                     "required":false,
                                                     "type":"string",
                                                     "allowed":{
                                                        "0":"AUTO",
                                                        "1":"MANUAL"
                                                     },
                                                     "default":"AUTO",
                                                     "description":"origin of gained achievement"
                                                  },
                                                  "amount":{
                                                     "required":false,
                                                     "type":"number",
                                                     "default":"1",
                                                     "description":"number of how many times achievement has been gained"
                                                  }
                                               }
                                            }
                                        example: |
                                            [
                                                {
                                                    "id": 1,
                                                    "achievement": 1,
                                                    "amount": 5,
                                                    "origin": "MANUAL",
                                                    "status": "ACTIVE",
                                                    "updatedAt": 1390236382695,
                                                    "createdAt": 1390236382695
                                                }
                                            ]
                            "500": 
                            "404": 
                            "400": 
                        is: ["fields", "paginator", "ordering"]
                    post: 
                        description: "Create a gained achievement for a group."
                        body: 
                            "application/json": 
                                schema: |
                                    {
                                       "$schema":"http://json-schema.org/draft-03/schema",
                                       "type":"object",
                                       "description":"A representation of a gained achievement",
                                       "properties":{
                                          "achievement":{
                                             "required":true,
                                             "type":"number",
                                             "constraint":"must be numeric",
                                             "description":"id of achievement which has been gained"
                                          },
                                          "status":{
                                             "required":false,
                                             "type":"string",
                                             "allowed":{
                                                "0":"ACTIVE",
                                                "1":"REVOKED"
                                             },
                                             "default":"ACTIVE",
                                             "description":"status of gained achievement"
                                          },
                                          "origin":{
                                             "required":false,
                                             "type":"string",
                                             "allowed":{
                                                "0":"AUTO",
                                                "1":"MANUAL"
                                             },
                                             "default":"AUTO",
                                             "description":"origin of gained achievement"
                                          },
                                          "amount":{
                                             "required":false,
                                             "type":"number",
                                             "default":"1",
                                             "description":"number of how many times achievement has been gained"
                                          }
                                       }
                                    }
                                example: |
                                    {
                                        "achievement": 1,
                                        "amount": 5,
                                        "origin": "MANUAL",
                                        "status": "ACTIVE"
                                    }
                        responses: 
                            "200": 
                                description: "Success!"
                                body: 
                                    "application/json": 
                                        example: "example"
                            "500": 
                            "400": 
                    "/{gainedAchievementId}": 
                        displayName: "UserGroupGainedAchievement"
                        uriParameters: 
                            "gainedAchievementId": 
                                displayName: "gainedAchievementId"
                                type: string
                                required: true
                                repeat: false
                        type: "common"
                        get: 
                            description: "Get a gained achievement for a group by id."
                            responses: 
                                "200": 
                                    description: "Success!"
                                    body: 
                                        "application/json": 
                                            schema: |
                                                {
                                                   "$schema":"http://json-schema.org/draft-03/schema",
                                                   "type":"object",
                                                   "description":"A representation of a gained achievement",
                                                   "properties":{
                                                      "achievement":{
                                                         "required":true,
                                                         "type":"number",
                                                         "constraint":"must be numeric",
                                                         "description":"id of achievement which has been gained"
                                                      },
                                                      "status":{
                                                         "required":false,
                                                         "type":"string",
                                                         "allowed":{
                                                            "0":"ACTIVE",
                                                            "1":"REVOKED"
                                                         },
                                                         "default":"ACTIVE",
                                                         "description":"status of gained achievement"
                                                      },
                                                      "origin":{
                                                         "required":false,
                                                         "type":"string",
                                                         "allowed":{
                                                            "0":"AUTO",
                                                            "1":"MANUAL"
                                                         },
                                                         "default":"AUTO",
                                                         "description":"origin of gained achievement"
                                                      },
                                                      "amount":{
                                                         "required":false,
                                                         "type":"number",
                                                         "default":"1",
                                                         "description":"number of how many times achievement has been gained"
                                                      }
                                                   }
                                                }
                                            example: |
                                                {
                                                    "id": 1,
                                                    "achievement": 1,
                                                    "amount": 5,
                                                    "origin": "MANUAL",
                                                    "status": "ACTIVE",
                                                    "updatedAt": 1390236382695,
                                                    "createdAt": 1390236382695
                                                }
                                "500": 
                                "404": 
                                "400": 
                        put: 
                            description: "Update a gained achievement for a group by id."
                            body: 
                                "application/json": 
                                    schema: |
                                        {
                                           "$schema":"http://json-schema.org/draft-03/schema",
                                           "type":"object",
                                           "description":"A representation of a gained achievement",
                                           "properties":{
                                              "achievement":{
                                                 "required":true,
                                                 "type":"number",
                                                 "constraint":"must be numeric",
                                                 "description":"id of achievement which has been gained"
                                              },
                                              "status":{
                                                 "required":false,
                                                 "type":"string",
                                                 "allowed":{
                                                    "0":"ACTIVE",
                                                    "1":"REVOKED"
                                                 },
                                                 "default":"ACTIVE",
                                                 "description":"status of gained achievement"
                                              },
                                              "origin":{
                                                 "required":false,
                                                 "type":"string",
                                                 "allowed":{
                                                    "0":"AUTO",
                                                    "1":"MANUAL"
                                                 },
                                                 "default":"AUTO",
                                                 "description":"origin of gained achievement"
                                              },
                                              "amount":{
                                                 "required":false,
                                                 "type":"number",
                                                 "default":"1",
                                                 "description":"number of how many times achievement has been gained"
                                              }
                                           }
                                        }
                                    example: |
                                        {
                                            "achievement": 1,
                                            "amount": 5,
                                            "origin": "MANUAL",
                                            "status": "ACTIVE"
                                        }
                            responses: 
                                "200": 
                                    description: "Success!"
                                    body: 
                                        "application/json": 
                                            example: "example"
                                "500": 
                                "404": 
                                "400": 
                        delete: 
                            description: "Delete a gained achievement for a group by id."
                            responses: 
                                "200": 
                                    description: "Success!"
                                    body: 
                                        "application/json": 
                                            example: "example"
                                "500": 
                                "404": 
                                "400": 
                    "/doc": 
                        displayName: "UserGroupGainedAchievementDocs"
                        type: "common"
                        get: 
                            description: "Get a schema showing how to make a proper json for user group gained achivements."
                            responses: 
                                "200": 
                                    description: "Success!"
                                    body: 
                                        "application/json": 
                                            example: |
                                                {
                                                   "$schema":"http://json-schema.org/draft-03/schema",
                                                   "type":"object",
                                                   "description":"A representation of a gained achievement",
                                                   "properties":{
                                                      "achievement":{
                                                         "required":true,
                                                         "type":"number",
                                                         "constraint":"must be numeric",
                                                         "description":"id of achievement which has been gained"
                                                      },
                                                      "status":{
                                                         "required":false,
                                                         "type":"string",
                                                         "allowed":{
                                                            "0":"ACTIVE",
                                                            "1":"REVOKED"
                                                         },
                                                         "default":"ACTIVE",
                                                         "description":"status of gained achievement"
                                                      },
                                                      "origin":{
                                                         "required":false,
                                                         "type":"string",
                                                         "allowed":{
                                                            "0":"AUTO",
                                                            "1":"MANUAL"
                                                         },
                                                         "default":"AUTO",
                                                         "description":"origin of gained achievement"
                                                      },
                                                      "amount":{
                                                         "required":false,
                                                         "type":"number",
                                                         "default":"1",
                                                         "description":"number of how many times achievement has been gained"
                                                      }
                                                   }
                                                }
                                "500": 
                                "404": 
                                "400": 
                "/customfields": 
                    displayName: "UserGroupCustomFields"
                    type: "common"
                    get: 
                        description: "Get all existing custom fields for user group."
                        responses: 
                            "200": 
                                description: "Success!"
                                body: 
                                    "application/json": 
                                        schema: |
                                            {
                                                "$schema": "http://json-schema.org/draft-03/schema",
                                                "type": "object",
                                                "description": "A representation of a category",
                                                "properties": {
                                                    "key": {
                                                        "required": true,
                                                        "type": "string",
                                                        "description": "Key for the key:value storage, can have any name."
                                                    },
                                            		"value": {
                                            			"required": true,
                                            			"type": "string",
                                            			"description": "Value for the key:value storage, can have any name."
                                            			}
                                                }
                                            }
                                        example: |
                                            {
                                                "key1": "value1"
                                            }
                            "500": 
                            "404": 
                            "400": 
                    put: 
                        description: "Update an existing custom field for user group."
                        body: 
                            "application/json": 
                                schema: |
                                    {
                                        "$schema": "http://json-schema.org/draft-03/schema",
                                        "type": "object",
                                        "description": "A representation of a category",
                                        "properties": {
                                            "key": {
                                                "required": true,
                                                "type": "string",
                                                "description": "Key for the key:value storage, can have any name."
                                            },
                                    		"value": {
                                    			"required": true,
                                    			"type": "string",
                                    			"description": "Value for the key:value storage, can have any name."
                                    			}
                                        }
                                    }
                                example: |
                                    {
                                        "key1": "value1"
                                    }
                        responses: 
                            "200": 
                                description: "Success!"
                                body: 
                                    "application/json": 
                                        example: "example"
                            "500": 
                            "404": 
                            "400": 
                    post: 
                        description: "Create a new custom field for user group."
                        body: 
                            "application/json": 
                                schema: |
                                    {
                                        "$schema": "http://json-schema.org/draft-03/schema",
                                        "type": "object",
                                        "description": "A representation of a category",
                                        "properties": {
                                            "key": {
                                                "required": true,
                                                "type": "string",
                                                "description": "Key for the key:value storage, can have any name."
                                            },
                                    		"value": {
                                    			"required": true,
                                    			"type": "string",
                                    			"description": "Value for the key:value storage, can have any name."
                                    			}
                                        }
                                    }
                                example: |
                                    {
                                        "key1": "value1"
                                    }
                        responses: 
                            "200": 
                                description: "Success!"
                                body: 
                                    "application/json": 
                                        schema: |
                                            {
                                                "$schema": "http://json-schema.org/draft-03/schema",
                                                "type": "object",
                                                "description": "A representation of a category",
                                                "properties": {
                                                    "key": {
                                                        "required": true,
                                                        "type": "string",
                                                        "description": "Key for the key:value storage, can have any name."
                                                    },
                                            		"value": {
                                            			"required": true,
                                            			"type": "string",
                                            			"description": "Value for the key:value storage, can have any name."
                                            			}
                                                }
                                            }
                                        example: |
                                            {
                                                "key1": "value1"
                                            }
                            "500": 
                            "400": 
                    "/{key}": 
                        displayName: "UserGroupCustomField"
                        uriParameters: 
                            "key": 
                                displayName: "key"
                                type: string
                                required: true
                                repeat: false
                        type: "common"
                        get: 
                            description: "Get a custom field by key."
                            responses: 
                                "200": 
                                    description: "Success!"
                                    body: 
                                        "application/json": 
                                            schema: |
                                                {
                                                    "$schema": "http://json-schema.org/draft-03/schema",
                                                    "type": "object",
                                                    "description": "A representation of a category",
                                                    "properties": {
                                                        "key": {
                                                            "required": true,
                                                            "type": "string",
                                                            "description": "Key for the key:value storage, can have any name."
                                                        },
                                                		"value": {
                                                			"required": true,
                                                			"type": "string",
                                                			"description": "Value for the key:value storage, can have any name."
                                                			}
                                                    }
                                                }
                                            example: |
                                                {
                                                    "key1": "value1"
                                                }
                                "500": 
                                "404": 
                                "400": 
                        delete: 
                            description: "Delete a custom field by key."
                            responses: 
                                "200": 
                                    description: "Success!"
                                    body: 
                                        "application/json": 
                                            example: "example"
                                "500": 
                                "404": 
                                "400": 
            "/doc": 
                displayName: "UserGroupsDoc"
                type: "common"
                get: 
                    description: "Get a schema showing how to make a proper json for user group."
                    responses: 
                        "200": 
                            description: "Success!"
                            body: 
                                "application/json": 
                                    example: |
                                        {
                                           "$schema":"http://json-schema.org/draft-03/schema",
                                           "type":"object",
                                           "description":"A representation of a user group",
                                           "properties":{
                                              "name":{
                                                 "required":true,
                                                 "type":"string",
                                                 "constraint":"must be unique, minimum 5, maximum 50 chars, alphanumeric characters and underscore",
                                                 "description":"system name of user group"
                                              },
                                              "label":{
                                                 "required":true,
                                                 "type":"string",
                                                 "constraint":"must be unique, minimum 5, maximum 100 chars",
                                                 "description":"label of user group"
                                              },
                                              "users":{
                                                 "required":false,
                                                 "type":"array",
                                                 "constraint":"elements must be numeric",
                                                 "description":"list of user ids, that belong to this group"
                                              },
                                              "segments":{
                                                 "required":false,
                                                 "type":"array",
                                                 "constraint":"elements must be numeric",
                                                 "description":"list of segment ids"
                                              },
                                              "gainedAchievements":{
                                                 "required":false,
                                                 "type":"array",
                                                 "constraint":"elements must be numeric",
                                                 "description":"list of gained achievement ids"
                                              },
                                              "wonGames":{
                                                 "required":false,
                                                 "type":"array",
                                                 "constraint":"elements must be numeric",
                                                 "description":"list of won game ids"
                                              },
                                              "counterValues":{
                                                 "required":false,
                                                 "type":"array",
                                                 "constraint":"elements must be numeric",
                                                 "description":"list of counter value ids"
                                              },
                                              "externalIds":{
                                                 "required":false,
                                                 "type":"array",
                                                 "constraint":"elements must be numeric",
                                                 "description":"list of external ids"
                                              },
                                              "customFields":{
                                                 "required":false,
                                                 "type":"object",
                                                 "description":"key:value pairs as json object"
                                              }
                                           }
                                        }
                        "500": 
                        "404": 
                        "400": 
        "/doc": 
            displayName: "UsersDoc"
            type: "common"
            get: 
                description: "Get a schema showing how to make a proper json for users."
                responses: 
                    "200": 
                        description: "Success!"
                        body: 
                            "application/json": 
                                example: |
                                    {
                                       "$schema":"http://json-schema.org/draft-03/schema",
                                       "type":"object",
                                       "description":"A representation of a user",
                                       "properties":{
                                          "email":{
                                             "required":true,
                                             "type":"string",
                                             "constraint":"must be unique, minimum 5, maximum 200 chars",
                                             "description":"user email"
                                          },
                                          "password":{
                                             "required":false,
                                             "type":"string",
                                             "constraint":"minimum 6, maximum 15 chars, uppercase, lowercase, number, symbol @#$%.",
                                             "description":"user password"
                                          },
                                          "firstName":{
                                             "required":false,
                                             "type":"string",
                                             "constraint":"minimum 5, maximum 50 chars, can contain only alphanumeric characters",
                                             "description":"user first name"
                                          },
                                          "lastName":{
                                             "required":false,
                                             "type":"string",
                                             "constraint":"minimum 5, maximum 50 chars, can contain only alphanumeric characters",
                                             "description":"user last name"
                                          },
                                          "gender":{
                                             "required":false,
                                             "type":"string",
                                             "allowed":{
                                                "0":"UNKNOWN",
                                                "1":"MALE",
                                                "2":"FEMALE"
                                             },
                                             "default":"UNKNOWN",
                                             "description":"user gender"
                                          },
                                          "birthDate":{
                                             "required":false,
                                             "type":"string",
                                             "description":"user birth date, format: YYYY-MM-DD"
                                          },
                                          "status":{
                                             "required":false,
                                             "type":"string",
                                             "allowed":{
                                                "0":"UNACTIVE",
                                                "1":"ACTIVE",
                                                "2":"RESIGNED",
                                                "3":"BANNED"
                                             },
                                             "default":"UNACTIVE",
                                             "description":"user status"
                                          },
                                          "friends":{
                                             "required":false,
                                             "type":"array",
                                             "constraint":"elements must be numeric",
                                             "description":"list of users friends"
                                          },
                                          "usersGroups":{
                                             "required":false,
                                             "type":"array",
                                             "constraint":"elements must be numeric",
                                             "description":"list of user group ids, which user belongs to"
                                          },
                                          "segments":{
                                             "required":false,
                                             "type":"array",
                                             "constraint":"elements must be numeric",
                                             "description":"list of segment ids"
                                          },
                                          "gainedAchievements":{
                                             "required":false,
                                             "type":"array",
                                             "constraint":"elements must be numeric",
                                             "description":"list of gained achievement ids"
                                          },
                                          "wonGames":{
                                             "required":false,
                                             "type":"array",
                                             "constraint":"elements must be numeric",
                                             "description":"list of won game ids"
                                          },
                                          "counterValues":{
                                             "required":false,
                                             "type":"array",
                                             "constraint":"elements must be numeric",
                                             "description":"list of counter value ids"
                                          },
                                          "externalIds":{
                                             "required":false,
                                             "type":"array",
                                             "constraint":"elements must be numeric",
                                             "description":"list of external ids"
                                          },
                                          "customFields":{
                                             "required":false,
                                             "type":"object",
                                             "description":"key:value pairs as json object"
                                          }
                                       }
                                    }
                    "500": 
                    "404": 
                    "400": 
    "/transactionsources": 
        displayName: "TransactionSources"
        type: "common"
        get: 
            description: "Get a list of transaction sources."
            queryParameters: 
                "fields": 
                    description: "The fields we want to show in our result."
                    type: string
                    required: false
                    repeat: false
                    example: "id,name,description"
                "offset": 
                    description: "Number of returned items."
                    type: number
                    required: false
                    repeat: false
                "limit": 
                    description: "Starting position."
                    type: number
                    required: false
                    repeat: false
                "order": 
                    description: "The fields we want to order by and the type of ordering."
                    type: string
                    required: false
                    repeat: false
                    example: "id:DESC"
            responses: 
                "200": 
                    description: "Success!"
                    body: 
                        "application/json": 
                            schema: |
                                {
                                   "$schema":"http://json-schema.org/draft-03/schema",
                                   "type":"object",
                                   "description":"A representation of a transaction source",
                                   "properties":{
                                      "name":{
                                         "required":true,
                                         "type":"string",
                                         "constraint":"minimum 5, maximum 50 chars, alphanumeric characters and underscore",
                                         "description":"system name of transaction source"
                                      },
                                      "description":{
                                         "required":false,
                                         "type":"string",
                                         "constraint":"minimum 5, maximum 500 chars",
                                         "description":"description of transaction source"
                                      },
                                      "functions":{
                                         "required":false,
                                         "type":"array",
                                         "constraint":"elements must be numeric",
                                         "description":"list of function ids, look into documentation"
                                      }
                                   }
                                }
                            example: |
                                [
                                    {
                                        "id": 1,
                                        "description": "Example description",
                                        "functions": [
                                            1,
                                            2
                                        ],
                                        "name": "Example",
                                        "updatedAt": 1390236382695,
                                        "createdAt": 1390236382695
                                    }
                                ]
                "500": 
                "404": 
                "400": 
            is: ["fields", "paginator", "ordering"]
        post: 
            description: "Add a transaction source."
            body: 
                "application/json": 
                    schema: |
                        {
                           "$schema":"http://json-schema.org/draft-03/schema",
                           "type":"object",
                           "description":"A representation of a transaction source",
                           "properties":{
                              "name":{
                                 "required":true,
                                 "type":"string",
                                 "constraint":"minimum 5, maximum 50 chars, alphanumeric characters and underscore",
                                 "description":"system name of transaction source"
                              },
                              "description":{
                                 "required":false,
                                 "type":"string",
                                 "constraint":"minimum 5, maximum 500 chars",
                                 "description":"description of transaction source"
                              },
                              "functions":{
                                 "required":false,
                                 "type":"array",
                                 "constraint":"elements must be numeric",
                                 "description":"list of function ids, look into documentation"
                              }
                           }
                        }
                    example: |
                        {
                            "description": "Example description",
                            "functions": [
                                1,
                                2
                            ],
                            "name": "Example"
                        }
            responses: 
                "200": 
                    description: "Success!"
                    body: 
                        "application/json": 
                            example: "example"
                "500": 
                "400": 
        "/{transactionSourceId}": 
            displayName: "TransactionSource"
            uriParameters: 
                "transactionSourceId": 
                    displayName: "transactionSourceId"
                    type: string
                    required: true
                    repeat: false
            type: "common"
            get: 
                description: "Get a transaction source by its id."
                queryParameters: 
                    "fields": 
                        description: "The fields we want to show in our result."
                        type: string
                        required: false
                        repeat: false
                        example: "id,name,description"
                responses: 
                    "200": 
                        description: "Success!"
                        body: 
                            "application/json": 
                                schema: |
                                    {
                                       "$schema":"http://json-schema.org/draft-03/schema",
                                       "type":"object",
                                       "description":"A representation of a transaction source",
                                       "properties":{
                                          "name":{
                                             "required":true,
                                             "type":"string",
                                             "constraint":"minimum 5, maximum 50 chars, alphanumeric characters and underscore",
                                             "description":"system name of transaction source"
                                          },
                                          "description":{
                                             "required":false,
                                             "type":"string",
                                             "constraint":"minimum 5, maximum 500 chars",
                                             "description":"description of transaction source"
                                          },
                                          "functions":{
                                             "required":false,
                                             "type":"array",
                                             "constraint":"elements must be numeric",
                                             "description":"list of function ids, look into documentation"
                                          }
                                       }
                                    }
                                example: |
                                    {
                                        "id": 1,
                                        "description": "Example description",
                                        "functions": [
                                            1,
                                            2
                                        ],
                                        "name": "Example",
                                        "updatedAt": 1390236382695,
                                        "createdAt": 1390236382695
                                    }
                    "500": 
                    "404": 
                    "400": 
                is: ["fields"]
            put: 
                description: "Update a transaction source."
                body: 
                    "application/json": 
                        schema: |
                            {
                               "$schema":"http://json-schema.org/draft-03/schema",
                               "type":"object",
                               "description":"A representation of a transaction source",
                               "properties":{
                                  "name":{
                                     "required":true,
                                     "type":"string",
                                     "constraint":"minimum 5, maximum 50 chars, alphanumeric characters and underscore",
                                     "description":"system name of transaction source"
                                  },
                                  "description":{
                                     "required":false,
                                     "type":"string",
                                     "constraint":"minimum 5, maximum 500 chars",
                                     "description":"description of transaction source"
                                  },
                                  "functions":{
                                     "required":false,
                                     "type":"array",
                                     "constraint":"elements must be numeric",
                                     "description":"list of function ids, look into documentation"
                                  }
                               }
                            }
                        example: |
                            {
                                "description": "Example description",
                                "functions": [
                                    1,
                                    2
                                ],
                                "name": "Example"
                            }
                responses: 
                    "200": 
                        description: "Success!"
                        body: 
                            "application/json": 
                                example: "example"
                    "500": 
                    "404": 
                    "400": 
            delete: 
                description: "Delete a transaction source."
                responses: 
                    "200": 
                        description: "Success!"
                        body: 
                            "application/json": 
                                example: "example"
                    "500": 
                    "404": 
                    "400": 
            "/function": 
                displayName: "TransactionSourceFunctions"
                type: "common"
                "/{functionId}": 
                    displayName: "TransactionSourceFunction"
                    uriParameters: 
                        "functionId": 
                            displayName: "functionId"
                            type: string
                            required: true
                            repeat: false
                    type: "common"
                    put: 
                        description: "Add a transaction source function."
                        responses: 
                            "200": 
                                description: "Success!"
                                body: 
                                    "application/json": 
                                        example: "example"
                            "500": 
                            "404": 
                            "400": 
                    delete: 
                        description: "Delete a transaction source function."
                        responses: 
                            "200": 
                                description: "Success!"
                                body: 
                                    "application/json": 
                                        example: "example"
                            "500": 
                            "404": 
                            "400": 
        "/doc": 
            displayName: "TransactionSourcesDocs"
            type: "common"
            get: 
                description: "Get a schema showing how to make a proper json for transaction source."
                responses: 
                    "200": 
                        description: "Success!"
                        body: 
                            "application/json": 
                                example: |
                                    {
                                       "$schema":"http://json-schema.org/draft-03/schema",
                                       "type":"object",
                                       "description":"A representation of a transaction source",
                                       "properties":{
                                          "name":{
                                             "required":true,
                                             "type":"string",
                                             "constraint":"minimum 5, maximum 50 chars, alphanumeric characters and underscore",
                                             "description":"system name of transaction source"
                                          },
                                          "description":{
                                             "required":false,
                                             "type":"string",
                                             "constraint":"minimum 5, maximum 500 chars",
                                             "description":"description of transaction source"
                                          },
                                          "functions":{
                                             "required":false,
                                             "type":"array",
                                             "constraint":"elements must be numeric",
                                             "description":"list of function ids, look into documentation"
                                          }
                                       }
                                    }
                    "500": 
                    "404": 
                    "400": 
    "/statistics": 
        displayName: "Statistics"
        type: "common"
        get: 
            description: "Get all current statistics."
            queryParameters: 
                "fields": 
                    description: "The fields we want to show in our result."
                    type: string
                    required: false
                    repeat: false
                    example: "id,name,description"
                "offset": 
                    description: "Number of returned items."
                    type: number
                    required: false
                    repeat: false
                "limit": 
                    description: "Starting position."
                    type: number
                    required: false
                    repeat: false
                "order": 
                    description: "The fields we want to order by and the type of ordering."
                    type: string
                    required: false
                    repeat: false
                    example: "id:DESC"
            responses: 
                "200": 
                    description: "Success!"
                    body: 
                        "application/json": 
                            schema: |
                                {
                                    "cron": {
                                        "required": false,
                                        "type": "string",
                                        "default": "0/5 * * * * ?",
                                        "description" : "How often should it be updated."
                                    },
                                    "doneEvents": {
                                        "required": false,
                                        "type": "boolean",
                                        "default": "true",
                                        "description" : "should we count done events"
                                    },
                                    "doneNotifications": {
                                        "required": false,
                                        "type": "boolean",
                                        "default": "true",
                                        "description" : "should we count done notifications"
                                    },
                                    "counters": {
                                        "required": false,
                                        "type": "array",
                                        "description" : "array of counter ids"	
                                    }
                                }
                            example: |
                                {
                                   "id":1,
                                   "createdAt":1392912181864,
                                   "updatedAt":1392912560736,
                                   "cron":"0/7 * * * * ?",
                                   "counters":[
                                      1,
                                      2
                                   ],
                                   "doneEvents":true,
                                   "doneNotifications":true
                                }
                "500": 
                "404": 
                "400": 
            is: ["fields", "paginator", "ordering"]
        put: 
            description: "Update the statistic."
            body: 
                "application/json": 
                    schema: |
                        {
                            "cron": {
                                "required": false,
                                "type": "string",
                                "default": "0/5 * * * * ?",
                                "description" : "How often should it be updated."
                            },
                            "doneEvents": {
                                "required": false,
                                "type": "boolean",
                                "default": "true",
                                "description" : "should we count done events"
                            },
                            "doneNotifications": {
                                "required": false,
                                "type": "boolean",
                                "default": "true",
                                "description" : "should we count done notifications"
                            },
                            "counters": {
                                "required": false,
                                "type": "array",
                                "description" : "array of counter ids"	
                            }
                        }
                    example: |
                        {
                           "cron":"0/7 * * * * ?",
                           "counters":[
                              1,
                              2
                           ],
                           "doneEvents":true,
                           "doneNotifications":true
                        }
            responses: 
                "200": 
                    description: "Success!"
                    body: 
                        "application/json": 
                            example: "example"
                "500": 
                "404": 
                "400": 
        "/doc": 
            displayName: "StatisticsDocs"
            type: "common"
            get: 
                description: "Get a schema showing how to make a proper json for a statistic."
                responses: 
                    "200": 
                        description: "Success!"
                        body: 
                            "application/json": 
                                example: |
                                    {
                                        "cron": {
                                            "required": false,
                                            "type": "string",
                                            "default": "0/5 * * * * ?",
                                            "description" : "How often should it be updated."
                                        },
                                        "doneEvents": {
                                            "required": false,
                                            "type": "boolean",
                                            "default": "true",
                                            "description" : "should we count done events"
                                        },
                                        "doneNotifications": {
                                            "required": false,
                                            "type": "boolean",
                                            "default": "true",
                                            "description" : "should we count done notifications"
                                        },
                                        "counters": {
                                            "required": false,
                                            "type": "array",
                                            "description" : "array of counter ids"	
                                        }
                                    }
                    "500": 
                    "404": 
                    "400": 
    "/leaderboards": 
        displayName: "Leaderboards"
        type: "common"
        get: 
            description: "Get a leaderboard list."
            queryParameters: 
                "fields": 
                    description: "The fields we want to show in our result."
                    type: string
                    required: false
                    repeat: false
                    example: "id,name,description"
                "offset": 
                    description: "Number of returned items."
                    type: number
                    required: false
                    repeat: false
                "limit": 
                    description: "Starting position."
                    type: number
                    required: false
                    repeat: false
                "order": 
                    description: "The fields we want to order by and the type of ordering."
                    type: string
                    required: false
                    repeat: false
                    example: "id:DESC"
            responses: 
                "200": 
                    description: "Success!"
                    body: 
                        "application/json": 
                            schema: |
                                {
                                   "$schema":"http://json-schema.org/draft-03/schema",
                                   "type":"object",
                                   "description":"A representation of a leaderboard",
                                   "properties":{
                                      "active":{
                                         "required":false,
                                         "type":"boolean",
                                         "default":"false",
                                         "description":"whether the leaderboard should be active"
                                      },
                                      "cron":{
                                         "required":true,
                                         "type":"string",
                                         "description":"cron expression to schedule your recalculation process, please look into documentation"
                                      },
                                      "description":{
                                         "required":false,
                                         "type":"string",
                                         "constraint":"minimum 5, maximum 500 chars",
                                         "description":"description of leaderboard"
                                      },
                                      "name":{
                                         "required":true,
                                         "type":"string",
                                         "constraint":"minimum 5, maximum 50 chars, alphanumeric characters and underscore",
                                         "description":"system name of leaderboard"
                                      },
                                      "script":{
                                         "required":true,
                                         "type":"number",
                                         "constraint":"must be numeric",
                                         "description":"id of script that will produce score for users, please look into documentation"
                                      }
                                   }
                                }
                            example: |
                                [
                                    {
                                        "id": 1,
                                        "active": true,
                                        "cron": "0 0 1 * * *",
                                        "description": "Example description",
                                        "name": "Example",
                                        "script": 1,
                                        "updatedAt": 1390236382695,
                                        "createdAt": 1390236382695
                                    }
                                ]
                "500": 
                "404": 
                "400": 
            is: ["fields", "paginator", "ordering"]
        post: 
            description: "Add a new leaderboard."
            body: 
                "application/json": 
                    schema: |
                        {
                           "$schema":"http://json-schema.org/draft-03/schema",
                           "type":"object",
                           "description":"A representation of a leaderboard",
                           "properties":{
                              "active":{
                                 "required":false,
                                 "type":"boolean",
                                 "default":"false",
                                 "description":"whether the leaderboard should be active"
                              },
                              "cron":{
                                 "required":true,
                                 "type":"string",
                                 "description":"cron expression to schedule your recalculation process, please look into documentation"
                              },
                              "description":{
                                 "required":false,
                                 "type":"string",
                                 "constraint":"minimum 5, maximum 500 chars",
                                 "description":"description of leaderboard"
                              },
                              "name":{
                                 "required":true,
                                 "type":"string",
                                 "constraint":"minimum 5, maximum 50 chars, alphanumeric characters and underscore",
                                 "description":"system name of leaderboard"
                              },
                              "script":{
                                 "required":true,
                                 "type":"number",
                                 "constraint":"must be numeric",
                                 "description":"id of script that will produce score for users, please look into documentation"
                              }
                           }
                        }
                    example: |
                        {
                            "active": true,
                            "cron": "0 0 1 * * *",
                            "description": "Example description",
                            "name": "Example",
                            "script": 1
                        }
            responses: 
                "200": 
                    description: "Success!"
                    body: 
                        "application/json": 
                            example: "example"
                "500": 
                "400": 
        "/doc": 
            displayName: "LeaderboardsDocs"
            type: "common"
            get: 
                description: "Get a schema showing how to make a proper json for leaderboards."
                responses: 
                    "200": 
                        description: "Success!"
                        body: 
                            "application/json": 
                                example: |
                                    {
                                       "$schema":"http://json-schema.org/draft-03/schema",
                                       "type":"object",
                                       "description":"A representation of a leaderboard",
                                       "properties":{
                                          "active":{
                                             "required":false,
                                             "type":"boolean",
                                             "default":"false",
                                             "description":"whether the leaderboard should be active"
                                          },
                                          "cron":{
                                             "required":true,
                                             "type":"string",
                                             "description":"cron expression to schedule your recalculation process, please look into documentation"
                                          },
                                          "description":{
                                             "required":false,
                                             "type":"string",
                                             "constraint":"minimum 5, maximum 500 chars",
                                             "description":"description of leaderboard"
                                          },
                                          "name":{
                                             "required":true,
                                             "type":"string",
                                             "constraint":"minimum 5, maximum 50 chars, alphanumeric characters and underscore",
                                             "description":"system name of leaderboard"
                                          },
                                          "script":{
                                             "required":true,
                                             "type":"number",
                                             "constraint":"must be numeric",
                                             "description":"id of script that will produce score for users, please look into documentation"
                                          }
                                       }
                                    }
                    "500": 
                    "404": 
                    "400": 
        "/{leaderboardId}": 
            displayName: "Leaderboard"
            uriParameters: 
                "leaderboardId": 
                    displayName: "leaderboardId"
                    type: string
                    required: true
                    repeat: false
            type: "common"
            get: 
                description: "Get a leaderboard."
                queryParameters: 
                    "fields": 
                        description: "The fields we want to show in our result."
                        type: string
                        required: false
                        repeat: false
                        example: "id,name,description"
                responses: 
                    "200": 
                        description: "Success!"
                        body: 
                            "application/json": 
                                schema: |
                                    {
                                       "$schema":"http://json-schema.org/draft-03/schema",
                                       "type":"object",
                                       "description":"A representation of a leaderboard",
                                       "properties":{
                                          "active":{
                                             "required":false,
                                             "type":"boolean",
                                             "default":"false",
                                             "description":"whether the leaderboard should be active"
                                          },
                                          "cron":{
                                             "required":true,
                                             "type":"string",
                                             "description":"cron expression to schedule your recalculation process, please look into documentation"
                                          },
                                          "description":{
                                             "required":false,
                                             "type":"string",
                                             "constraint":"minimum 5, maximum 500 chars",
                                             "description":"description of leaderboard"
                                          },
                                          "name":{
                                             "required":true,
                                             "type":"string",
                                             "constraint":"minimum 5, maximum 50 chars, alphanumeric characters and underscore",
                                             "description":"system name of leaderboard"
                                          },
                                          "script":{
                                             "required":true,
                                             "type":"number",
                                             "constraint":"must be numeric",
                                             "description":"id of script that will produce score for users, please look into documentation"
                                          }
                                       }
                                    }
                                example: |
                                    {
                                        "id": 1,
                                        "active": true,
                                        "cron": "0 0 1 * * *",
                                        "description": "Example description",
                                        "name": "Example",
                                        "script": 1,
                                        "updatedAt": 1390236382695,
                                        "createdAt": 1390236382695
                                    }
                    "500": 
                    "404": 
                    "400": 
                is: ["fields"]
            put: 
                description: "Update a leaderboard."
                body: 
                    "application/json": 
                        schema: |
                            {
                               "$schema":"http://json-schema.org/draft-03/schema",
                               "type":"object",
                               "description":"A representation of a leaderboard",
                               "properties":{
                                  "active":{
                                     "required":false,
                                     "type":"boolean",
                                     "default":"false",
                                     "description":"whether the leaderboard should be active"
                                  },
                                  "cron":{
                                     "required":true,
                                     "type":"string",
                                     "description":"cron expression to schedule your recalculation process, please look into documentation"
                                  },
                                  "description":{
                                     "required":false,
                                     "type":"string",
                                     "constraint":"minimum 5, maximum 500 chars",
                                     "description":"description of leaderboard"
                                  },
                                  "name":{
                                     "required":true,
                                     "type":"string",
                                     "constraint":"minimum 5, maximum 50 chars, alphanumeric characters and underscore",
                                     "description":"system name of leaderboard"
                                  },
                                  "script":{
                                     "required":true,
                                     "type":"number",
                                     "constraint":"must be numeric",
                                     "description":"id of script that will produce score for users, please look into documentation"
                                  }
                               }
                            }
                        example: |
                            {
                                "active": true,
                                "cron": "0 0 1 * * *",
                                "description": "Example description",
                                "name": "Example",
                                "script": 1
                            }
                responses: 
                    "200": 
                        description: "Success!"
                        body: 
                            "application/json": 
                                example: "example"
                    "500": 
                    "404": 
                    "400": 
            delete: 
                description: "Remove a leaderboard."
                responses: 
                    "200": 
                        description: "Success!"
                        body: 
                            "application/json": 
                                example: "example"
                    "500": 
                    "404": 
                    "400": 
            "/recalculate": 
                displayName: "LeaderboardRecalculated"
                get: 
                    description: "Recalculate a leaderboard"
                    responses: 
                        "202": 
                            description: "Confirmation"
    "/games": 
        displayName: "Games"
        type: "common"
        get: 
            description: "Get a list of games."
            queryParameters: 
                "fields": 
                    description: "The fields we want to show in our result."
                    type: string
                    required: false
                    repeat: false
                    example: "id,name,description"
                "offset": 
                    description: "Number of returned items."
                    type: number
                    required: false
                    repeat: false
                "limit": 
                    description: "Starting position."
                    type: number
                    required: false
                    repeat: false
                "order": 
                    description: "The fields we want to order by and the type of ordering."
                    type: string
                    required: false
                    repeat: false
                    example: "id:DESC"
            responses: 
                "200": 
                    description: "Success!"
                    body: 
                        "application/json": 
                            schema: |
                                {
                                   "$schema":"http://json-schema.org/draft-03/schema",
                                   "type":"object",
                                   "description":"A representation of a game",
                                   "properties":{
                                      "active":{
                                         "required":false,
                                         "type":"boolean",
                                         "default":"false",
                                         "description":"whether the game is active"
                                      },
                                      "name":{
                                         "required":true,
                                         "type":"string",
                                         "constraint":"minimum 5, maximum 50 chars, alphanumeric characters and underscore",
                                         "description":"system name of game"
                                      },
                                      "description":{
                                         "required":false,
                                         "type":"string",
                                         "constraint":"minimum 5, maximum 500 chars",
                                         "description":"description of game"
                                      },
                                      "expression":{
                                         "required":true,
                                         "type":"string",
                                         "constraint":"minimum 3, maximum 200 chars",
                                         "description":"logical expression (ex: {1} OR {2}), please look into documentation"
                                      },
                                      "priority":{
                                         "required":false,
                                         "type":"number",
                                         "constraint":"must be numeric",
                                         "default":"1",
                                         "description":"priority of game (if more than one game has been won)"
                                      },
                                      "gameType":{
                                         "required":false,
                                         "type":"string",
                                         "allowed":{
                                            "0":"ONE_TIME",
                                            "1":"GRADUAL"
                                         },
                                         "default":"ONE_TIME",
                                         "description":"type of game"
                                      },
                                      "notifications":{
                                         "required":false,
                                         "type":"array",
                                         "constraint":"elements must be numeric",
                                         "description":"list of notification ids"
                                      },
                                      "conditions":{
                                         "required":false,
                                         "type":"array",
                                         "constraint":"elements must be numeric",
                                         "description":"list of condition ids"
                                      },
                                      "transactionSource":{
                                         "required":true,
                                         "type":"number",
                                         "constraint":"must be numeric",
                                         "description":"id of transaction source"
                                      },
                                      "segments":{
                                         "required":false,
                                         "type":"array",
                                         "constraint":"elements must be numeric",
                                         "description":"list of segments ids"
                                      }
                                   }
                                }
                            example: |
                                [
                                    {
                                        "id": 1,
                                        "active": false,
                                        "conditions": [
                                            1,
                                            2,
                                            3
                                        ],
                                        "description": "Example description",
                                        "expression": "{1} AND ({2} OR {3})",
                                        "gameType": "ONE_TIME",
                                        "name": "Example",
                                        "notifications": [
                                            2,
                                            4
                                        ],
                                        "priority": 1,
                                        "transactionSource": 1,
                                        "updatedAt": 1390236382695,
                                        "createdAt": 1390236382695
                                    }
                                ]
                "500": 
                "404": 
                "400": 
            is: ["fields", "paginator", "ordering"]
        post: 
            description: "Create a game."
            body: 
                "application/json": 
                    schema: |
                        {
                           "$schema":"http://json-schema.org/draft-03/schema",
                           "type":"object",
                           "description":"A representation of a game",
                           "properties":{
                              "active":{
                                 "required":false,
                                 "type":"boolean",
                                 "default":"false",
                                 "description":"whether the game is active"
                              },
                              "name":{
                                 "required":true,
                                 "type":"string",
                                 "constraint":"minimum 5, maximum 50 chars, alphanumeric characters and underscore",
                                 "description":"system name of game"
                              },
                              "description":{
                                 "required":false,
                                 "type":"string",
                                 "constraint":"minimum 5, maximum 500 chars",
                                 "description":"description of game"
                              },
                              "expression":{
                                 "required":true,
                                 "type":"string",
                                 "constraint":"minimum 3, maximum 200 chars",
                                 "description":"logical expression (ex: {1} OR {2}), please look into documentation"
                              },
                              "priority":{
                                 "required":false,
                                 "type":"number",
                                 "constraint":"must be numeric",
                                 "default":"1",
                                 "description":"priority of game (if more than one game has been won)"
                              },
                              "gameType":{
                                 "required":false,
                                 "type":"string",
                                 "allowed":{
                                    "0":"ONE_TIME",
                                    "1":"GRADUAL"
                                 },
                                 "default":"ONE_TIME",
                                 "description":"type of game"
                              },
                              "notifications":{
                                 "required":false,
                                 "type":"array",
                                 "constraint":"elements must be numeric",
                                 "description":"list of notification ids"
                              },
                              "conditions":{
                                 "required":false,
                                 "type":"array",
                                 "constraint":"elements must be numeric",
                                 "description":"list of condition ids"
                              },
                              "transactionSource":{
                                 "required":true,
                                 "type":"number",
                                 "constraint":"must be numeric",
                                 "description":"id of transaction source"
                              },
                              "segments":{
                                 "required":false,
                                 "type":"array",
                                 "constraint":"elements must be numeric",
                                 "description":"list of segments ids"
                              }
                           }
                        }
                    example: |
                        {
                            "active": false,
                            "conditions": [
                                1,
                                2,
                                3
                            ],
                            "description": "Example description",
                            "expression": "{1} AND ({2} OR {3})",
                            "gameType": "ONE_TIME",
                            "name": "Example",
                            "notifications": [
                                2,
                                4
                            ],
                            "priority": 1,
                            "transactionSource": 1
                        }
            responses: 
                "200": 
                    description: "Success!"
                    body: 
                        "application/json": 
                            example: "example"
                "500": 
                "400": 
        "/{gameId}": 
            displayName: "Game"
            uriParameters: 
                "gameId": 
                    displayName: "gameId"
                    type: string
                    required: true
                    repeat: false
            type: "common"
            get: 
                description: "Get one game by its id."
                queryParameters: 
                    "fields": 
                        description: "The fields we want to show in our result."
                        type: string
                        required: false
                        repeat: false
                        example: "id,name,description"
                responses: 
                    "200": 
                        description: "Success!"
                        body: 
                            "application/json": 
                                schema: |
                                    {
                                       "$schema":"http://json-schema.org/draft-03/schema",
                                       "type":"object",
                                       "description":"A representation of a game",
                                       "properties":{
                                          "active":{
                                             "required":false,
                                             "type":"boolean",
                                             "default":"false",
                                             "description":"whether the game is active"
                                          },
                                          "name":{
                                             "required":true,
                                             "type":"string",
                                             "constraint":"minimum 5, maximum 50 chars, alphanumeric characters and underscore",
                                             "description":"system name of game"
                                          },
                                          "description":{
                                             "required":false,
                                             "type":"string",
                                             "constraint":"minimum 5, maximum 500 chars",
                                             "description":"description of game"
                                          },
                                          "expression":{
                                             "required":true,
                                             "type":"string",
                                             "constraint":"minimum 3, maximum 200 chars",
                                             "description":"logical expression (ex: {1} OR {2}), please look into documentation"
                                          },
                                          "priority":{
                                             "required":false,
                                             "type":"number",
                                             "constraint":"must be numeric",
                                             "default":"1",
                                             "description":"priority of game (if more than one game has been won)"
                                          },
                                          "gameType":{
                                             "required":false,
                                             "type":"string",
                                             "allowed":{
                                                "0":"ONE_TIME",
                                                "1":"GRADUAL"
                                             },
                                             "default":"ONE_TIME",
                                             "description":"type of game"
                                          },
                                          "notifications":{
                                             "required":false,
                                             "type":"array",
                                             "constraint":"elements must be numeric",
                                             "description":"list of notification ids"
                                          },
                                          "conditions":{
                                             "required":false,
                                             "type":"array",
                                             "constraint":"elements must be numeric",
                                             "description":"list of condition ids"
                                          },
                                          "transactionSource":{
                                             "required":true,
                                             "type":"number",
                                             "constraint":"must be numeric",
                                             "description":"id of transaction source"
                                          },
                                          "segments":{
                                             "required":false,
                                             "type":"array",
                                             "constraint":"elements must be numeric",
                                             "description":"list of segments ids"
                                          }
                                       }
                                    }
                                example: |
                                    {
                                        "id": 1,
                                        "active": false,
                                        "conditions": [
                                            1,
                                            2,
                                            3
                                        ],
                                        "description": "Example description",
                                        "expression": "{1} AND ({2} OR {3})",
                                        "gameType": "ONE_TIME",
                                        "name": "Example",
                                        "notifications": [
                                            2,
                                            4
                                        ],
                                        "priority": 1,
                                        "transactionSource": 1,
                                        "updatedAt": 1390236382695,
                                        "createdAt": 1390236382695
                                    }
                    "500": 
                    "404": 
                    "400": 
                is: ["fields"]
            put: 
                description: "Update a game."
                body: 
                    "application/json": 
                        schema: |
                            {
                               "$schema":"http://json-schema.org/draft-03/schema",
                               "type":"object",
                               "description":"A representation of a game",
                               "properties":{
                                  "active":{
                                     "required":false,
                                     "type":"boolean",
                                     "default":"false",
                                     "description":"whether the game is active"
                                  },
                                  "name":{
                                     "required":true,
                                     "type":"string",
                                     "constraint":"minimum 5, maximum 50 chars, alphanumeric characters and underscore",
                                     "description":"system name of game"
                                  },
                                  "description":{
                                     "required":false,
                                     "type":"string",
                                     "constraint":"minimum 5, maximum 500 chars",
                                     "description":"description of game"
                                  },
                                  "expression":{
                                     "required":true,
                                     "type":"string",
                                     "constraint":"minimum 3, maximum 200 chars",
                                     "description":"logical expression (ex: {1} OR {2}), please look into documentation"
                                  },
                                  "priority":{
                                     "required":false,
                                     "type":"number",
                                     "constraint":"must be numeric",
                                     "default":"1",
                                     "description":"priority of game (if more than one game has been won)"
                                  },
                                  "gameType":{
                                     "required":false,
                                     "type":"string",
                                     "allowed":{
                                        "0":"ONE_TIME",
                                        "1":"GRADUAL"
                                     },
                                     "default":"ONE_TIME",
                                     "description":"type of game"
                                  },
                                  "notifications":{
                                     "required":false,
                                     "type":"array",
                                     "constraint":"elements must be numeric",
                                     "description":"list of notification ids"
                                  },
                                  "conditions":{
                                     "required":false,
                                     "type":"array",
                                     "constraint":"elements must be numeric",
                                     "description":"list of condition ids"
                                  },
                                  "transactionSource":{
                                     "required":true,
                                     "type":"number",
                                     "constraint":"must be numeric",
                                     "description":"id of transaction source"
                                  },
                                  "segments":{
                                     "required":false,
                                     "type":"array",
                                     "constraint":"elements must be numeric",
                                     "description":"list of segments ids"
                                  }
                               }
                            }
                        example: |
                            {
                                "active": false,
                                "conditions": [
                                    1,
                                    2,
                                    3
                                ],
                                "description": "Example description",
                                "expression": "{1} AND ({2} OR {3})",
                                "gameType": "ONE_TIME",
                                "name": "Example",
                                "notifications": [
                                    2,
                                    4
                                ],
                                "priority": 1,
                                "transactionSource": 1
                            }
                responses: 
                    "200": 
                        description: "Success!"
                        body: 
                            "application/json": 
                                example: "example"
                    "500": 
                    "404": 
                    "400": 
            delete: 
                description: "Delete a game."
                responses: 
                    "200": 
                        description: "Success!"
                        body: 
                            "application/json": 
                                example: "example"
                    "500": 
                    "404": 
                    "400": 
            "/conditions": 
                displayName: "GameConditions"
                type: "common"
                "/{conditionId}": 
                    displayName: "GameCondition"
                    uriParameters: 
                        "conditionId": 
                            displayName: "conditionId"
                            type: string
                            required: true
                            repeat: false
                    type: "common"
                    put: 
                        description: "Add a condition to a game."
                        responses: 
                            "200": 
                                description: "Success!"
                                body: 
                                    "application/json": 
                                        example: "example"
                            "500": 
                            "404": 
                            "400": 
                    delete: 
                        description: "Remove a condition from a game."
                        responses: 
                            "200": 
                                description: "Success!"
                                body: 
                                    "application/json": 
                                        example: "example"
                            "500": 
                            "404": 
                            "400": 
            "/notifications": 
                displayName: "GameNotifications"
                type: "common"
                "/{notificationId}": 
                    displayName: "GameNotification"
                    uriParameters: 
                        "notificationId": 
                            displayName: "notificationId"
                            type: string
                            required: true
                            repeat: false
                    type: "common"
                    put: 
                        description: "Add a notification to a game."
                        responses: 
                            "200": 
                                description: "Success!"
                                body: 
                                    "application/json": 
                                        example: "example"
                            "500": 
                            "404": 
                            "400": 
                    delete: 
                        description: "Remove a notification from a game."
                        responses: 
                            "200": 
                                description: "Success!"
                                body: 
                                    "application/json": 
                                        example: "example"
                            "500": 
                            "404": 
                            "400": 
        "/doc": 
            displayName: "GamesDoc"
            type: "common"
            get: 
                description: "Get a pseudo schema showing quickly how to make a proper json for games."
                responses: 
                    "200": 
                        description: "Success!"
                        body: 
                            "application/json": 
                                example: |
                                    {
                                       "$schema":"http://json-schema.org/draft-03/schema",
                                       "type":"object",
                                       "description":"A representation of a game",
                                       "properties":{
                                          "active":{
                                             "required":false,
                                             "type":"boolean",
                                             "default":"false",
                                             "description":"whether the game is active"
                                          },
                                          "name":{
                                             "required":true,
                                             "type":"string",
                                             "constraint":"minimum 5, maximum 50 chars, alphanumeric characters and underscore",
                                             "description":"system name of game"
                                          },
                                          "description":{
                                             "required":false,
                                             "type":"string",
                                             "constraint":"minimum 5, maximum 500 chars",
                                             "description":"description of game"
                                          },
                                          "expression":{
                                             "required":true,
                                             "type":"string",
                                             "constraint":"minimum 3, maximum 200 chars",
                                             "description":"logical expression (ex: {1} OR {2}), please look into documentation"
                                          },
                                          "priority":{
                                             "required":false,
                                             "type":"number",
                                             "constraint":"must be numeric",
                                             "default":"1",
                                             "description":"priority of game (if more than one game has been won)"
                                          },
                                          "gameType":{
                                             "required":false,
                                             "type":"string",
                                             "allowed":{
                                                "0":"ONE_TIME",
                                                "1":"GRADUAL"
                                             },
                                             "default":"ONE_TIME",
                                             "description":"type of game"
                                          },
                                          "notifications":{
                                             "required":false,
                                             "type":"array",
                                             "constraint":"elements must be numeric",
                                             "description":"list of notification ids"
                                          },
                                          "conditions":{
                                             "required":false,
                                             "type":"array",
                                             "constraint":"elements must be numeric",
                                             "description":"list of condition ids"
                                          },
                                          "transactionSource":{
                                             "required":true,
                                             "type":"number",
                                             "constraint":"must be numeric",
                                             "description":"id of transaction source"
                                          },
                                          "segments":{
                                             "required":false,
                                             "type":"array",
                                             "constraint":"elements must be numeric",
                                             "description":"list of segments ids"
                                          }
                                       }
                                    }
                    "500": 
                    "404": 
                    "400": 
    "/achievements": 
        displayName: "Achievements"
        type: "common"
        get: 
            description: "Get a list of achievements."
            queryParameters: 
                "fields": 
                    description: "The fields we want to show in our result."
                    type: string
                    required: false
                    repeat: false
                    example: "id,name,description"
                "order": 
                    description: "The fields we want to order by and the type of ordering."
                    type: string
                    required: false
                    repeat: false
                    example: "id:DESC"
                "segments": 
                    description: "The segments we want to narrow down our search to."
                    type: string
                    required: false
                    repeat: false
                    example: "1,2,4,5"
                "groups": 
                    description: "The groups we want to narrow down our search to."
                    type: string
                    required: false
                    repeat: false
                    example: "1,2,4,5"
                "offset": 
                    description: "Number of returned items."
                    type: number
                    required: false
                    repeat: false
                "limit": 
                    description: "Starting position."
                    type: number
                    required: false
                    repeat: false
            responses: 
                "200": 
                    description: "Success!"
                    body: 
                        "application/json": 
                            schema: |
                                {
                                   "$schema":"http://json-schema.org/draft-03/schema",
                                   "type":"object",
                                   "description":"A representation of a segment",
                                   "properties":{
                                      "name":{
                                         "required":true,
                                         "type":"string",
                                         "constraint":"minimum 5, maximum 50 chars, alphanumeric characters and underscore",
                                         "description":"system name of achievement"
                                      },
                                      "label":{
                                         "required":true,
                                         "type":"string",
                                         "constraint":"minimum 5, maximum 100 chars",
                                         "description":"label of achievement"
                                      },
                                      "description":{
                                         "required":false,
                                         "type":"string",
                                         "constraint":"minimum 5, maximum 500 chars",
                                         "description":"description of achievement"
                                      },
                                      "level":{
                                         "required":false,
                                         "type":"number",
                                         "constraint":"must be numeric",
                                         "default":"1",
                                         "description":"level of achievement"
                                      },
                                      "rank":{
                                         "required":false,
                                         "type":"number",
                                         "constraint":"must be numeric",
                                         "default":"0",
                                         "description":"rank of achievement"
                                      },
                                      "data":{
                                         "required":false,
                                         "type":"object",
                                         "constraint":"must be numeric",
                                         "description":"level of achievement"
                                      },
                                      "achievementType":{
                                         "required":false,
                                         "type":"string",
                                         "allowed":{
                                            "0":"NORMAL",
                                            "1":"PROGRESSIVE"
                                         },
                                         "default":"NORMAL",
                                         "description":"type of achievement"
                                      },
                                      "achievementGroup":{
                                         "required":false,
                                         "type":"number",
                                         "constraint":"must be numeric",
                                         "description":"id of achievement group"
                                      },
                                      "progress":{
                                         "required":false,
                                         "type":"number",
                                         "constraint":"must be numeric",
                                         "description":"id of achievement progress, required if type is PROGRESSIVE"
                                      },
                                      "segments":{
                                         "required":false,
                                         "type":"array",
                                         "constraint":"elements must be numeric",
                                         "description":"list of segment ids"
                                      }
                                   }
                                }
                            example: |
                                [
                                    {
                                        "id": 1,
                                        "achievementGroup": 1,
                                        "achievementType": "PROGRESSIVE",
                                        "counter": 1,
                                        "data": "Example data",
                                        "description": "Example description",
                                        "rank": 0,
                                        "label": "Example label",
                                        "level": 1,
                                        "name": "Example",
                                        "progress": 1,
                                        "segments": [
                                            1,
                                            2
                                        ],
                                        "updatedAt": 1390236382695,
                                        "createdAt": 1390236382695
                                    }
                                ]
                "500": 
                "404": 
                "400": 
            is: ["fields", "ordering", "segments", "groups", "paginator"]
        post: 
            description: |
                Use this method to create a new achievement. It needs a body and a returns the created object.
            body: 
                "application/json": 
                    schema: |
                        {
                           "$schema":"http://json-schema.org/draft-03/schema",
                           "type":"object",
                           "description":"A representation of a segment",
                           "properties":{
                              "name":{
                                 "required":true,
                                 "type":"string",
                                 "constraint":"minimum 5, maximum 50 chars, alphanumeric characters and underscore",
                                 "description":"system name of achievement"
                              },
                              "label":{
                                 "required":true,
                                 "type":"string",
                                 "constraint":"minimum 5, maximum 100 chars",
                                 "description":"label of achievement"
                              },
                              "description":{
                                 "required":false,
                                 "type":"string",
                                 "constraint":"minimum 5, maximum 500 chars",
                                 "description":"description of achievement"
                              },
                              "level":{
                                 "required":false,
                                 "type":"number",
                                 "constraint":"must be numeric",
                                 "default":"1",
                                 "description":"level of achievement"
                              },
                              "rank":{
                                 "required":false,
                                 "type":"number",
                                 "constraint":"must be numeric",
                                 "default":"0",
                                 "description":"rank of achievement"
                              },
                              "data":{
                                 "required":false,
                                 "type":"object",
                                 "constraint":"must be numeric",
                                 "description":"level of achievement"
                              },
                              "achievementType":{
                                 "required":false,
                                 "type":"string",
                                 "allowed":{
                                    "0":"NORMAL",
                                    "1":"PROGRESSIVE"
                                 },
                                 "default":"NORMAL",
                                 "description":"type of achievement"
                              },
                              "achievementGroup":{
                                 "required":false,
                                 "type":"number",
                                 "constraint":"must be numeric",
                                 "description":"id of achievement group"
                              },
                              "progress":{
                                 "required":false,
                                 "type":"number",
                                 "constraint":"must be numeric",
                                 "description":"id of achievement progress, required if type is PROGRESSIVE"
                              },
                              "segments":{
                                 "required":false,
                                 "type":"array",
                                 "constraint":"elements must be numeric",
                                 "description":"list of segment ids"
                              }
                           }
                        }
                    example: |
                        {
                            "achievementGroup": 1,
                            "achievementType": "PROGRESSIVE",
                            "counter": 1,
                            "data": "Example data",
                            "description": "Example description",
                            "rank": 0,
                            "label": "Example label",
                            "level": 1,
                            "name": "Example",
                            "progress": 1,
                            "segments": [
                                1,
                                2
                            ]
                        }
            responses: 
                "200": 
                    description: "Success!"
                    body: 
                        "application/json": 
                            schema: |
                                {
                                   "$schema":"http://json-schema.org/draft-03/schema",
                                   "type":"object",
                                   "description":"A representation of a segment",
                                   "properties":{
                                      "name":{
                                         "required":true,
                                         "type":"string",
                                         "constraint":"minimum 5, maximum 50 chars, alphanumeric characters and underscore",
                                         "description":"system name of achievement"
                                      },
                                      "label":{
                                         "required":true,
                                         "type":"string",
                                         "constraint":"minimum 5, maximum 100 chars",
                                         "description":"label of achievement"
                                      },
                                      "description":{
                                         "required":false,
                                         "type":"string",
                                         "constraint":"minimum 5, maximum 500 chars",
                                         "description":"description of achievement"
                                      },
                                      "level":{
                                         "required":false,
                                         "type":"number",
                                         "constraint":"must be numeric",
                                         "default":"1",
                                         "description":"level of achievement"
                                      },
                                      "rank":{
                                         "required":false,
                                         "type":"number",
                                         "constraint":"must be numeric",
                                         "default":"0",
                                         "description":"rank of achievement"
                                      },
                                      "data":{
                                         "required":false,
                                         "type":"object",
                                         "constraint":"must be numeric",
                                         "description":"level of achievement"
                                      },
                                      "achievementType":{
                                         "required":false,
                                         "type":"string",
                                         "allowed":{
                                            "0":"NORMAL",
                                            "1":"PROGRESSIVE"
                                         },
                                         "default":"NORMAL",
                                         "description":"type of achievement"
                                      },
                                      "achievementGroup":{
                                         "required":false,
                                         "type":"number",
                                         "constraint":"must be numeric",
                                         "description":"id of achievement group"
                                      },
                                      "progress":{
                                         "required":false,
                                         "type":"number",
                                         "constraint":"must be numeric",
                                         "description":"id of achievement progress, required if type is PROGRESSIVE"
                                      },
                                      "segments":{
                                         "required":false,
                                         "type":"array",
                                         "constraint":"elements must be numeric",
                                         "description":"list of segment ids"
                                      }
                                   }
                                }
                            example: |
                                {
                                    "id": 1,
                                    "achievementGroup": 1,
                                    "achievementType": "PROGRESSIVE",
                                    "counter": 1,
                                    "data": "Example data",
                                    "description": "Example description",
                                    "rank": 1,
                                    "label": "Example label",
                                    "level": 1,
                                    "name": "Example",
                                    "progress": 1,
                                    "segments": [
                                        1,
                                        2
                                    ],
                                    "updatedAt": 1390236382695,
                                    "createdAt": 1390236382695
                                }
                "500": 
                "400": 
        "/{achievementId}": 
            displayName: "Achievement"
            uriParameters: 
                "achievementId": 
                    displayName: "achievementId"
                    type: string
                    required: true
                    repeat: false
            type: "common"
            get: 
                description: "Get one achievement."
                queryParameters: 
                    "fields": 
                        description: "The fields we want to show in our result."
                        type: string
                        required: false
                        repeat: false
                        example: "id,name,description"
                responses: 
                    "200": 
                        description: "Success!"
                        body: 
                            "application/json": 
                                schema: |
                                    {
                                       "$schema":"http://json-schema.org/draft-03/schema",
                                       "type":"object",
                                       "description":"A representation of a segment",
                                       "properties":{
                                          "name":{
                                             "required":true,
                                             "type":"string",
                                             "constraint":"minimum 5, maximum 50 chars, alphanumeric characters and underscore",
                                             "description":"system name of achievement"
                                          },
                                          "label":{
                                             "required":true,
                                             "type":"string",
                                             "constraint":"minimum 5, maximum 100 chars",
                                             "description":"label of achievement"
                                          },
                                          "description":{
                                             "required":false,
                                             "type":"string",
                                             "constraint":"minimum 5, maximum 500 chars",
                                             "description":"description of achievement"
                                          },
                                          "level":{
                                             "required":false,
                                             "type":"number",
                                             "constraint":"must be numeric",
                                             "default":"1",
                                             "description":"level of achievement"
                                          },
                                          "rank":{
                                             "required":false,
                                             "type":"number",
                                             "constraint":"must be numeric",
                                             "default":"0",
                                             "description":"rank of achievement"
                                          },
                                          "data":{
                                             "required":false,
                                             "type":"object",
                                             "constraint":"must be numeric",
                                             "description":"level of achievement"
                                          },
                                          "achievementType":{
                                             "required":false,
                                             "type":"string",
                                             "allowed":{
                                                "0":"NORMAL",
                                                "1":"PROGRESSIVE"
                                             },
                                             "default":"NORMAL",
                                             "description":"type of achievement"
                                          },
                                          "achievementGroup":{
                                             "required":false,
                                             "type":"number",
                                             "constraint":"must be numeric",
                                             "description":"id of achievement group"
                                          },
                                          "progress":{
                                             "required":false,
                                             "type":"number",
                                             "constraint":"must be numeric",
                                             "description":"id of achievement progress, required if type is PROGRESSIVE"
                                          },
                                          "segments":{
                                             "required":false,
                                             "type":"array",
                                             "constraint":"elements must be numeric",
                                             "description":"list of segment ids"
                                          }
                                       }
                                    }
                                example: |
                                    {
                                        "id": 1,
                                        "achievementGroup": 1,
                                        "achievementType": "PROGRESSIVE",
                                        "counter": 1,
                                        "data": "Example data",
                                        "description": "Example description",
                                        "rank": 1,
                                        "label": "Example label",
                                        "level": 1,
                                        "name": "Example",
                                        "progress": 1,
                                        "segments": [
                                            1,
                                            2
                                        ],
                                        "updatedAt": 1390236382695,
                                        "createdAt": 1390236382695
                                    }
                    "500": 
                    "404": 
                    "400": 
                is: ["fields"]
            put: 
                description: "Update one achievement."
                body: 
                    "application/json": 
                        schema: |
                            {
                               "$schema":"http://json-schema.org/draft-03/schema",
                               "type":"object",
                               "description":"A representation of a segment",
                               "properties":{
                                  "name":{
                                     "required":true,
                                     "type":"string",
                                     "constraint":"minimum 5, maximum 50 chars, alphanumeric characters and underscore",
                                     "description":"system name of achievement"
                                  },
                                  "label":{
                                     "required":true,
                                     "type":"string",
                                     "constraint":"minimum 5, maximum 100 chars",
                                     "description":"label of achievement"
                                  },
                                  "description":{
                                     "required":false,
                                     "type":"string",
                                     "constraint":"minimum 5, maximum 500 chars",
                                     "description":"description of achievement"
                                  },
                                  "level":{
                                     "required":false,
                                     "type":"number",
                                     "constraint":"must be numeric",
                                     "default":"1",
                                     "description":"level of achievement"
                                  },
                                  "rank":{
                                     "required":false,
                                     "type":"number",
                                     "constraint":"must be numeric",
                                     "default":"0",
                                     "description":"rank of achievement"
                                  },
                                  "data":{
                                     "required":false,
                                     "type":"object",
                                     "constraint":"must be numeric",
                                     "description":"level of achievement"
                                  },
                                  "achievementType":{
                                     "required":false,
                                     "type":"string",
                                     "allowed":{
                                        "0":"NORMAL",
                                        "1":"PROGRESSIVE"
                                     },
                                     "default":"NORMAL",
                                     "description":"type of achievement"
                                  },
                                  "achievementGroup":{
                                     "required":false,
                                     "type":"number",
                                     "constraint":"must be numeric",
                                     "description":"id of achievement group"
                                  },
                                  "progress":{
                                     "required":false,
                                     "type":"number",
                                     "constraint":"must be numeric",
                                     "description":"id of achievement progress, required if type is PROGRESSIVE"
                                  },
                                  "segments":{
                                     "required":false,
                                     "type":"array",
                                     "constraint":"elements must be numeric",
                                     "description":"list of segment ids"
                                  }
                               }
                            }
                        example: |
                            {
                                "achievementGroup": 1,
                                "achievementType": "PROGRESSIVE",
                                "counter": 1,
                                "data": "Example data",
                                "description": "Example description",
                                "rank": 0,
                                "label": "Example label",
                                "level": 1,
                                "name": "Example",
                                "progress": 1,
                                "segments": [
                                    1,
                                    2
                                ]
                            }
                responses: 
                    "200": 
                        description: "Success!"
                        body: 
                            "application/json": 
                                example: "example"
                    "500": 
                    "404": 
                    "400": 
            delete: 
                description: "Delete one achievement."
                responses: 
                    "200": 
                        description: "Success!"
                        body: 
                            "application/json": 
                                example: "example"
                    "500": 
                    "404": 
                    "400": 
            "/segments": 
                displayName: "AchievementSegments"
                type: "common"
                "/{segmentId}": 
                    displayName: "AchievementSegment"
                    uriParameters: 
                        "segmentId": 
                            displayName: "segmentId"
                            type: string
                            required: true
                            repeat: false
                    type: "common"
                    put: 
                        description: "Add segment to achievement."
                        responses: 
                            "200": 
                                description: "Success!"
                                body: 
                                    "application/json": 
                                        example: "example"
                            "500": 
                            "404": 
                            "400": 
                    delete: 
                        description: "Delete segment from achievement."
                        responses: 
                            "200": 
                                description: "Success!"
                                body: 
                                    "application/json": 
                                        example: "example"
                            "500": 
                            "404": 
                            "400": 
        "/categories": 
            displayName: "AchievementsCategories"
            type: "common"
            get: 
                description: "Get list of categories."
                queryParameters: 
                    "fields": 
                        description: "The fields we want to show in our result."
                        type: string
                        required: false
                        repeat: false
                        example: "id,name,description"
                    "order": 
                        description: "The fields we want to order by and the type of ordering."
                        type: string
                        required: false
                        repeat: false
                        example: "id:DESC"
                    "offset": 
                        description: "Number of returned items."
                        type: number
                        required: false
                        repeat: false
                    "limit": 
                        description: "Starting position."
                        type: number
                        required: false
                        repeat: false
                responses: 
                    "200": 
                        description: "Success!"
                        body: 
                            "application/json": 
                                schema: |
                                    {
                                       "$schema":"http://json-schema.org/draft-03/schema",
                                       "type":"object",
                                       "description":"A representation of a category",
                                       "properties":{
                                          "name":{
                                             "required":true,
                                             "type":"string",
                                             "constraint":"minimum 5, maximum 50 chars",
                                             "description":"name of category"
                                          }
                                       }
                                    }
                                example: |
                                    [
                                        {
                                            "id": 1,
                                            "name": "Test counter",
                                            "updatedAt": 1390236382695,
                                            "createdAt": 1390236382695
                                        }
                                    ]
                    "500": 
                    "404": 
                    "400": 
                is: ["fields", "ordering", "paginator"]
            post: 
                description: "Create new category."
                body: 
                    "application/json": 
                        schema: |
                            {
                               "$schema":"http://json-schema.org/draft-03/schema",
                               "type":"object",
                               "description":"A representation of a category",
                               "properties":{
                                  "name":{
                                     "required":true,
                                     "type":"string",
                                     "constraint":"minimum 5, maximum 50 chars",
                                     "description":"name of category"
                                  }
                               }
                            }
                        example: |
                            {
                                "name": "Test counter"
                            }
                responses: 
                    "200": 
                        description: "Success!"
                        body: 
                            "application/json": 
                                schema: |
                                    {
                                       "$schema":"http://json-schema.org/draft-03/schema",
                                       "type":"object",
                                       "description":"A representation of a category",
                                       "properties":{
                                          "name":{
                                             "required":true,
                                             "type":"string",
                                             "constraint":"minimum 5, maximum 50 chars",
                                             "description":"name of category"
                                          }
                                       }
                                    }
                                example: |
                                    {
                                        "id": 1,
                                        "name": "Test counter",
                                        "updatedAt": 1390236382695,
                                        "createdAt": 1390236382695
                                    }
                    "500": 
                    "400": 
            "/{categoryId}": 
                displayName: "AchievementsCategory"
                uriParameters: 
                    "categoryId": 
                        displayName: "categoryId"
                        type: string
                        required: true
                        repeat: false
                type: "common"
                get: 
                    description: "Get one category."
                    responses: 
                        "200": 
                            description: "Success!"
                            body: 
                                "application/json": 
                                    schema: |
                                        {
                                           "$schema":"http://json-schema.org/draft-03/schema",
                                           "type":"object",
                                           "description":"A representation of a category",
                                           "properties":{
                                              "name":{
                                                 "required":true,
                                                 "type":"string",
                                                 "constraint":"minimum 5, maximum 50 chars",
                                                 "description":"name of category"
                                              }
                                           }
                                        }
                                    example: |
                                        {
                                            "id": 1,
                                            "name": "Test counter",
                                            "updatedAt": 1390236382695,
                                            "createdAt": 1390236382695
                                        }
                        "500": 
                        "404": 
                        "400": 
                put: 
                    description: "Update achievement category."
                    body: 
                        "application/json": 
                            schema: |
                                {
                                   "$schema":"http://json-schema.org/draft-03/schema",
                                   "type":"object",
                                   "description":"A representation of a category",
                                   "properties":{
                                      "name":{
                                         "required":true,
                                         "type":"string",
                                         "constraint":"minimum 5, maximum 50 chars",
                                         "description":"name of category"
                                      }
                                   }
                                }
                            example: |
                                {
                                    "name": "Test counter"
                                }
                    responses: 
                        "200": 
                            description: "Success!"
                            body: 
                                "application/json": 
                                    example: "example"
                        "500": 
                        "404": 
                        "400": 
                delete: 
                    description: "Delete one achievements category."
                    responses: 
                        "200": 
                            description: "Success!"
                            body: 
                                "application/json": 
                                    example: "example"
                        "500": 
                        "404": 
                        "400": 
            "/doc": 
                displayName: "AchievementsCategoriesDoc"
                type: "common"
                get: 
                    description: "Get a pseudo schema for category."
                    responses: 
                        "200": 
                            description: "Success!"
                            body: 
                                "application/json": 
                                    example: |
                                        {
                                           "$schema":"http://json-schema.org/draft-03/schema",
                                           "type":"object",
                                           "description":"A representation of a category",
                                           "properties":{
                                              "name":{
                                                 "required":true,
                                                 "type":"string",
                                                 "constraint":"minimum 5, maximum 50 chars",
                                                 "description":"name of category"
                                              }
                                           }
                                        }
                        "500": 
                        "404": 
                        "400": 
        "/progress": 
            displayName: "AchievementsProgresses"
            type: "common"
            get: 
                description: "Get achievement progress list."
                queryParameters: 
                    "fields": 
                        description: "The fields we want to show in our result."
                        type: string
                        required: false
                        repeat: false
                        example: "id,name,description"
                    "order": 
                        description: "The fields we want to order by and the type of ordering."
                        type: string
                        required: false
                        repeat: false
                        example: "id:DESC"
                    "offset": 
                        description: "Number of returned items."
                        type: number
                        required: false
                        repeat: false
                    "limit": 
                        description: "Starting position."
                        type: number
                        required: false
                        repeat: false
                responses: 
                    "200": 
                        description: "Success!"
                        body: 
                            "application/json": 
                                schema: |
                                    {
                                       "$schema":"http://json-schema.org/draft-03/schema",
                                       "type":"object",
                                       "description":"A representation of a segment",
                                       "properties":{
                                          "start":{
                                             "required":true,
                                             "type":"number",
                                             "constraint":"must be numeric",
                                             "description":"start value of progress"
                                          },
                                          "stop":{
                                             "required":true,
                                             "type":"number",
                                             "constraint":"must be numeric",
                                             "description":"stop value of progress"
                                          },
                                          "counter":{
                                             "required":false,
                                             "type":"number",
                                             "constraint":"must be numeric",
                                             "description":"counter id for progress"
                                          }
                                       }
                                    }
                                example: |
                                    [
                                        {
                                            "id": 1,
                                            "counter": 4,
                                            "start": 1,
                                            "stop": 5,
                                            "updatedAt": 1390236382695,
                                            "createdAt": 1390236382695
                                        }
                                    ]
                    "500": 
                    "404": 
                    "400": 
                is: ["fields", "ordering", "paginator"]
            post: 
                description: "Create a new achievement progress."
                body: 
                    "application/json": 
                        schema: |
                            {
                               "$schema":"http://json-schema.org/draft-03/schema",
                               "type":"object",
                               "description":"A representation of a segment",
                               "properties":{
                                  "start":{
                                     "required":true,
                                     "type":"number",
                                     "constraint":"must be numeric",
                                     "description":"start value of progress"
                                  },
                                  "stop":{
                                     "required":true,
                                     "type":"number",
                                     "constraint":"must be numeric",
                                     "description":"stop value of progress"
                                  },
                                  "counter":{
                                     "required":false,
                                     "type":"number",
                                     "constraint":"must be numeric",
                                     "description":"counter id for progress"
                                  }
                               }
                            }
                        example: |
                            {
                                "counter": 4,
                                "start": 1,
                                "stop": 5
                            }
                responses: 
                    "200": 
                        description: "Success!"
                        body: 
                            "application/json": 
                                schema: |
                                    {
                                       "$schema":"http://json-schema.org/draft-03/schema",
                                       "type":"object",
                                       "description":"A representation of a segment",
                                       "properties":{
                                          "start":{
                                             "required":true,
                                             "type":"number",
                                             "constraint":"must be numeric",
                                             "description":"start value of progress"
                                          },
                                          "stop":{
                                             "required":true,
                                             "type":"number",
                                             "constraint":"must be numeric",
                                             "description":"stop value of progress"
                                          },
                                          "counter":{
                                             "required":false,
                                             "type":"number",
                                             "constraint":"must be numeric",
                                             "description":"counter id for progress"
                                          }
                                       }
                                    }
                                example: |
                                    {
                                        "id": 1,
                                        "counter": 4,
                                        "start": 1,
                                        "stop": 5,
                                        "updatedAt": 1390236382695,
                                        "createdAt": 1390236382695
                                    }
                    "500": 
                    "400": 
            "/{achievementProgressId}": 
                displayName: "AchievementsProgress"
                uriParameters: 
                    "achievementProgressId": 
                        displayName: "achievementProgressId"
                        type: string
                        required: true
                        repeat: false
                type: "common"
                get: 
                    description: "Get one achievement progress."
                    queryParameters: 
                        "fields": 
                            description: "The fields we want to show in our result."
                            type: string
                            required: false
                            repeat: false
                            example: "id,name,description"
                    responses: 
                        "200": 
                            description: "Success!"
                            body: 
                                "application/json": 
                                    schema: |
                                        {
                                           "$schema":"http://json-schema.org/draft-03/schema",
                                           "type":"object",
                                           "description":"A representation of a segment",
                                           "properties":{
                                              "start":{
                                                 "required":true,
                                                 "type":"number",
                                                 "constraint":"must be numeric",
                                                 "description":"start value of progress"
                                              },
                                              "stop":{
                                                 "required":true,
                                                 "type":"number",
                                                 "constraint":"must be numeric",
                                                 "description":"stop value of progress"
                                              },
                                              "counter":{
                                                 "required":false,
                                                 "type":"number",
                                                 "constraint":"must be numeric",
                                                 "description":"counter id for progress"
                                              }
                                           }
                                        }
                                    example: |
                                        {
                                            "id": 1,
                                            "counter": 4,
                                            "start": 1,
                                            "stop": 5,
                                            "updatedAt": 1390236382695,
                                            "createdAt": 1390236382695
                                        }
                        "500": 
                        "404": 
                        "400": 
                    is: ["fields"]
                put: 
                    description: "Update an achievement progress."
                    body: 
                        "application/json": 
                            schema: |
                                {
                                   "$schema":"http://json-schema.org/draft-03/schema",
                                   "type":"object",
                                   "description":"A representation of a segment",
                                   "properties":{
                                      "start":{
                                         "required":true,
                                         "type":"number",
                                         "constraint":"must be numeric",
                                         "description":"start value of progress"
                                      },
                                      "stop":{
                                         "required":true,
                                         "type":"number",
                                         "constraint":"must be numeric",
                                         "description":"stop value of progress"
                                      },
                                      "counter":{
                                         "required":false,
                                         "type":"number",
                                         "constraint":"must be numeric",
                                         "description":"counter id for progress"
                                      }
                                   }
                                }
                            example: |
                                {
                                    "counter": 4,
                                    "start": 1,
                                    "stop": 5
                                }
                    responses: 
                        "200": 
                            description: "Success!"
                            body: 
                                "application/json": 
                                    example: "example"
                        "500": 
                        "404": 
                        "400": 
                delete: 
                    description: "Delete an achievement progress."
                    responses: 
                        "200": 
                            description: "Success!"
                            body: 
                                "application/json": 
                                    example: "example"
                        "500": 
                        "404": 
                        "400": 
            "/doc": 
                displayName: "AchievementsProgressesDoc"
                type: "common"
                get: 
                    description: "Get a schema for achievement progress."
                    responses: 
                        "200": 
                            description: "Success!"
                            body: 
                                "application/json": 
                                    example: |
                                        {
                                           "$schema":"http://json-schema.org/draft-03/schema",
                                           "type":"object",
                                           "description":"A representation of a segment",
                                           "properties":{
                                              "start":{
                                                 "required":true,
                                                 "type":"number",
                                                 "constraint":"must be numeric",
                                                 "description":"start value of progress"
                                              },
                                              "stop":{
                                                 "required":true,
                                                 "type":"number",
                                                 "constraint":"must be numeric",
                                                 "description":"stop value of progress"
                                              },
                                              "counter":{
                                                 "required":false,
                                                 "type":"number",
                                                 "constraint":"must be numeric",
                                                 "description":"counter id for progress"
                                              }
                                           }
                                        }
                        "500": 
                        "404": 
                        "400": 
        "/groups": 
            displayName: "AchievementsGroups"
            type: "common"
            get: 
                description: "Get a list achievement groups."
                queryParameters: 
                    "fields": 
                        description: "The fields we want to show in our result."
                        type: string
                        required: false
                        repeat: false
                        example: "id,name,description"
                    "order": 
                        description: "The fields we want to order by and the type of ordering."
                        type: string
                        required: false
                        repeat: false
                        example: "id:DESC"
                    "offset": 
                        description: "Number of returned items."
                        type: number
                        required: false
                        repeat: false
                    "limit": 
                        description: "Starting position."
                        type: number
                        required: false
                        repeat: false
                responses: 
                    "200": 
                        description: "Success!"
                        body: 
                            "application/json": 
                                schema: |
                                    {
                                       "$schema":"http://json-schema.org/draft-03/schema",
                                       "type":"object",
                                       "description":"A representation of an achievement group",
                                       "properties":{
                                          "name":{
                                             "required":true,
                                             "type":"string",
                                             "constraint":"minimum 5, maximum 50 chars",
                                             "description":"name of group"
                                          }
                                       }
                                    }
                                example: |
                                    [
                                        {
                                            "id": 1,
                                            "name": "Example",
                                            "updatedAt": 1390236382695,
                                            "createdAt": 1390236382695
                                        }
                                    ]
                    "500": 
                    "404": 
                    "400": 
                is: ["fields", "ordering", "paginator"]
            post: 
                description: "Create a new achievement group. This method needs a body and returns the created object."
                body: 
                    "application/json": 
                        schema: |
                            {
                               "$schema":"http://json-schema.org/draft-03/schema",
                               "type":"object",
                               "description":"A representation of an achievement group",
                               "properties":{
                                  "name":{
                                     "required":true,
                                     "type":"string",
                                     "constraint":"minimum 5, maximum 50 chars",
                                     "description":"name of group"
                                  }
                               }
                            }
                        example: |
                            {
                                "name": "Example"
                            }
                responses: 
                    "200": 
                        description: "Success!"
                        body: 
                            "application/json": 
                                schema: |
                                    {
                                       "$schema":"http://json-schema.org/draft-03/schema",
                                       "type":"object",
                                       "description":"A representation of an achievement group",
                                       "properties":{
                                          "name":{
                                             "required":true,
                                             "type":"string",
                                             "constraint":"minimum 5, maximum 50 chars",
                                             "description":"name of group"
                                          }
                                       }
                                    }
                                example: |
                                    {
                                        "id": 1,
                                        "name": "Example",
                                        "updatedAt": 1390236382695,
                                        "createdAt": 1390236382695
                                    }
                    "500": 
                    "400": 
            "/{achievementGroupId}": 
                displayName: "AchievementsGroup"
                uriParameters: 
                    "achievementGroupId": 
                        displayName: "achievementGroupId"
                        type: string
                        required: true
                        repeat: false
                type: "common"
                get: 
                    description: "Get one achievement group."
                    queryParameters: 
                        "fields": 
                            description: "The fields we want to show in our result."
                            type: string
                            required: false
                            repeat: false
                            example: "id,name,description"
                    responses: 
                        "200": 
                            description: "Success!"
                            body: 
                                "application/json": 
                                    schema: |
                                        {
                                           "$schema":"http://json-schema.org/draft-03/schema",
                                           "type":"object",
                                           "description":"A representation of an achievement group",
                                           "properties":{
                                              "name":{
                                                 "required":true,
                                                 "type":"string",
                                                 "constraint":"minimum 5, maximum 50 chars",
                                                 "description":"name of group"
                                              }
                                           }
                                        }
                                    example: |
                                        {
                                            "id": 1,
                                            "name": "Example",
                                            "updatedAt": 1390236382695,
                                            "createdAt": 1390236382695
                                        }
                        "500": 
                        "404": 
                        "400": 
                    is: ["fields"]
                put: 
                    description: "Update an achievement group."
                    body: 
                        "application/json": 
                            schema: |
                                {
                                   "$schema":"http://json-schema.org/draft-03/schema",
                                   "type":"object",
                                   "description":"A representation of an achievement group",
                                   "properties":{
                                      "name":{
                                         "required":true,
                                         "type":"string",
                                         "constraint":"minimum 5, maximum 50 chars",
                                         "description":"name of group"
                                      }
                                   }
                                }
                            example: |
                                {
                                    "name": "Example"
                                }
                    responses: 
                        "200": 
                            description: "Success!"
                            body: 
                                "application/json": 
                                    example: "example"
                        "500": 
                        "404": 
                        "400": 
                delete: 
                    description: "Delete an achievement group."
                    responses: 
                        "200": 
                            description: "Success!"
                            body: 
                                "application/json": 
                                    example: "example"
                        "500": 
                        "404": 
                        "400": 
            "/doc": 
                displayName: "AchievementsGroupsDoc"
                type: "common"
                get: 
                    description: "Get a schema for group. It shows how to create a new group."
                    responses: 
                        "200": 
                            description: "Success!"
                            body: 
                                "application/json": 
                                    example: |
                                        {
                                           "$schema":"http://json-schema.org/draft-03/schema",
                                           "type":"object",
                                           "description":"A representation of an achievement group",
                                           "properties":{
                                              "name":{
                                                 "required":true,
                                                 "type":"string",
                                                 "constraint":"minimum 5, maximum 50 chars",
                                                 "description":"name of group"
                                              }
                                           }
                                        }
                        "500": 
                        "404": 
                        "400": 
    "/notifications": 
        displayName: "Notifications"
        type: "common"
        get: 
            description: "Get a list of notifications."
            queryParameters: 
                "fields": 
                    description: "The fields we want to show in our result."
                    type: string
                    required: false
                    repeat: false
                    example: "id,name,description"
                "offset": 
                    description: "Number of returned items."
                    type: number
                    required: false
                    repeat: false
                "limit": 
                    description: "Starting position."
                    type: number
                    required: false
                    repeat: false
                "order": 
                    description: "The fields we want to order by and the type of ordering."
                    type: string
                    required: false
                    repeat: false
                    example: "id:DESC"
            responses: 
                "200": 
                    description: "Success!"
                    body: 
                        "application/json": 
                            schema: |
                                {
                                   "$schema":"http://json-schema.org/draft-03/schema",
                                   "type":"object",
                                   "description":"A representation of a notification",
                                   "properties":{
                                      "notificationType":{
                                         "required":true,
                                         "type":"number",
                                         "constraint":"must be numeric",
                                         "description":"id of notification type"
                                      },
                                      "segment":{
                                         "required":false,
                                         "type":"number",
                                         "constraint":"must be numeric",
                                         "description":"id of segment"
                                      },
                                      "game":{
                                         "required":false,
                                         "type":"number",
                                         "constraint":"must be numeric",
                                         "description":"id of game connected with this notification"
                                      },
                                      "data":{
                                         "required":false,
                                         "type":"object",
                                         "description":"data required to process notification"
                                      }
                                   }
                                }
                            example: |
                                [
                                    {
                                        "id": 1,
                                        "data": {
                                            "key": "value"
                                        },
                                        "game": 1,
                                        "notificationType": 1,
                                        "segment": 1,
                                        "updatedAt": 1390236382695,
                                        "createdAt": 1390236382695
                                    }
                                ]
                "500": 
                "404": 
                "400": 
            is: ["fields", "paginator", "ordering"]
        post: 
            description: "Add a notification."
            body: 
                "application/json": 
                    schema: |
                        {
                           "$schema":"http://json-schema.org/draft-03/schema",
                           "type":"object",
                           "description":"A representation of a notification",
                           "properties":{
                              "notificationType":{
                                 "required":true,
                                 "type":"number",
                                 "constraint":"must be numeric",
                                 "description":"id of notification type"
                              },
                              "segment":{
                                 "required":false,
                                 "type":"number",
                                 "constraint":"must be numeric",
                                 "description":"id of segment"
                              },
                              "game":{
                                 "required":false,
                                 "type":"number",
                                 "constraint":"must be numeric",
                                 "description":"id of game connected with this notification"
                              },
                              "data":{
                                 "required":false,
                                 "type":"object",
                                 "description":"data required to process notification"
                              }
                           }
                        }
                    example: |
                        {
                            "data": {
                                "key": "value"
                            },
                            "game": 1,
                            "notificationType": 1,
                            "segment": 1
                        }
            responses: 
                "200": 
                    description: "Success!"
                    body: 
                        "application/json": 
                            example: "example"
                "500": 
                "400": 
        "/{notificationId}": 
            displayName: "Notification"
            uriParameters: 
                "notificationId": 
                    displayName: "notificationId"
                    type: string
                    required: true
                    repeat: false
            type: "common"
            get: 
                description: "Get one notification by its id."
                queryParameters: 
                    "fields": 
                        description: "The fields we want to show in our result."
                        type: string
                        required: false
                        repeat: false
                        example: "id,name,description"
                responses: 
                    "200": 
                        description: "Success!"
                        body: 
                            "application/json": 
                                schema: |
                                    {
                                       "$schema":"http://json-schema.org/draft-03/schema",
                                       "type":"object",
                                       "description":"A representation of a notification",
                                       "properties":{
                                          "notificationType":{
                                             "required":true,
                                             "type":"number",
                                             "constraint":"must be numeric",
                                             "description":"id of notification type"
                                          },
                                          "segment":{
                                             "required":false,
                                             "type":"number",
                                             "constraint":"must be numeric",
                                             "description":"id of segment"
                                          },
                                          "game":{
                                             "required":false,
                                             "type":"number",
                                             "constraint":"must be numeric",
                                             "description":"id of game connected with this notification"
                                          },
                                          "data":{
                                             "required":false,
                                             "type":"object",
                                             "description":"data required to process notification"
                                          }
                                       }
                                    }
                                example: |
                                    {
                                        "id": 1,
                                        "data": {
                                            "key": "value"
                                        },
                                        "game": 1,
                                        "notificationType": 1,
                                        "segment": 1,
                                        "updatedAt": 1390236382695,
                                        "createdAt": 1390236382695
                                    }
                    "500": 
                    "404": 
                    "400": 
                is: ["fields"]
            put: 
                description: "Update a notification."
                body: 
                    "application/json": 
                        schema: |
                            {
                               "$schema":"http://json-schema.org/draft-03/schema",
                               "type":"object",
                               "description":"A representation of a notification",
                               "properties":{
                                  "notificationType":{
                                     "required":true,
                                     "type":"number",
                                     "constraint":"must be numeric",
                                     "description":"id of notification type"
                                  },
                                  "segment":{
                                     "required":false,
                                     "type":"number",
                                     "constraint":"must be numeric",
                                     "description":"id of segment"
                                  },
                                  "game":{
                                     "required":false,
                                     "type":"number",
                                     "constraint":"must be numeric",
                                     "description":"id of game connected with this notification"
                                  },
                                  "data":{
                                     "required":false,
                                     "type":"object",
                                     "description":"data required to process notification"
                                  }
                               }
                            }
                        example: |
                            {
                                "data": {
                                    "key": "value"
                                },
                                "game": 1,
                                "notificationType": 1,
                                "segment": 1
                            }
                responses: 
                    "200": 
                        description: "Success!"
                        body: 
                            "application/json": 
                                example: "example"
                    "500": 
                    "404": 
                    "400": 
            delete: 
                description: "Delete a notification."
                responses: 
                    "200": 
                        description: "Success!"
                        body: 
                            "application/json": 
                                example: "example"
                    "500": 
                    "404": 
                    "400": 
        "/types": 
            displayName: "NotificationTypes"
            type: "common"
            get: 
                description: "Get a list of notification types."
                queryParameters: 
                    "fields": 
                        description: "The fields we want to show in our result."
                        type: string
                        required: false
                        repeat: false
                        example: "id,name,description"
                    "offset": 
                        description: "Number of returned items."
                        type: number
                        required: false
                        repeat: false
                    "limit": 
                        description: "Starting position."
                        type: number
                        required: false
                        repeat: false
                    "order": 
                        description: "The fields we want to order by and the type of ordering."
                        type: string
                        required: false
                        repeat: false
                        example: "id:DESC"
                responses: 
                    "200": 
                        description: "Success!"
                        body: 
                            "application/json": 
                                schema: |
                                    {
                                       "$schema":"http://json-schema.org/draft-03/schema",
                                       "type":"object",
                                       "description":"A representation of a notification type",
                                       "properties":{
                                          "name":{
                                             "required":true,
                                             "type":"string",
                                             "constraint":"minimum 5, maximum 50 chars, alphanumeric characters and underscore",
                                             "description":"system name of notification type"
                                          },
                                          "action":{
                                             "required":true,
                                             "type":"string",
                                             "allowed":{
                                                "0":"INTERNAL_EVENT",
                                                "1":"INTERNAL_GROUP_EVENT",
                                                "2":"COUNTER_INC",
                                                "3":"COUNTER_MODIFY",
                                                "4":"ACHIEVEMENT",
                                                "5":"EMAIL",
                                                "6":"SOAP",
                                                "7":"REST",
                                                "8":"CUSTOM"
                                             },
                                             "description":"action"
                                          },
                                          "config":{
                                             "required":false,
                                             "type":"object",
                                             "description":"configuration for action"
                                          },
                                          "priority":{
                                             "required":false,
                                             "type":"string",
                                             "allowed":{
                                                "0":"PRIORITY_LOW",
                                                "1":"PRIORITY_MEDIUM",
                                                "2":"PRIORITY_NORMAL",
                                                "3":"PRIORITY_HIGH",
                                                "4":"PRIORITY_CRITICAL",
                                                "5":"PRIORITY_BLOCKER"
                                             },
                                             "default":"PRIORITY_MEDIUM",
                                             "description":"priority of notification type"
                                          }
                                       }
                                    }
                                example: |
                                    [
                                        {
                                            "id": 1,
                                            "action": "COUNTER_INC",
                                            "config": "Example config",
                                            "name": "Example",
                                            "priority": "PRIORITY_MEDIUM",
                                            "updatedAt": 1390236382695,
                                            "createdAt": 1390236382695
                                        }
                                    ]
                    "500": 
                    "404": 
                    "400": 
                is: ["fields", "paginator", "ordering"]
            post: 
                description: "Add a notification type."
                body: 
                    "application/json": 
                        schema: |
                            {
                               "$schema":"http://json-schema.org/draft-03/schema",
                               "type":"object",
                               "description":"A representation of a notification type",
                               "properties":{
                                  "name":{
                                     "required":true,
                                     "type":"string",
                                     "constraint":"minimum 5, maximum 50 chars, alphanumeric characters and underscore",
                                     "description":"system name of notification type"
                                  },
                                  "action":{
                                     "required":true,
                                     "type":"string",
                                     "allowed":{
                                        "0":"INTERNAL_EVENT",
                                        "1":"INTERNAL_GROUP_EVENT",
                                        "2":"COUNTER_INC",
                                        "3":"COUNTER_MODIFY",
                                        "4":"ACHIEVEMENT",
                                        "5":"EMAIL",
                                        "6":"SOAP",
                                        "7":"REST",
                                        "8":"CUSTOM"
                                     },
                                     "description":"action"
                                  },
                                  "config":{
                                     "required":false,
                                     "type":"object",
                                     "description":"configuration for action"
                                  },
                                  "priority":{
                                     "required":false,
                                     "type":"string",
                                     "allowed":{
                                        "0":"PRIORITY_LOW",
                                        "1":"PRIORITY_MEDIUM",
                                        "2":"PRIORITY_NORMAL",
                                        "3":"PRIORITY_HIGH",
                                        "4":"PRIORITY_CRITICAL",
                                        "5":"PRIORITY_BLOCKER"
                                     },
                                     "default":"PRIORITY_MEDIUM",
                                     "description":"priority of notification type"
                                  }
                               }
                            }
                        example: |
                            {
                                "action": "COUNTER_INC",
                                "config": "Example config",
                                "name": "Example",
                                "priority": "PRIORITY_MEDIUM"
                            }
                responses: 
                    "200": 
                        description: "Success!"
                        body: 
                            "application/json": 
                                example: "example"
                    "500": 
                    "400": 
            "/{typeId}": 
                displayName: "NotificationType"
                uriParameters: 
                    "typeId": 
                        displayName: "typeId"
                        type: string
                        required: true
                        repeat: false
                type: "common"
                get: 
                    description: "Get a notification type."
                    queryParameters: 
                        "fields": 
                            description: "The fields we want to show in our result."
                            type: string
                            required: false
                            repeat: false
                            example: "id,name,description"
                    responses: 
                        "200": 
                            description: "Success!"
                            body: 
                                "application/json": 
                                    schema: |
                                        {
                                           "$schema":"http://json-schema.org/draft-03/schema",
                                           "type":"object",
                                           "description":"A representation of a notification type",
                                           "properties":{
                                              "name":{
                                                 "required":true,
                                                 "type":"string",
                                                 "constraint":"minimum 5, maximum 50 chars, alphanumeric characters and underscore",
                                                 "description":"system name of notification type"
                                              },
                                              "action":{
                                                 "required":true,
                                                 "type":"string",
                                                 "allowed":{
                                                    "0":"INTERNAL_EVENT",
                                                    "1":"INTERNAL_GROUP_EVENT",
                                                    "2":"COUNTER_INC",
                                                    "3":"COUNTER_MODIFY",
                                                    "4":"ACHIEVEMENT",
                                                    "5":"EMAIL",
                                                    "6":"SOAP",
                                                    "7":"REST",
                                                    "8":"CUSTOM"
                                                 },
                                                 "description":"action"
                                              },
                                              "config":{
                                                 "required":false,
                                                 "type":"object",
                                                 "description":"configuration for action"
                                              },
                                              "priority":{
                                                 "required":false,
                                                 "type":"string",
                                                 "allowed":{
                                                    "0":"PRIORITY_LOW",
                                                    "1":"PRIORITY_MEDIUM",
                                                    "2":"PRIORITY_NORMAL",
                                                    "3":"PRIORITY_HIGH",
                                                    "4":"PRIORITY_CRITICAL",
                                                    "5":"PRIORITY_BLOCKER"
                                                 },
                                                 "default":"PRIORITY_MEDIUM",
                                                 "description":"priority of notification type"
                                              }
                                           }
                                        }
                                    example: |
                                        {
                                            "id": 1,
                                            "action": "COUNTER_INC",
                                            "config": "Example config",
                                            "name": "Example",
                                            "priority": "PRIORITY_MEDIUM",
                                            "updatedAt": 1390236382695,
                                            "createdAt": 1390236382695
                                        }
                        "500": 
                        "404": 
                        "400": 
                    is: ["fields"]
                put: 
                    description: "Update a notification type"
                    body: 
                        "application/json": 
                            schema: |
                                {
                                   "$schema":"http://json-schema.org/draft-03/schema",
                                   "type":"object",
                                   "description":"A representation of a notification type",
                                   "properties":{
                                      "name":{
                                         "required":true,
                                         "type":"string",
                                         "constraint":"minimum 5, maximum 50 chars, alphanumeric characters and underscore",
                                         "description":"system name of notification type"
                                      },
                                      "action":{
                                         "required":true,
                                         "type":"string",
                                         "allowed":{
                                            "0":"INTERNAL_EVENT",
                                            "1":"INTERNAL_GROUP_EVENT",
                                            "2":"COUNTER_INC",
                                            "3":"COUNTER_MODIFY",
                                            "4":"ACHIEVEMENT",
                                            "5":"EMAIL",
                                            "6":"SOAP",
                                            "7":"REST",
                                            "8":"CUSTOM"
                                         },
                                         "description":"action"
                                      },
                                      "config":{
                                         "required":false,
                                         "type":"object",
                                         "description":"configuration for action"
                                      },
                                      "priority":{
                                         "required":false,
                                         "type":"string",
                                         "allowed":{
                                            "0":"PRIORITY_LOW",
                                            "1":"PRIORITY_MEDIUM",
                                            "2":"PRIORITY_NORMAL",
                                            "3":"PRIORITY_HIGH",
                                            "4":"PRIORITY_CRITICAL",
                                            "5":"PRIORITY_BLOCKER"
                                         },
                                         "default":"PRIORITY_MEDIUM",
                                         "description":"priority of notification type"
                                      }
                                   }
                                }
                            example: |
                                {
                                    "action": "COUNTER_INC",
                                    "config": "Example config",
                                    "name": "Example",
                                    "priority": "PRIORITY_MEDIUM"
                                }
                    responses: 
                        "200": 
                            description: "Success!"
                            body: 
                                "application/json": 
                                    example: "example"
                        "500": 
                        "404": 
                        "400": 
                delete: 
                    description: "Delete a notification type."
                    responses: 
                        "200": 
                            description: "Success!"
                            body: 
                                "application/json": 
                                    example: "example"
                        "500": 
                        "404": 
                        "400": 
            "/doc": 
                displayName: "NotificationTypesDocs"
                type: "common"
                get: 
                    description: "Get a pseudo schema showing quickly how to make a proper json for notification types."
                    responses: 
                        "200": 
                            description: "Success!"
                            body: 
                                "application/json": 
                                    example: |
                                        {
                                           "$schema":"http://json-schema.org/draft-03/schema",
                                           "type":"object",
                                           "description":"A representation of a notification type",
                                           "properties":{
                                              "name":{
                                                 "required":true,
                                                 "type":"string",
                                                 "constraint":"minimum 5, maximum 50 chars, alphanumeric characters and underscore",
                                                 "description":"system name of notification type"
                                              },
                                              "action":{
                                                 "required":true,
                                                 "type":"string",
                                                 "allowed":{
                                                    "0":"INTERNAL_EVENT",
                                                    "1":"INTERNAL_GROUP_EVENT",
                                                    "2":"COUNTER_INC",
                                                    "3":"COUNTER_MODIFY",
                                                    "4":"ACHIEVEMENT",
                                                    "5":"EMAIL",
                                                    "6":"SOAP",
                                                    "7":"REST",
                                                    "8":"CUSTOM"
                                                 },
                                                 "description":"action"
                                              },
                                              "config":{
                                                 "required":false,
                                                 "type":"object",
                                                 "description":"configuration for action"
                                              },
                                              "priority":{
                                                 "required":false,
                                                 "type":"string",
                                                 "allowed":{
                                                    "0":"PRIORITY_LOW",
                                                    "1":"PRIORITY_MEDIUM",
                                                    "2":"PRIORITY_NORMAL",
                                                    "3":"PRIORITY_HIGH",
                                                    "4":"PRIORITY_CRITICAL",
                                                    "5":"PRIORITY_BLOCKER"
                                                 },
                                                 "default":"PRIORITY_MEDIUM",
                                                 "description":"priority of notification type"
                                              }
                                           }
                                        }
                        "500": 
                        "404": 
                        "400": 
        "/doc": 
            displayName: "NotificationsDocs"
            type: "common"
            get: 
                description: "Get a schema showing how to make a proper json for notifications."
                responses: 
                    "200": 
                        description: "Success!"
                        body: 
                            "application/json": 
                                example: |
                                    {
                                       "$schema":"http://json-schema.org/draft-03/schema",
                                       "type":"object",
                                       "description":"A representation of a notification",
                                       "properties":{
                                          "notificationType":{
                                             "required":true,
                                             "type":"number",
                                             "constraint":"must be numeric",
                                             "description":"id of notification type"
                                          },
                                          "segment":{
                                             "required":false,
                                             "type":"number",
                                             "constraint":"must be numeric",
                                             "description":"id of segment"
                                          },
                                          "game":{
                                             "required":false,
                                             "type":"number",
                                             "constraint":"must be numeric",
                                             "description":"id of game connected with this notification"
                                          },
                                          "data":{
                                             "required":false,
                                             "type":"object",
                                             "description":"data required to process notification"
                                          }
                                       }
                                    }
                    "500": 
                    "404": 
                    "400": 
    "/functions": 
        displayName: "Functions"
        type: "common"
        get: 
            description: "Get a list of functions."
            queryParameters: 
                "fields": 
                    description: "The fields we want to show in our result."
                    type: string
                    required: false
                    repeat: false
                    example: "id,name,description"
                "offset": 
                    description: "Number of returned items."
                    type: number
                    required: false
                    repeat: false
                "limit": 
                    description: "Starting position."
                    type: number
                    required: false
                    repeat: false
                "order": 
                    description: "The fields we want to order by and the type of ordering."
                    type: string
                    required: false
                    repeat: false
                    example: "id:DESC"
            responses: 
                "200": 
                    description: "Success!"
                    body: 
                        "application/json": 
                            schema: |
                                {
                                   "$schema":"http://json-schema.org/draft-03/schema",
                                   "type":"object",
                                   "description":"A representation of a function",
                                   "properties":{
                                      "name":{
                                         "required":true,
                                         "type":"string",
                                         "constraint":"minimum 5, maximum 50 chars, alphanumeric characters and underscore",
                                         "description":"name of function (if NATIVE, name of available one)"
                                      },
                                      "category":{
                                         "required":false,
                                         "type":"string",
                                         "constraint":"minimum 5, maximum 50 chars, alphanumeric characters and underscore",
                                         "description":"name of category (required if NATIVE)"
                                      },
                                      "description":{
                                         "required":false,
                                         "type":"string",
                                         "constraint":"minimum 5, maximum 500 chars",
                                         "description":"description of function"
                                      },
                                      "functionType":{
                                         "required":false,
                                         "type":"string",
                                         "allowed":{
                                            "0":"NATIVE",
                                            "1":"SCRIPT"
                                         },
                                         "default":"NATIVE",
                                         "description":"function can be native or JavaScript, look into documentation for list of NATIVE functions"
                                      },
                                      "scriptType":{
                                         "required":false,
                                         "type":"string",
                                         "allowed":{
                                            "0":"SYSTEM",
                                            "1":"CLIENT"
                                         },
                                         "default":"CLIENT",
                                         "description":"system scripts are predefined, client scripts are defined by user"
                                      },
                                      "scriptId":{
                                         "required":false,
                                         "type":"number",
                                         "constraint":"must be numeric",
                                         "default":"0",
                                         "description":"id of script (required if type is SCRIPT, client or system, look into documentation for list of predefined scripts)"
                                      }
                                   }
                                }
                            example: |
                                [
                                    {
                                        "id": 1,
                                        "category": "Example",
                                        "description": "Example description",
                                        "functionType": "NATIVE",
                                        "manifesto": {},
                                        "name": "Example",
                                        "scriptId": 1,
                                        "scriptType": "CLIENT",
                                        "updatedAt": 1390236382695,
                                        "createdAt": 1390236382695
                                    }
                                ]
                "500": 
                "404": 
                "400": 
            is: ["fields", "paginator", "ordering"]
        post: 
            description: "Add a new function using this request"
            body: 
                "application/json": 
                    schema: |
                        {
                           "$schema":"http://json-schema.org/draft-03/schema",
                           "type":"object",
                           "description":"A representation of a function",
                           "properties":{
                              "name":{
                                 "required":true,
                                 "type":"string",
                                 "constraint":"minimum 5, maximum 50 chars, alphanumeric characters and underscore",
                                 "description":"name of function (if NATIVE, name of available one)"
                              },
                              "category":{
                                 "required":false,
                                 "type":"string",
                                 "constraint":"minimum 5, maximum 50 chars, alphanumeric characters and underscore",
                                 "description":"name of category (required if NATIVE)"
                              },
                              "description":{
                                 "required":false,
                                 "type":"string",
                                 "constraint":"minimum 5, maximum 500 chars",
                                 "description":"description of function"
                              },
                              "functionType":{
                                 "required":false,
                                 "type":"string",
                                 "allowed":{
                                    "0":"NATIVE",
                                    "1":"SCRIPT"
                                 },
                                 "default":"NATIVE",
                                 "description":"function can be native or JavaScript, look into documentation for list of NATIVE functions"
                              },
                              "scriptType":{
                                 "required":false,
                                 "type":"string",
                                 "allowed":{
                                    "0":"SYSTEM",
                                    "1":"CLIENT"
                                 },
                                 "default":"CLIENT",
                                 "description":"system scripts are predefined, client scripts are defined by user"
                              },
                              "scriptId":{
                                 "required":false,
                                 "type":"number",
                                 "constraint":"must be numeric",
                                 "default":"0",
                                 "description":"id of script (required if type is SCRIPT, client or system, look into documentation for list of predefined scripts)"
                              }
                           }
                        }
                    example: |
                        {
                            "category": "Example",
                            "description": "Example description",
                            "functionType": "NATIVE",
                            "manifesto": {},
                            "name": "Example",
                            "scriptId": 1,
                            "scriptType": "CLIENT"
                        }
            responses: 
                "200": 
                    description: "Success!"
                    body: 
                        "application/json": 
                            example: "example"
                "500": 
                "400": 
        "/{functionId}": 
            displayName: "Function"
            uriParameters: 
                "functionId": 
                    displayName: "functionId"
                    type: string
                    required: true
                    repeat: false
            type: "common"
            get: 
                description: "Get one function by its id."
                queryParameters: 
                    "fields": 
                        description: "The fields we want to show in our result."
                        type: string
                        required: false
                        repeat: false
                        example: "id,name,description"
                responses: 
                    "200": 
                        description: "Success!"
                        body: 
                            "application/json": 
                                schema: |
                                    {
                                       "$schema":"http://json-schema.org/draft-03/schema",
                                       "type":"object",
                                       "description":"A representation of a function",
                                       "properties":{
                                          "name":{
                                             "required":true,
                                             "type":"string",
                                             "constraint":"minimum 5, maximum 50 chars, alphanumeric characters and underscore",
                                             "description":"name of function (if NATIVE, name of available one)"
                                          },
                                          "category":{
                                             "required":false,
                                             "type":"string",
                                             "constraint":"minimum 5, maximum 50 chars, alphanumeric characters and underscore",
                                             "description":"name of category (required if NATIVE)"
                                          },
                                          "description":{
                                             "required":false,
                                             "type":"string",
                                             "constraint":"minimum 5, maximum 500 chars",
                                             "description":"description of function"
                                          },
                                          "functionType":{
                                             "required":false,
                                             "type":"string",
                                             "allowed":{
                                                "0":"NATIVE",
                                                "1":"SCRIPT"
                                             },
                                             "default":"NATIVE",
                                             "description":"function can be native or JavaScript, look into documentation for list of NATIVE functions"
                                          },
                                          "scriptType":{
                                             "required":false,
                                             "type":"string",
                                             "allowed":{
                                                "0":"SYSTEM",
                                                "1":"CLIENT"
                                             },
                                             "default":"CLIENT",
                                             "description":"system scripts are predefined, client scripts are defined by user"
                                          },
                                          "scriptId":{
                                             "required":false,
                                             "type":"number",
                                             "constraint":"must be numeric",
                                             "default":"0",
                                             "description":"id of script (required if type is SCRIPT, client or system, look into documentation for list of predefined scripts)"
                                          }
                                       }
                                    }
                                example: |
                                    {
                                        "id": 1,
                                        "category": "Example",
                                        "description": "Example description",
                                        "functionType": "NATIVE",
                                        "manifesto": {},
                                        "name": "Example",
                                        "scriptId": 1,
                                        "scriptType": "CLIENT",
                                        "updatedAt": 1390236382695,
                                        "createdAt": 1390236382695
                                    }
                    "500": 
                    "404": 
                    "400": 
                is: ["fields"]
            put: 
                description: "Update a function."
                body: 
                    "application/json": 
                        schema: |
                            {
                               "$schema":"http://json-schema.org/draft-03/schema",
                               "type":"object",
                               "description":"A representation of a function",
                               "properties":{
                                  "name":{
                                     "required":true,
                                     "type":"string",
                                     "constraint":"minimum 5, maximum 50 chars, alphanumeric characters and underscore",
                                     "description":"name of function (if NATIVE, name of available one)"
                                  },
                                  "category":{
                                     "required":false,
                                     "type":"string",
                                     "constraint":"minimum 5, maximum 50 chars, alphanumeric characters and underscore",
                                     "description":"name of category (required if NATIVE)"
                                  },
                                  "description":{
                                     "required":false,
                                     "type":"string",
                                     "constraint":"minimum 5, maximum 500 chars",
                                     "description":"description of function"
                                  },
                                  "functionType":{
                                     "required":false,
                                     "type":"string",
                                     "allowed":{
                                        "0":"NATIVE",
                                        "1":"SCRIPT"
                                     },
                                     "default":"NATIVE",
                                     "description":"function can be native or JavaScript, look into documentation for list of NATIVE functions"
                                  },
                                  "scriptType":{
                                     "required":false,
                                     "type":"string",
                                     "allowed":{
                                        "0":"SYSTEM",
                                        "1":"CLIENT"
                                     },
                                     "default":"CLIENT",
                                     "description":"system scripts are predefined, client scripts are defined by user"
                                  },
                                  "scriptId":{
                                     "required":false,
                                     "type":"number",
                                     "constraint":"must be numeric",
                                     "default":"0",
                                     "description":"id of script (required if type is SCRIPT, client or system, look into documentation for list of predefined scripts)"
                                  }
                               }
                            }
                        example: |
                            {
                                "category": "Example",
                                "description": "Example description",
                                "functionType": "NATIVE",
                                "manifesto": {},
                                "name": "Example",
                                "scriptId": 1,
                                "scriptType": "CLIENT"
                            }
                responses: 
                    "200": 
                        description: "Success!"
                        body: 
                            "application/json": 
                                example: "example"
                    "500": 
                    "404": 
                    "400": 
            delete: 
                description: "Delete a function."
                responses: 
                    "200": 
                        description: "Success!"
                        body: 
                            "application/json": 
                                example: "example"
                    "500": 
                    "404": 
                    "400": 
        "/doc": 
            displayName: "FunctionsDoc"
            type: "common"
            get: 
                description: "Get a pseudo schema showing quickly how to make a proper json for functions."
                responses: 
                    "200": 
                        description: "Success!"
                        body: 
                            "application/json": 
                                example: |
                                    {
                                       "$schema":"http://json-schema.org/draft-03/schema",
                                       "type":"object",
                                       "description":"A representation of a function",
                                       "properties":{
                                          "name":{
                                             "required":true,
                                             "type":"string",
                                             "constraint":"minimum 5, maximum 50 chars, alphanumeric characters and underscore",
                                             "description":"name of function (if NATIVE, name of available one)"
                                          },
                                          "category":{
                                             "required":false,
                                             "type":"string",
                                             "constraint":"minimum 5, maximum 50 chars, alphanumeric characters and underscore",
                                             "description":"name of category (required if NATIVE)"
                                          },
                                          "description":{
                                             "required":false,
                                             "type":"string",
                                             "constraint":"minimum 5, maximum 500 chars",
                                             "description":"description of function"
                                          },
                                          "functionType":{
                                             "required":false,
                                             "type":"string",
                                             "allowed":{
                                                "0":"NATIVE",
                                                "1":"SCRIPT"
                                             },
                                             "default":"NATIVE",
                                             "description":"function can be native or JavaScript, look into documentation for list of NATIVE functions"
                                          },
                                          "scriptType":{
                                             "required":false,
                                             "type":"string",
                                             "allowed":{
                                                "0":"SYSTEM",
                                                "1":"CLIENT"
                                             },
                                             "default":"CLIENT",
                                             "description":"system scripts are predefined, client scripts are defined by user"
                                          },
                                          "scriptId":{
                                             "required":false,
                                             "type":"number",
                                             "constraint":"must be numeric",
                                             "default":"0",
                                             "description":"id of script (required if type is SCRIPT, client or system, look into documentation for list of predefined scripts)"
                                          }
                                       }
                                    }
                    "500": 
                    "404": 
                    "400": 
