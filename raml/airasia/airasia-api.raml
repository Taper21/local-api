#%RAML 0.8
title: "AirAsia REST API"
version: "v2"
baseUri: "https://airasia.isaacloud.com/api/{version}"
protocols: [HTTPS]
mediaType: "application/json"

documentation:
 - title: Getting Started
   content: !include getting-started.md
 - title: Basics of Authentication
   content: !include basics-of-authentication.md

schemas:
 - User: !include schemas/user.schema.json
 - Users: !include schemas/users.schema.json
 - Badge: !include schemas/badge.schema.json
 - Badges: !include schemas/badge.schema.json
 - Error: !include schemas/error.schema.json

resourceTypes:
  - collection:
      description: Collection of available <<resourcePathName>>.
      get?:
        responses:
          200:
            description: Success!
            body:
              application/json: 
                example: "example"
                schema: "schema"
          404:
            description: <<resourcePathName|!singularize>> not found
            body:
              application/json:
                schema: Error
                example: !include examples/404.error.example.json       
  - collection-item:
      description: Entity representing a <<resourcePathName|!singularize>>
      get?:
        description: |
          Get the <<resourcePathName|!singularize>>
          with <<resourcePathName|!singularize>>Id =
          {<<resourcePathName|!singularize>>Id}
        responses:
          200:
            description: Success!
            body:
              application/json: 
                example: "example"
                schema: "schema"
          404:
            description: <<resourcePathName|!singularize>> not found
            body:
              application/json:
                schema: !include schemas/error.schema.json
                example: !include examples/404.error.example.json 

securitySchemes:
  - oauth_2_0:
      description: |
        We use OAuth2 server implementation for authentication. It is an open standard and it provides a method for clients to access server resources on behalf of a resource owner.
      type: OAuth 2.0
      settings:
        accessTokenUri: https://airasia.isaacloud/token
        authorizationUri: https://airasia.isaacloud/authorize
        baseUri: https://airasia.isaacloud
      describedBy:
          headers:
              Authorization:
                  description: |
                     Used to send a valid OAuth 2 access token. Do not use
                     with the "access_token" query string parameter.
                  type: string
          responses:
              401:
                  description: |
                      Bad or expired token. This can happen if the user or Dropbox
                      revoked or expired an access token. To fix, you should re-
                      authenticate the user.
              403:
                  description: |
                      Bad OAuth request (wrong consumer key, bad nonce, expired
                      timestamp...). Unfortunately, re-authenticating the user won't help here.  
securedBy: [oauth_2_0]
traits:
 - pageable:
    queryParameters:
     offset:
      description: Skip over a number of elements by specifying an offset value for the query
      type: integer
      required: false
      example: 20
      default: 0
     limit:
      description: Limit the number of elements on the response
      type: integer
      required: false
      example: 80
      default: 10
 - tagable:
    queryParameters:
     groups:
      description: the tags we want to narrow down our search to
      type: string
      example: "foo,bar"
 - orderable:
    queryParameters:
     orderBy:
      description: the fields we want to order by and the type of ordering
      type: string
      example: "id:DESC,foo:ASC"
 - query:
    queryParameters:
     query:
      description: |
            JSON array [{"field1","value1","operator1"},{"field2","value2","operator2"},...,{"fieldN","valueN","operatorN"}] <<description>>
      example: |
            <<example>>
/users:
  displayName: Users
  type: collection
  get:
    securedBy: [oauth_2_0]
    description: Use this method to get the list of users.
    is: [
          pageable,
          tagable,
          orderable
        ]
    responses:
          200:
            body:
              application/json:
                example: !include examples/users.example.json
                schema: Users
  /{userId}:
    displayName: User
    type: collection-item
    uriParameters: 
        "userId": 
            displayName: userId
            description: UTest test.
            type: string
            required: true
            repeat: false    
    get:
      securedBy: [oauth_2_0]
      description: Get the user with `id = {userId}`.
      responses:
            200:
              body:
                application/json:
                  example: !include examples/user.example.json
                  schema: User  
/badges:
  displayName: Badges
  type: collection
  get:
    securedBy: [oauth_2_0]
    description: Use this method to get the list of badges.
    is: [
          pageable,
          tagable,
          orderable
        ]
    responses:
          200:
            body:
              application/json:
                example: !include examples/user.example.json          
  /{badgeId}:
    displayName: Badge
    type: collection-item
    get:
      securedBy: [oauth_2_0]
      description: Use this method to get a badge by its id.
      responses:
            200:
              body:
                application/json:
                  example: !include examples/user.example.json
                  schema: Badge       